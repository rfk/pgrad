#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Progress Report
\layout Section

Things to Include
\layout Standard

- stage now reached in relation to overall research plan
\layout Standard

- any problems that may hinder successful completion
\layout Standard

- work remaining to be completed
\layout Standard

- progress on actually writing the thesis
\layout Section

Introduction
\layout Standard

multi-agent systems classified into two groups - 
\begin_inset Quotes eld
\end_inset 

open multi-agent systems
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

multi-agent teams
\begin_inset Quotes erd
\end_inset 

.
 Typically bottom-up, teams could be top-down.
\layout Standard

We want to build a programming language that expresses what the team is
 to achieve, have them cooperate to determine a legal execution.
\layout Section

Progress
\layout Standard

- established the Golog paradigm as the most promising
\layout Standard

- preliminary extensions to Golog semantics for multi-agent teams
\layout Standard

- algorithm for deriving peristence conditions on the situation calculus
\layout Standard

- more flexible account of knowledge for multi-agent situation calculus
\layout Standard

- embedding of situation calculus into quantified hybrid logic
\layout Section

Future Work
\layout Standard

- formal results for persistence condition algorithm - termination, complexity
 for special cases
\layout Standard

- incorporate knowledge into MIndiGolog semantics, to achieve distributed
 control.
 Prove various useful properties of the specification:
\layout Standard

* full observability == no communication
\layout Standard

* guarantee that a possible solution will eventually be found
\layout Standard

- implement and test on distributed machines using realistic example
\layout Standard

- investigate performance, complexity issues
\layout Standard

- investigate QHL for efficiency, easy of programming, ...
\layout Section

Conclusion
\layout Standard

- going great guns :-)
\the_end
