#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

A Programming Language for Multi-Agent Teams: Progress Report
\layout Author

Ryan Kelly
\layout Standard

When a team of agents must cooperate closely in order to achieve some shared
 goal, they can be usefully conceptualized as a single agent with distributed
 sensing, reasoning and acting capabilities.
 Behaviors and goals are naturally ascribed to the team rather than to individua
l members.
 Such a 
\begin_inset Quotes eld
\end_inset 

team program
\begin_inset Quotes erd
\end_inset 

 could be specified once, then given to any suitable team of agents for
 execution.
\layout Standard

In my thesis I adapt the idea of
\emph on 
 high-level program
\emph default 
 
\emph on 
execution
\emph default 
 for use in such a manner.
 A single (potentially non-deterministic) program is written describing
 the desired behavior of the team.
 The individual agents then cooperate amongst themselves to find and execute
 a legal execution of this program.
 By basing the programming language on a formal logical semantics, it is
 possible to prove various properties of the program and to guarantee that
 the agents will find a legal execution if one exists.
\layout Standard

Specifically, I extend the Situation Calculus and the Golog family of programmin
g languages for this purpose.
 These languages have proven useful in a wide variety of single-agent applicatio
ns, and have also been used for coordination of multi-agent teams in a manner
 simlar to that suggested above.
 My work builds on this by developing a robust account of the combination
 of concurrency, time, exogenous actions and knowledge for the situation
 calculus with multiple agents.
 A new Golog variant based on this account allows for fully distributed
 execution of a team program, including automatic communication when necessary
 for coordination.
\layout Standard

The following points outline the major components of the thesis, and the
 work achieved on each so far.
 Several conference papers have been produced, with several more in development,
 which will be merged to form the main body of the final thesis.
\layout Itemize


\series bold 
Identification of Situation Calculus/Golog as most promising approach
\newline 

\series default 
Various justifications for the choice of Golog accompany each of the papers
 produced.
 These will be combined and extended for the final thesis.
\layout Itemize


\series bold 
Extension of Golog for multi-agent domains
\series default 

\newline 
 A new Golog variant named MIndiGolog has been developed and a prototype
 system implemented.
 The paper 
\begin_inset Quotes eld
\end_inset 

High-Level Program Execution for Multi-Agent Teams
\begin_inset Quotes erd
\end_inset 

 was prepared and submitted to the AAMAS06 and AAAI06 conferences.
\layout Itemize


\series bold 
Autmoated reasoning about property persistence
\series default 

\newline 
The paper 
\begin_inset Quotes eld
\end_inset 

Property Persistence in the Situation Calculus
\begin_inset Quotes erd
\end_inset 

 is currently at draft stage, in preparation for submission to IJCAI07.
\layout Itemize


\series bold 
More powerful account of knowledge for multiple agents
\series default 
 
\newline 
The paper 
\begin_inset Quotes eld
\end_inset 

Multi-Agent Knowledge in the Situation Calculus with Partial Awareness of
 Actions
\begin_inset Quotes erd
\end_inset 

 is currently at draft stage, in preparation for submission to IJCAI07.
\layout Itemize


\series bold 
Distributed Execution of MIndiGolog programs
\newline 

\series default 
Several preliminary ideas have been developed for combining the semantics
 of MIndiGolog with my new account of multi-agent knowledge, allowing teams
 to execute MIndiGolog programs without centralised control.
\layout Itemize


\series bold 
Implementation and testing of prototype system
\series default 

\newline 
Once the theoretical aspects are finalised, a full prototype implementation
 will be developed and tested to demonstrate the practicality of the system.
\layout Standard

On the basis of the work completed so far, I am currently applying for conversio
n from Masters to PhD candidature.
 Work is progressing on schedule and I am confident that the thesis can
 be finalised by 12 April 2008, the expected completion date of my candidature
 if conversion to PhD to successful.
\the_end
