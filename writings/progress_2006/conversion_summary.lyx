#LyX 1.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{a4wide}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
A Programming Language for Multi-Agent Teams
\end_layout

\begin_layout Author
PhD Conversion Report Summary
\newline

\newline
Ryan Kelly
\newline
Department of Computer Science and
 Software Engineering
\newline
The University of Melbourne
\newline
Parkville, Australia
\newline
rfk@csse.unim
elb.edu.au
\newline

\newline
Supervisor: Dr.
 Adrian Pearce
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
When a team of agents must cooperate closely in order to achieve some shared
 goal, they may be usefully conceptualized as a single agent with distributed
 sensing, reasoning and acting capabilities.
 Behaviors and goals are more naturally ascribed to the team rather than
 to individual members.
 This viewpoint suggests that techniques for programming in single-agent
 systems may be may be useful when programming the behavior of multi-agent
 teams: rather than specifying the behavior of each team member, write a
 single program that determines the behavior of the entire team.
\end_layout

\begin_layout Standard
In my thesis I adapt the idea of
\emph on
 
\emph default
High-Level Program
\emph on
 
\emph default
Execution for use in such a manner.
 A single program is written describing the desired behavior of the team.
 The individual team members then cooperate amongst themselves to find and
 perform a legal execution of this program.
 Specifically, I extend the Situation Calculus and the Golog family of programmi
ng languages for this purpose.
 The result is a new programming language named 
\begin_inset Quotes eld
\end_inset

MIndiGolog
\begin_inset Quotes erd
\end_inset

 suitable for specifying the behavior of multi-agent teams.
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
This project focuses on programming the behavior of teams of autonomous
 agents who are required to cooperate closely to perform some shared task.
 Such teams can be found in many different settings - for example, a team
 of robots assembling a complicated artifact or playing a game of soccer,
 or a group of computers performing a distributed calculation.
 A robust formalism for programming such teams would find a wide variety
 of applications.
\end_layout

\begin_layout Standard
As will be discussed below, there are two main approaches to specifying
 the behavior of a team of agents.
 In the Multi-Agent Systems approach, each agent acts according to its own
 individual program, with individual goals and desires, and the behavior
 of the team emerges from the interactions between such agents.
 In the Distributed Problem Solving approach, a single task is posed to
 the team as a whole, who cooperate to execute it.
 For teams which must cooperate closely, the later approach offers some
 distinct advantages:
\end_layout

\begin_layout Itemize
It is easier to validate and predict the behavior of the team, as it does
 not rely on emergent interactions
\end_layout

\begin_layout Itemize
The same task specification may be given to any team of agents, facilitating
 re-usability and flexibility
\end_layout

\begin_layout Itemize
The programmer need not specify unimportant details such as precisely which
 agents perform which aspects of the task, again facilitating re-usability
 and flexibility
\end_layout

\begin_layout Itemize
The agents are better able to anticipate (and thus coordinate and assist
 with) the actions of other agents, increasing overall team performance
\end_layout

\begin_layout Standard
While this approach has met some success in programming the behavior of
 teams, the tasks to be carried out are typically specified using fairly
 limiting formalisms, such as decomposing tasks into simple combinations
 of sub-tasks.
 High-Level Program Execution, a technique from single-agent programming
 actualized in the programming language Golog, has several advantages over
 existing formalisms for specifying the tasks to be performed by the team:
\end_layout

\begin_layout Itemize
It provides a greater level of control over the amount of reasoning the
 agents are required to perform, even allowing purely goal-driven planning
 when required
\end_layout

\begin_layout Itemize
It is more natural for the programmer, giving easy access to common programming
 constructs such as loops and if-then-else
\end_layout

\begin_layout Itemize
It is based on a more sophisticated logic of actions
\end_layout

\begin_layout Standard
Unfortunately, the existing semantics of languages such as Golog are not
 rich enough to robustly capture the behavior of multi-agent teams.
 They require enhancement to incorporate features such as true concurrency,
 time, and knowledge in a partially-observable multi-agent environment.
\end_layout

\begin_layout Standard
Distributed Problem Solving and High-Level Program Execution are both compelling
 approaches in their respective fields.
 By extending Golog to allow it to properly represent multi-agent teams,
 and by defining an appropriate strategy for coordinating planning and execution
, I will develop the union of these technologies into a powerful formalism
 for programming multi-agent teams.
\end_layout

\begin_layout Subsection
Research Objectives
\end_layout

\begin_layout Standard
The major objectives of my research program are thus:
\end_layout

\begin_layout Itemize
Develop an appropriate formalism for programming multi-agent teams at the
 level of the team.
 Specifically:
\end_layout

\begin_deeper
\begin_layout Itemize
Enhance the semantics of Golog to effectively model the dynamics of multi-agent
 teams in partially-observable environments
\end_layout

\begin_layout Itemize
Develop a coordination strategy allowing the agents to execute a shared
 Golog program, while making efficient use of distributed computing resources
\end_layout

\end_deeper
\begin_layout Itemize
Develop an implementation of the formalism that can be used to program real-worl
d teams
\end_layout

\begin_layout Itemize
Demonstrate the effectiveness of the approach using a small example implemented
 on a set of networked computers
\end_layout

\begin_layout Section
Progress to Date
\end_layout

\begin_layout Standard
The major works I have achieved so far are:
\end_layout

\begin_layout Itemize

\series bold
Manuscript:
\series default
 
\begin_inset Quotes eld
\end_inset

High-Level Program Execution for Multi-Agent Teams
\begin_inset Quotes erd
\end_inset


\newline
Submitted to AAMAS'06 and AAAI'06 conferences
\end_layout

\begin_layout Itemize

\series bold
Manuscript:
\series default
 
\begin_inset Quotes eld
\end_inset

Property Persistence in the Situation Calculus
\begin_inset Quotes erd
\end_inset


\newline
Currently in draft stage, submission planned to IJCAI'07 conference
\end_layout

\begin_layout Itemize

\series bold
Manuscript: 
\series default

\begin_inset Quotes eld
\end_inset

Multi-Agent Knowledge in the Situation Calculus with Partial Awareness of
 Actions
\begin_inset Quotes erd
\end_inset


\newline
Currently in second draft stage, submission planned to IJCAI'07 conference
\end_layout

\begin_layout Itemize

\series bold
Software: 
\series default
A centralised implementation of MIndiGolog using the CIAO Prolog system
\end_layout

\begin_layout Itemize

\series bold
Software:
\series default
 An implementation of MIndiGolog enabling distributed planning, using the
 Mozart programming system 
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Standard
The additional major works I anticipate producing are:
\end_layout

\begin_layout Itemize

\series bold
Manuscript: 
\series default

\begin_inset Quotes eld
\end_inset

Distributed Execution of MIndiGolog Programs
\series bold

\begin_inset Quotes erd
\end_inset


\newline

\series default
This paper will desribe an execution algorithm and coordination strategy
 allowing the truly distributed execution of MIndiGolog programs.
\end_layout

\begin_layout Itemize

\series bold
Software: 
\series default
An implementation of distributed execution for MIndiGolog programs
\end_layout

\begin_layout Standard
Once completed, the four manuscripts described above will be merged to produce
 the bulk of my final thesis, along with a description of the implementation
 and performance of the software systems.
 The following is the proposed timeline for completion of my thesis:
\end_layout

\begin_layout Itemize

\series bold
Now - June 2006:
\series default
 Finalise existing papers for submission to IAT'06, IJCAI'07 and AI'06 conferenc
es.
 Preliminary development of distributed execution strategy.
\end_layout

\begin_layout Itemize

\series bold
July - October 2006:
\series default
 Finalise distributed execution strategy.
 Prepare manuscript for submission to AAMAS'07.
\end_layout

\begin_layout Itemize

\series bold
Nov 2006 - June 2007:
\series default
 Begin composing manuscripts into final thesis.
 First implementation of final system in prolog.
 First draft of thesis.
\end_layout

\begin_layout Itemize

\series bold
July - Nov 2007:
\series default
 Finalise implementation.
 Perform testing using networked departmental machines as agents.
 Second draft of thesis.
\end_layout

\begin_layout Itemize

\series bold
Nov 2007 - Apr 2008:
\series default
 Finalisation of thesis.
 Thesis submission.
\end_layout

\end_body
\end_document
