#LyX 1.5.1 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass jair
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Cooperative Task Execution in the Situation Calculus
\newline
Thesis Outline
\end_layout

\begin_layout Author
Ryan Kelly
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Itemize
Main Idea: develop techniques for the cooperative execution of a shared
 task by a team of agents in a rich multi-agent domain
\end_layout

\begin_layout Itemize
Additional benefit: increase ability of situation calculus to model rich
 multi-agent domains
\end_layout

\begin_layout Itemize
Motivating Example: program a team of robotic chefs to prepare a meal
\end_layout

\begin_layout Itemize
Introduce sitcalc/golog paradigm, argue for its effectiveness
\end_layout

\begin_deeper
\begin_layout Itemize
rich theory of action
\end_layout

\begin_layout Itemize
powerful nondeterminism control
\end_layout

\begin_layout Itemize
effective reasoning techniques
\end_layout

\end_deeper
\begin_layout Itemize
Point out limitations: its focuses on synchronous, single-agent domains
\end_layout

\begin_layout Itemize
Major achievements of this thesis
\end_layout

\begin_deeper
\begin_layout Itemize
MIndiGolog: a golog semantics suitable for multi-agent teams
\end_layout

\begin_layout Itemize
New reasoning techniques, allowing more powerful queries
\end_layout

\begin_layout Itemize
Robust multi-agent account of knowledge in rich asynchronous domains
\end_layout

\begin_layout Itemize
Semantics and techniques for offline planning a joint execution of a program
\end_layout

\begin_layout Itemize
Online execution using 
\begin_inset Quotes eld
\end_inset

social laws
\begin_inset Quotes erd
\end_inset

 style coordination
\end_layout

\begin_layout Itemize
Implementation in Oz with distributed execution planning
\end_layout

\end_deeper
\begin_layout Section
Background
\end_layout

\begin_layout Itemize
some background palaver about distributed problem solving, and touch on
 the many related issues we will 
\series bold
not
\series default
 address in this thesis
\end_layout

\begin_layout Itemize
logical formalities for the situation calculus and Golog.
 History: Golog, ConGolog, IndiGolog, TConGolog, DTGolog, ReadyLog, TEAMGolog
\end_layout

\begin_layout Itemize
Epistemic reasoning: possible worlds model and modal logic, treatment in
 sitcalc, group-level epistemic modalities and why they're difficult
\end_layout

\begin_layout Itemize
The Oz programming language, why we're using it, and some brief examples
\end_layout

\begin_layout Section
Existing Techniques
\end_layout

\begin_layout Itemize
Implement example from cooking domain in vanilla IndiGolog.
 Show that it works, but is far from ideal
\end_layout

\begin_layout Section
MIndiGolog: Multi-Agent IndiGolog
\end_layout

\begin_layout Itemize
To better represent rich multi-agent domains, we add: true concurrency,
 natural actions, continuous time.
 Explanation of why each is desirable.
\end_layout

\begin_layout Itemize
Time: show modifications to IndiGolog semantics, explain use of rational
 constraint solver
\end_layout

\begin_layout Itemize
True Concurrency: explain safety restrictions on when concurrency is possible,
 show changes to concurrency operator semantics, explain why other operators
 remain unmodified, heuristics to optimize concurrency
\end_layout

\begin_layout Itemize
Natural Actions: show changes to semantics of action and test operators,
 contrast with exogenous actions in ConGolog,
\end_layout

\begin_layout Itemize
Demonstrate implementation in Oz - full code in the appendix.
\end_layout

\begin_layout Itemize
Show simple everyone-plans-individually execution for example program, highlight
 improvements over previous section.
\end_layout

\begin_layout Itemize
Demonstrate use of parallel search to share planning workload
\end_layout

\begin_layout Itemize
Limitations of this first attempt: requires full observability/synchronicity,
 no sensing actions, no knowledge hierarchy
\end_layout

\begin_layout Section
Effective Reasoning
\end_layout

\begin_layout Itemize
Explain why we use the term 
\begin_inset Quotes eld
\end_inset

effective
\begin_inset Quotes erd
\end_inset

, talk about the basics in more detail.
\end_layout

\begin_layout Itemize
Basic technique: use rewriting to handle actions, then perform reasoning
 in the 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 domain
\end_layout

\begin_deeper
\begin_layout Itemize
proof that static domain reasoning can be done using situation-suppressed
 formulae
\end_layout

\end_deeper
\begin_layout Itemize
Techniques for ensuring decidability: propositional domains, well-founded
 function types.
\end_layout

\begin_layout Itemize
Limitations of current techniques: cannot handle universal quantification
 or open-world reasoning, which we will need to do.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Property Persistence
\begin_inset Quotes erd
\end_inset

 as a restricted universally-quantified query:
\end_layout

\begin_deeper
\begin_layout Itemize
use fixpoint calculation in static domain to replace induction over situations;
 Persistence Condition 
\begin_inset Formula $\mathcal{P}[\phi,\alpha]$
\end_inset


\end_layout

\begin_layout Itemize
proof that 
\begin_inset Formula $\mathcal{P}$
\end_inset

 always exists, algorithm to calculate it, discussion of termination guarantees
\end_layout

\begin_layout Itemize
reasons what this is more effective than existing techniques
\end_layout

\end_deeper
\begin_layout Itemize
Open-world reasoning requires regressing entire formulae in memory, rather
 than handling them one term at a time:
\end_layout

\begin_deeper
\begin_layout Itemize
problem: regression can cause exponential blowout in formula size
\end_layout

\begin_layout Itemize
use Shannon graphs to overcome this blowout via structure sharing
\end_layout

\begin_layout Itemize
proof that regression can be applied node-at-a-time on a Shannon graph
\end_layout

\begin_layout Itemize
experimental data showing memory savings over the naive approach
\end_layout

\end_deeper
\begin_layout Itemize
how to combine constraint solving with this approach (basic 
\begin_inset Quotes eld
\end_inset

theory reasoning
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Section
Knowledge and Common Knowledge
\end_layout

\begin_layout Itemize
Introduce observations and views to 
\begin_inset Quotes eld
\end_inset

localise
\begin_inset Quotes erd
\end_inset

 the global situation to each agent, allowing asynchronicity and partial
 observability
\end_layout

\begin_layout Itemize
Knowledge of individual agents:
\end_layout

\begin_deeper
\begin_layout Itemize
Successor state axiom for 
\begin_inset Formula $K$
\end_inset

 in terms of observations 
\end_layout

\begin_layout Itemize
Proof that it behaves as desired
\end_layout

\begin_layout Itemize
Demonstrate how to encode existing accounts of knowledge in our formalism
\end_layout

\begin_layout Itemize
Express the regression of 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 using property persistence
\end_layout

\begin_layout Itemize
How to regress using a local view rather than a full situation
\end_layout

\end_deeper
\begin_layout Itemize
Common Knowledge
\end_layout

\begin_deeper
\begin_layout Itemize
Why it's important, why it's difficult, introduce techniques from LCC.
\end_layout

\begin_layout Itemize
Encoding epistemic path modalities in the sitcalc
\end_layout

\begin_layout Itemize
How to regress epistemic paths
\end_layout

\begin_layout Itemize
Proof that this regression maintains semantics of the paths in compound
 cases
\end_layout

\begin_layout Itemize
Proof that this regression reduces to property persistence in base case
\end_layout

\end_deeper
\begin_layout Itemize
Distributed knowledge, and how to approximate it.
\end_layout

\begin_layout Section
Planning and Program Execution
\end_layout

\begin_layout Itemize
Explanation of what the planning process needs to achieve, and how; ie.
 removing non-determinism
\end_layout

\begin_layout Itemize
Introduce Joint Executions as tool for performing planning in partially-observab
le, asynchronous multi-agent domains:
\end_layout

\begin_deeper
\begin_layout Itemize
acts as a deordering of totally-ordered plan
\end_layout

\begin_layout Itemize
ensure reasoning can be done using standard tools
\end_layout

\begin_layout Itemize
ensure observability when synchronisation is required
\end_layout

\begin_layout Itemize
account for indistinguishably between situations, ensure no confusion during
 execution
\end_layout

\end_deeper
\begin_layout Itemize
Demonstrate planning and execution of an example program:
\end_layout

\begin_deeper
\begin_layout Itemize
planning separately, using common knowledge to coordinate without communication
\end_layout

\begin_layout Itemize
planning together, using distributed knowledge and parallel search
\end_layout

\end_deeper
\begin_layout Itemize
Social laws for online execution
\end_layout

\begin_deeper
\begin_layout Itemize
Use a preference ordering to coordinate selection of steps
\end_layout

\begin_layout Itemize
Definition of 
\begin_inset Quotes eld
\end_inset

safe
\begin_inset Quotes erd
\end_inset

 actions: legal when performed with any other safe action
\end_layout

\begin_layout Itemize
An action can be executed immediately when it is commonly known to be safe
\end_layout

\begin_layout Itemize
Communicating to coordinate when there are no safe actions
\end_layout

\end_deeper
\begin_layout Itemize
Managing the search operator during online execution
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Section
Conclusion
\end_layout

\end_body
\end_document
