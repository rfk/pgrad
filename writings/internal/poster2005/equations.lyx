#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Standard


\begin_inset Formula \[
place\_ in(Agent_{1},Egg,Bowl)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
transfer\_ contents(Agent_{2},Board,Bowl)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
S_{0}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
do(action_{1},S_{0})\]

\end_inset 


\layout Standard


\begin_inset Formula \[
do(action_{2},do(action_{1},S_{0}))\]

\end_inset 


\layout Standard


\begin_inset Formula \[
has\_ object(Agent_{1},Knife,S_{0})\]

\end_inset 


\layout Standard


\begin_inset Formula \[
contents(Bowl,[Egg],do(place\_ in(Agent_{1},Egg,Bowl),S_{0}))\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Poss(place\_ in(agt,obj,cont),s)\leftarrow has\_ object(agt,obj,s)\wedge has\_ object(agt,cont,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
do(\{ action_{1},action_{2}\},s_{0})\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Poss(c,s)\leftarrow\forall a.\left[a\in c\rightarrow Poss(a,s)\right]\wedge\neg conflicts(c,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
do(c,t,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Poss(c,t,s)\]

\end_inset 


\begin_inset Formula \[
conflicts(c,t,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
start(do(c,t,s)\equiv t\]

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \[
legal(S_{0})\equiv True\]

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\begin{array}{cc}
legal(do(c,t,s))\equiv & legal(s)\wedge Poss(c,t,s)\wedge start(s)\leq t\wedge\\
 & (\forall a,t_{a}).natural(a)\wedge Poss(a,t_{a},s)\rightarrow\\
 & \left[a\in c\vee t<t_{a}\right]\\
\end{array}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\begin{array}{ccc}
lntp(s,t) & \equiv & \exists a\left[natural(a)\wedge Poss(a,t,s)\right]\wedge start(s)\leq t\wedge\\
 &  & \forall a,t_{a}\left[natural(a)\wedge Poss(a,t_{a},s)\rightarrow t\leq t_{a}\right]\end{array}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Do(\delta,s,s')\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Do(a,s,s')\equiv Poss(a,s)\wedge s'=do(a,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Do(\phi?,s,s')\equiv\phi\wedge s=s'\]

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\exists\]

\end_inset 


\layout Standard

\layout Standard


\begin_inset Formula \[
Do(\delta_{1};\delta_{2},s,s')\equiv\exists s^{*}.\left[Do(\delta_{1},s,s^{*})\wedge Do(\delta_{2},s^{*},s')\right]\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Do(\delta_{1}|\delta_{2},s,s')\equiv Do(\delta_{1},s,s')\vee Do(\delta_{2},s,s')\]

\end_inset 


\layout Standard


\begin_inset Formula \[
Do((\pi x)\delta(x),s,s')\equiv\exists x\, Do(\delta(x),s,s')\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\mathbf{if\,}\phi\,\mathbf{then}\,\delta_{1}\,\mathbf{else\,}\delta_{2}\,\mathbf{endif}\equiv(\phi?;\delta_{1})|(\neg\phi?;\delta_{2})\]

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
Trans(\delta_{1};\delta_{2},s,\delta',s')\equiv & \exists\gamma\delta'=(\gamma;\delta_{2})\wedge Trans(\delta_{1},s,\gamma,s') & \vee\\
 & Final(\delta_{1},s)\wedge Trans(\delta_{2},s,\delta',s')\end{eqnarray*}

\end_inset 

 
\begin_inset Formula \[
Final(\delta_{1};\delta_{2},s)\equiv Final(\delta_{1},s)\wedge Final(\delta_{2},s)\]

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
Trans(\delta_{1}||\delta_{2},s,\delta',s')\equiv & \exists\gamma.\delta'=(\gamma||\delta_{2})\wedge Trans(\delta_{1},s,\gamma,s') & \vee\\
 & \exists\gamma.\delta'=(\delta_{1}||\gamma)\wedge Trans(\delta_{2},s,\gamma,s')\end{eqnarray*}

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
Trans(\delta_{1}||\delta_{2},s,\delta',s')\equiv & \exists\gamma.\delta'=(\gamma||\delta_{2})\wedge Trans(\delta_{1},s,\gamma,s') & \vee\\
 & \exists\gamma.\delta'=(\delta_{1}||\gamma)\wedge Trans(\delta_{2},s,\gamma,s') & \vee\\
 & \exists c_{1},c_{2},\gamma_{1},\gamma_{2},t.Trans(\delta_{1},s,\gamma_{1},do(c_{1},t,s)) & \wedge\\
 & Trans(\delta_{2},s,\gamma_{2},do(c_{2},t,s))\wedge\delta'=(\gamma_{1}||\gamma_{2}) & \wedge\\
 & Poss(c_{1}\cup c_{2},t,s)\wedge s'=do(c_{1}\cup c_{2},t,s)\end{eqnarray*}
 

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
\mathbf{proc}\, & EnsureHas(agt,obj)\\
 &  & \mathbf{if}\, has\_ object(agt,obj,now)\,\mathbf{then}\, nil\\
 &  & \mathbf{else}\, acquire\_ object(agt,obj)\,\mathbf{endif}\\
\mathbf{endproc}\end{eqnarray*}

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
\mathbf{proc}\, & DoPlaceIn(agt,obj,dest)\\
 &  & EnsureHas(agt,obj)\,||\, EnsureHas(agt,dest)\\
 &  & ;\, place\_ in(agt,obj,dest)\,;\, release\_ object(agt,dest)\\
\mathbf{endproc}\end{eqnarray*}

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
\mathbf{proc}\, & MakeCakeMix(dest)\\
 &  & \pi(agt)(doPlaceTypeIn(agt,Egg,dest))\\
 &  & ;\,\pi(agt)(doPlaceTypeIn(agt,Flour,dest))\\
 &  & ;\,\pi(agt)(doPlaceTypeIn(agt,Sugar,dest))\\
 &  & ;\,\pi(agt)(acquire\_ object(agt,dest)\\
 &  & \,\,\,\,\,\,\,\,\,\,\,\,;\, begin\_ task(agt,mix(dest,5))\\
 &  & \,\,\,\,\,\,\,\,\,\,\,\,;\, end\_ task(agt,mix(dest,5))\\
 &  & \,\,\,\,\,\,\,\,\,\,\,\,;\, release\_ object(agt,dest))\\
\mathbf{endproc}\end{eqnarray*}

\end_inset 


\layout Standard


\begin_inset Formula \[
()\]

\end_inset 


\layout Standard


\begin_inset Formula \begin{eqnarray*}
\mathbf{proc}\, & MakeMeal()\\
 &  & MakeEntree()\,||\, MakeMain()\\
 &  & \,||\, MakeDessert()\\
\mathbf{endproc}\end{eqnarray*}

\end_inset 


\the_end
