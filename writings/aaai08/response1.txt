Planning is "centralized" in the sense that the agents produce a single
Joint Execution for their shared program, but the planning workload is shared
among the agents using the distributed logic programming capabilities of Mozart.

The sitcalc background is lamentably short, but mostly standard.  Successor
state axioms operate as usual, and histories operate as in IndiGolog.
Obs/Out simply specify the observability of actions and sensing results, using
the standard sensing-result function SR.

As you suggest, JE's are purely a meta-level construct representing a family of
equivalent histories.  They are a tool for execution planning and not included 
in the sitcalc ontology.

The example JE should indeed identify "act2" as having two possible outcomes,
thanks for pointing this out.
