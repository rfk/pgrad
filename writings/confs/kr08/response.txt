
Many thanks to the reviewers for their helpful feedback.


Regarding notation:
 
In defn2, \mu represents a finite first-order substitution.
\mu(\phi) applies the substitution, replacing variables in \phi to
produce a uniform formula.  So the expression \mu(\phi)[s] evaluates \phi
with the current variable binding, at the current situation.
This definition glosses over some technicalities for brevity, but we can
add more detail for this particular case while referring to the appendix for
full details.

In the regression of Knows on p3, R(Poss ^ Obs) is used to replace
these non-primitive fluents with their corresponding definitions.
Poss and Obs are to be evaluated directly at s.
We will clarify this usage in the discussion immediately following the equation.



Regarding relationship to LCC:

The example could indeed be formulated in LCC, with equivalent entailments.
For finite domains there is likely a direct correspondence between our
formalism and LCC, although we have not explored this formally.

However, the situation calculus yields greater succinctness:
e.g. we can easily express that an agent will know something no matter what
happens next:

   \forall a: Poss(a,s) \rightarrow PKnows(agt,\phi,do(a,s))

In LCC actions are not terms and cannot be quantified over, so this could only
be expressed by explicitly enumerating the conjunction.

Moving beyond the finite case, our formalism allows the smooth incorporation
of the many extensions to the situation calculus developed for more complex
domains, e.g. concurrent actions, actions with duration, and explicit time.

We would like to dedicate a specific section to comparing and contrasting our
formalism with LCC, given the extra space available for final versions.


Regarding expressivity of the epistemic language:

The notion of a more restricted epistemic language that is still powerful
enough to express its own regression is indeed an intriguing possibility.
Our work provides a solid upper-bound on the required expressivity of such
a language:

  * Knows and CKnows alone are not sufficient
  * First-Order Dynamic Logic is sufficient

Our intuition is that FODL is also the lower bound of expressivity in the
general case, or at least very close to it.

To regress common knowledge correctly, one must consider all actions that
could be mistaken for the "real" action, and all actions that could be
mistaken for those actions, and so-on transitively.

We spent significant time trying to formulate this without using FODL
variables, but could not do so without an underlying finiteness assumption.
For example, if concurrent actions are not permitted and the domain has
a finite number of action types, we can use a Kleene-style argument similar
to that of LCC to regress common knowledge without using FODL variables,
permitting a less powerful path language.

Starting from Knows and CKnows, our regression rules generate only a subset
of FODL, eg. they will not generate nested iteration operators.
Precisely identifying this subset, and determining whether it can be made
robustly decidable, would certainly be a valuable avenue for future research.

We would be happy to add more discussion along these lines in the final
version of the paper.
