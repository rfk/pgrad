#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
Common Knowledge, Action, and the Frame Problem
\end_layout

\begin_layout Author
Ryan F.
 Kelly and Adrian R.
 Pearce
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Scherl and Levesque 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 have demonstrated how to embed he standard 
\begin_inset Quotes eld
\end_inset

possible worlds
\begin_inset Quotes erd
\end_inset

 model for knowledge inside a situation calculus theory of action, sothat
 the dynamics of knowledge update inherits Reiter's solution to the frame
 problem 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

.
 This approach has since been extended and enhanced to cover more general
 theories of action, in particular by Kelly and Pearce 
\begin_inset LatexCommand \cite{kelly07sc_know_obs}

\end_inset

 who provide an account of knowledge in a theory of action with multiple
 agents, concurrent actions, and partial observability.
\end_layout

\begin_layout Standard
In this paper we extend the approach further, to handle not just knowledge
 but 
\emph on
common knowledge
\emph default
 - the state of affairs when not only does everyone know something, but
 everyone knows that everyone knows it, and everyone knows that everyone
 knows that everyone knows it, and so on ad infinitum.
\end_layout

\begin_layout Standard
Common knowledge is difficult to capture in first-order theories because
 it (conceptually) appeals to the transitive closure of the possible-world
 relations, which is not first-order definable.
 We utilise the notion of property persistence 
\begin_inset LatexCommand \cite{kelly07sc_persistence}

\end_inset

 to capture the essence of this transitivity while appealing only to first-order
 reasoning.
\end_layout

\begin_layout Section
Preliminaries
\end_layout

\begin_layout Standard
We base our work in the formalism of 
\begin_inset LatexCommand \cite{kelly07sc_know_obs}

\end_inset

, where knowledge is defined in terms of a possible-situations fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 meaning 
\begin_inset Quotes eld
\end_inset

 in situation 
\begin_inset Formula $s$
\end_inset

, agent 
\begin_inset Formula $agt$
\end_inset

 believes the alternate situation 
\begin_inset Formula $s'$
\end_inset

 to be possible
\begin_inset Quotes erd
\end_inset

.
 Knowledge is defined as a macro over this fluent:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(agt,\phi,s)\,\isdef\,\forall s'\, K(s',s)\rightarrow\phi[s']\]

\end_inset


\end_layout

\begin_layout Standard
Following the style introduced by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, this macro is directly regressed by appealing to a successor state axiom
 for the knowledge fluent 
\begin_inset Formula $K$
\end_inset

:
\begin_inset Formula \begin{multline}
K(agt,s'',do(c,s))\equiv\\
\shoveleft{\,\,\,\,\,\,\,\,\,\,\left[\, Obs(agt,c,s)=\{\}\rightarrow K(agt,s'',s)\,\right]}\\
\shoveleft{\,\,\wedge\,\,\,\left[\, Obs(agt,c,s)\neq\{\}\rightarrow\right.}\\
\exists c',s'\,.\, Obs(agt,c',s')=Obs(agt,c,s)\\
\left.\wedge\, Poss(c',s')\wedge K(agt,s',s)\wedge do(c',s')\leq_{PbU(agt)}s''\,\right]\label{eqn:new_k_ssa}\end{multline}

\end_inset


\end_layout

\begin_layout Standard
TODO: more background, of course
\end_layout

\begin_layout Section
A Common-Knowledge Fluent
\end_layout

\begin_layout Standard
We will encode common knowledge in a similar way to the handling of knowledge
 above - we introduce a 
\begin_inset Quotes eld
\end_inset

common-knowledge
\begin_inset Quotes erd
\end_inset

 fluent 
\begin_inset Formula $C(agts,s',s)$
\end_inset

 to mean that 
\begin_inset Quotes eld
\end_inset

in situation 
\begin_inset Formula $s$
\end_inset

, the alternate situation 
\begin_inset Formula $s'$
\end_inset

 is considered possible by the group of agents 
\begin_inset Formula $agts$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 Common knowledge, like basic single-level knowledge, is defined as a macro
 over this fluent:
\begin_inset Formula \[
\mathbf{CKnows}(agts,\phi,s)\,\isdef\,\forall s'\, C(agts,s',s)\rightarrow\phi[s']\]

\end_inset


\end_layout

\begin_layout Standard
By developing a successor state axiom for the common knowledge fluent, we
 show how expressions of the form 
\begin_inset Formula $\mathbf{CKnows}(agts,\phi,s)$
\end_inset

 can be regressed.
\end_layout

\begin_layout Standard
Let us introduce the key intuitions in developing the successor state axiom
 of 
\begin_inset Formula $C$
\end_inset

:
\end_layout

\begin_layout Itemize
Two situations 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $s'$
\end_inset

 must be 
\begin_inset Formula $C$
\end_inset

-related if any agent would be unable to observe the world moving between
 the two
\end_layout

\begin_layout Itemize
TODO: hmmm...what else?
\end_layout

\begin_layout Standard
First we adapt the notion of 
\begin_inset Quotes eld
\end_inset

possible but unobservable
\begin_inset Quotes erd
\end_inset

 from 
\begin_inset LatexCommand \cite{kelly07sc_know_obs}

\end_inset

 to apply to a group of agents instead of a single agent.
 
\begin_inset Formula $PgU(agts,c,s)$
\end_inset

 will hold precisely when the actions 
\begin_inset Formula $c$
\end_inset

 are possible in situation 
\begin_inset Formula $s$
\end_inset

, but at least one of the agents would fail to make any observations if
 they occurred:
\begin_inset Formula \[
PgU(agts,c,s)\equiv Poss(c,s)\wedge\exists i\in agts\,.\, Obs(i,c,s)=\{\}\]

\end_inset


\end_layout

\begin_layout Standard
For any finite group of agents, the existential quantification can be expanded
 into a disjunction, meaning 
\begin_inset Formula $PgU(agts)$
\end_inset

 can be used as an action description predicate in the same manner as 
\begin_inset Formula $PbU$
\end_inset

(agt) in 
\begin_inset LatexCommand \cite{kelly07sc_know_obs}

\end_inset

.
\end_layout

\begin_layout Standard
We propose the following successor state axiom for the common knowledge
 fluent:
\begin_inset Formula \begin{multline}
C(agts,s'',do(c,s))\equiv\\
\shoveleft{\,\,\,\,\,\,\,\,\,\,\left[\,\left(\exists i\in agts\,.\, Obs(i,c,s)=\{\}\right)\rightarrow C(agts,s'',s)\,\right]}\\
\shoveleft{\,\,\wedge\,\,\,\left[\,\left(\neg\exists i\in agts\,.\, Obs(i,c,s)=\{\}\right)\rightarrow\right.}\\
\exists i\in agts,c',s'\,.\, Obs(i,c',s')=Obs(i,c,s)\\
\left.\wedge\, Poss(c',s')\wedge C(agts,s',s)\wedge do(c',s')\leq_{PgU(agts)}s''\,\right]\label{eqn:new_c_ssa}\end{multline}

\end_inset


\end_layout

\begin_layout Standard
Before developing a proof that this does indeed capture the dynamics of
 common knowledge, we note several pleasing intuitive results relating it
 to the folk wisdom of common knowledge:
\end_layout

\begin_layout Itemize
For a single agent, this definition collapses onto the definition for first-leve
l knowledge (TODO: this implies introspection i.e.
 transitive knowledge relation, so I think the definitions for 
\begin_inset Formula $C(s,S_{0})$
\end_inset

 and 
\begin_inset Formula $K(s,S_{0})$
\end_inset

will not coincide)
\end_layout

\begin_layout Itemize
Common knowledge cannot change without the simultaneous observation of some
 event by the entire group of agents
\end_layout

\begin_layout Standard
So how do we prove that this precisely captures common knowledge? First,
 we need some lemmas:
\end_layout

\begin_layout Standard
Knowledge inclusion:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\forall i\in agts\,.\,\left(K(i,s',s)\rightarrow C(agts,s',s)\right)\]

\end_inset


\end_layout

\begin_layout Standard
Proof: pretty easy I think...
\newline

\end_layout

\begin_layout Standard
Transitivity:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
C(agts,s',s)\wedge C(agts,s'',s')\rightarrow C(agts,s'',s)\]

\end_inset


\end_layout

\begin_layout Standard
Proof: not sure about this one.
 but it's key to the whole affair.
 needs some serious thought.
\newline

\end_layout

\begin_layout Standard
We now appeal to the standard fixed-point definition of common knowledge
 [TODO:ref], which states that:
\begin_inset Formula \[
\mathbf{CKnows}(agts,\phi,s)\equiv\mathbf{EKnows}(agts,\phi\wedge\mathbf{CKnows}(agts,\phi),s)\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $\mathbf{EKnows}$
\end_inset

 is a macro meaning 
\begin_inset Quotes eld
\end_inset

everyone knows
\begin_inset Quotes erd
\end_inset

, defined as:
\begin_inset Formula \[
\mathbf{EKnows}(agts,\phi,s)\,\isdef\,\forall i\in agts\,.\,\mathbf{Knows}(i,\phi,s)\]

\end_inset


\end_layout

\begin_layout Standard
Expanding the macros on both sides of this equivalence yields:
\begin_inset Formula \begin{multline*}
\forall s'\, C(agts,s',s)\rightarrow\phi[s']\\
\equiv\\
\forall i\in agts\,.\,\left(\forall s'\, K(i,s',s)\rightarrow\phi[s']\wedge\left(\forall s''\, C(agts,s'',s')\rightarrow\phi[s'']\right)\right)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
We re-arrange the rhs to give:
\begin_inset Formula \begin{multline*}
\forall s'\, C(agts,s',s)\rightarrow\phi[s']\\
\equiv\\
\forall i\in agts,s'\, K(i,s',s)\rightarrow\phi[s']\,\,\wedge\\
\forall i\in agts,s',s''\,.\, K(i,s',s)\rightarrow\left(C(agts,s'',s')\rightarrow\phi[s'']\right)\end{multline*}

\end_inset

this is a pretty straightforward proof, if we can use transitivity.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
This will be really cool stuff, if it actually works...
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
