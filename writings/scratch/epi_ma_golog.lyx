#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
Cooperative Execution of MIndiGolog Programs
\end_layout

\begin_layout Author
Ryan F.
 Kelly and Adrian R.
 Pearce
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
TODO: pinch stuff from the MIndiGolog paper to motivate this research.
\end_layout

\begin_layout Section
Preliminaries
\end_layout

\begin_layout Subsection
Knowledge
\end_layout

\begin_layout Standard
We adopt the formalism of 
\begin_inset LatexCommand \cite{kelly07sc_know_obs}

\end_inset

 for modelling and reasoning about knowledge in the multi-agent situation
 calculus with partial observability of actions.
\end_layout

\begin_layout Subsection
\begin_inset Formula $Trans$
\end_inset

 and 
\begin_inset Formula $Step$
\end_inset


\end_layout

\begin_layout Standard
The semantics of IndiGolog is traditionally given in terms of a predicate
 
\begin_inset Formula $Trans(\delta,s,\delta',s')$
\end_inset

 which indicates possible transitions of the program 
\begin_inset Formula $\delta$
\end_inset

 in situation 
\begin_inset Formula $s$
\end_inset

.
 The situations 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $s'$
\end_inset

 can be related in one of two ways: either 
\begin_inset Formula $s'=s$
\end_inset

, or 
\begin_inset Formula $\exists c,t\, s'=do(c,t,s)$
\end_inset

.
 Thus, 
\begin_inset Formula $Trans$
\end_inset

 cannot be used directly to determine the next action to take.
\end_layout

\begin_layout Standard
For clarity, we define a predicate 
\begin_inset Formula $Step(\delta,s,\delta',s')$
\end_inset

 that behaves like 
\begin_inset Formula $Trans,$
\end_inset

 but guarantees that 
\begin_inset Formula $\exists c,t\, s'=do(c,t,s)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Step(\delta,s,\delta',s')\equiv\exists c,t\, s'=do(c,t,s)\wedge Trans*(\delta,s,\delta',s')\]

\end_inset


\end_layout

\begin_layout Standard
TODO: figure out a better SOL axiom for 
\begin_inset Formula $Step$
\end_inset

, rather than using 
\begin_inset Formula $Trans*$
\end_inset


\end_layout

\begin_layout Subsection
The 
\begin_inset Formula $Task$
\end_inset

 fluent
\end_layout

\begin_layout Standard
Given that agents may be unable to observe all actions that have taken place,
 they may consider the program to be in various stages of completion.
 Since an agent's knowledge is represented in terms of possible situations,
 it is thus necessary to somehow embed the program being executed into the
 situations themselves.
 The fluent 
\begin_inset Formula $Task(\delta,s)$
\end_inset

 is defined for this purpose, which should be read as asserting that 
\begin_inset Quotes eld
\end_inset

program 
\begin_inset Formula $\delta$
\end_inset

 remains to be executed in situation 
\begin_inset Formula $s$
\end_inset

.
\begin_inset Quotes erd
\end_inset

 The successor state axiom for this fluent can be formulated using 
\begin_inset Formula $Step$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Task(\delta,do(c,t,s))\equiv\exists\delta'\, Task(\delta',s)\wedge Step(\delta',s,\delta,do(c,t,s))\]

\end_inset


\end_layout

\begin_layout Standard
The initial program 
\begin_inset Formula $\delta_{0}$
\end_inset

 to be carried out by the agents can then be specified by asserting that
 
\begin_inset Formula $Task(\delta_{0},S_{0})$
\end_inset

.
 It's worth noting that this fluent need not indicate a unique value of
 
\begin_inset Formula $\delta$
\end_inset

 for any particular situation.
 For situations that cannot be reached during the execution of 
\begin_inset Formula $\delta_{0}$
\end_inset

, there can be no program remaining to execute and 
\begin_inset Formula $Task$
\end_inset

 will not hold for any 
\begin_inset Formula $\delta$
\end_inset

.
 For programs that can execute along several branches with the same action
 (such as 
\begin_inset Formula $a;b\,|\, a;c$
\end_inset

) it will be true for several programs, any of which could be used to further
 the execution.
\end_layout

\begin_layout Standard
TODO: since
\begin_inset Formula $Step$
\end_inset

 is second-order, this is emphatically 
\series bold
not
\series default
 a valid successor state axiom.
 Come up with something that is, or a passable workaround.
\end_layout

\begin_layout Section
Coordination
\end_layout

\begin_layout Standard
Premise: when all agents have complete knowledge, no communication should
 be necessary.
 This has been done successfully by 
\begin_inset LatexCommand \cite{Ferrein2005readylog}

\end_inset

 using an ordering over situations.
\end_layout

\begin_layout Subsection
Coordination Order
\end_layout

\begin_layout Standard
To assist in coordination between the agents, they share a strict total
 order 
\begin_inset Formula $\prec$
\end_inset

 over concurrent action terms.
 Intuitively, the agents will consider 
\begin_inset Formula $c\prec c'$
\end_inset

 to mean that actions 
\begin_inset Formula $c'$
\end_inset

 are "better
\begin_inset Quotes erd
\end_inset

 than actions 
\begin_inset Formula $c$
\end_inset

, and will choose the next step of the program to be the best possible set
 of actions.
 In practise the ordering may be arbitrary, or it may indeed reflect some
 judgement on the utility of the actions involved.
 Its only purpose here is to reduce the communication required in coordinating
 actions.
 It is assumed to be static and common knowledge amongst all agents in the
 team.
\end_layout

\begin_layout Standard
This ordering is analogous to the execution strategy of IndiGolog for a
 single agent.
 In any particular situation the agent may be faced with several potential
 actions, but the one that it will actually chose is determined 
\emph on
a priori
\emph default
 by the execution order of the underlying prolog engine.
 This can be viewed as an implicit ordering over the possible situation
 terms.
 We choose to take an ordering over actions rather than situations to make
 the chose independent of the current situation, which will in general not
 be known by the agents.
\end_layout

\begin_layout Subsection
Communication
\end_layout

\begin_layout Standard
TODO: discuss allowing the agents to communicate without needing to specify
 this explicitly in the program.
\end_layout

\begin_layout Subsection
When to perform an action
\end_layout

\begin_layout Standard
When complete knowledge is available to all agents, the coordination order
 suffices for a coordination strategy - the agents simply determine the
 best legal next step and perform it.
 With the introduction of incomplete knowledge, coordinated action becomes
 more difficult.
 Agents may only perform a joint action if it is common knowledge amongst
 the group that the action is to be performed.
 A simplistic approach to coordination would be for the agents, at each
 step, to perform communication and/or sensing actions until they have achieved
 common knowledge of the best legal step, then perform it.
\end_layout

\begin_layout Standard
This approach is inefficient because it maye require large amounts of communicat
ion before an actual step can be made - in some cases it may not even be
 possible to obtain common knowledge of the best legal step.
 We should allow agents to perform actions as soon as they know that it
 is safe to do so.
\end_layout

\begin_layout Standard
What do we mean by safe? Intuitively, it's safe for an agent to perform
 some actions 
\begin_inset Formula $c$
\end_inset

 if they are a legal step of the program, and no matter what other actions
 
\begin_inset Formula $c'$
\end_inset

 are performed by other agents, the combination of these actions is also
 safe.
 Of course to make this work, we must assume that other agents will only
 perform actions that are safe.
\end_layout

\begin_layout Standard
Clearly we are after a predicate 
\begin_inset Formula $SafeToDo$
\end_inset

 that satisfies the following:
\begin_inset Formula \begin{multline*}
SafeToDo(c,s)\equiv Legal(c,s)\\
\wedge\forall c'\,.\, SafeToDo(c',s)\rightarrow SafeToDo(c\cup c',s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Any actions that are known to be safe can be performed straight away, and
 will be guaranteed to form a legal step of the program no matter what any
 other agents do.
\end_layout

\begin_layout Standard
This is a useful property of the 
\begin_inset Formula $SafeToDo$
\end_inset

 predicate, but it does not help define which sets of actions are actually
 safe.
 Indeed, one could simply declare that no actions are safe and this formula
 would be satisfied.
 We need to combine this idea with the coordination ordering approach.
\end_layout

\begin_layout Standard
To begin, the best legal step should be considered safe as it is the preferred
 next step in the program.
 We then consider other action sets according to the following rule: they
 are safe to do if they are legal by themselves, and are safe in combination
 with any 
\emph on
better 
\emph default
action sets that are also safe to do.\SpecialChar \@.

\begin_inset Formula \[
Legal(c,s)\wedge\neg\exists c'\,.\, c\prec c'\wedge Legal(c',s)\,\,\rightarrow\,\, SafeToDo(c,s)\]

\end_inset


\begin_inset Formula \begin{multline*}
SafeToDo(c,s)\equiv Legal(c,s)\\
\wedge\forall c'\,.\, c\prec c'\wedge SafeToDo(c',s)\rightarrow SafeToDo(c\cup c',s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
TODO: think about the consequences of this for 
\begin_inset Formula $\prec$
\end_inset

 - e.g.
 this only behaves well if 
\begin_inset Formula $c\preceq c\cup c'$
\end_inset

 always.
\end_layout

\begin_layout Standard
In the face of incomplete knowledge, a set of actions 
\begin_inset Formula $c$
\end_inset

 can be safely performed if its safety is common knowledge amongst the agents
 involved in the actions:
\begin_inset Formula \[
\mathbf{CKnow}(agents(c),SafeToDo(c),s)\]

\end_inset


\end_layout

\begin_layout Standard
The agents should then perform 
\emph on
all
\emph default
 sets of actions whose safety is common knowledge amongst the agents participati
ng in them:
\begin_inset Formula \begin{multline*}
InNextStep(c,s)\equiv\mathbf{CKnow}(agents(c),SafeToDo(c),s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
All the agents need to follow this rule, so that
\end_layout

\begin_layout Standard
Note that (assuming we can regress it) 
\begin_inset Formula $\mathbf{CKnow}$
\end_inset

 can be determined by all agents involved, since
\begin_inset Formula \[
\mathbf{CKnow}_{as}(\phi,s)\rightarrow\forall a\in as\,.\,\mathbf{Knows}(a,\mathbf{CKnow}_{as}(\phi),s)\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
