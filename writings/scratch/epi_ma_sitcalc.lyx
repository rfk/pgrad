#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Knowledge in the Multi-Agent Situation Calculus with Partial Observability
\layout Author

Ryan Kelly
\layout Abstract

In this paper we extend the account of knowledge in the situation calculus
 to handle rich multi-agent domains with partial observability of actions.
 Models of mult-agent domains in the situation calculus typically assume
 that all agents are aware of all actions that have been performed, and
 thus have a complete history of the world.
 Clearly this assumption does not always hold in real-world systems.
 By explicitly axiomatising the conditions under which actions are observable,
 we develop a new account of knowledge that is free of this assumption and
 can thus model a wider variety of multi-agent domains.
 We also develop a general account of communication actions as sensing actions,
 so that adding new communication actions does not require modifying the
 axiomatisation of knowledge.
 This is accomplished in a situation calculus variant that includes several
 extensions, such as concurrent actions and explicit time.
\layout Section

Introduction
\layout Standard

The situation calculus 
\begin_inset LatexCommand \cite{McCHay69sitcalc}

\end_inset 

 is a popular formalism for representing dynamic worlds.
 Since its inception, many extensions have been proposed to enrich its ontology
 with concepts such as knowledge 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset 

, time 
\begin_inset LatexCommand \cite{pinto94temporal}

\end_inset 

, natural and concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset 

, and complex actions based on the GOLOG family of languages 
\begin_inset LatexCommand \cite{levesque97golog,giacomo00congolog}

\end_inset 

.
 These extensions can be combined to provide a rich formalism for modelling
 multi-agent systems, such as the Cognitive Agent Specification Language
 (CASL) 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset 

 and ReadyLog 
\begin_inset LatexCommand \cite{Ferrein2005readylog}

\end_inset 

.
\layout Standard

A common assumption among such work is that agents are always aware of which
 actions have been performed in the world.
 Indeed, the very notion of 'situation' is formalised as a history of actions.
 While agents may be unsure about precisely what situation the world started
 out it, they are never unsure as to precisely what situation they are in
 relative to it.
 When dealing with knowledge in a multi-agent context, this assumption does
 not necessarily hold - it is quite conceivable that one agent could perform
 an action without another agent being aware of it.
 This paper provides an account of knowledge in the multi-agent situation
 calculus that lifts this assumption and is thus suitable for partially
 observable domains.
\layout Standard

Multi-agent systems almost invariably require communication between agents,
 which is typically represented by explicit communication actions.
 Such actions are intricately connected with the knowledge states of the
 agents involved, and existing accounts of knowledge such as 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset 

 include them explicitly in the dynamics of knowledge change.
 However, it should not be necessary to alter the fundamental axioms of
 the formalism to add or modify communication actions.
 We propose a general account of communication actions as sensing actions
 to achieve this seperation.
\layout Section

The Situation Calculus for Multi-Agent Domains
\layout Standard

In this section, we introduce the situation calculus enriched with a number
 of extensions that are useful for modelling multi-agent domains.
 It is a combination of the following:
\layout Itemize

The basic situation calculus, as described in 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset 


\layout Itemize

An explicit temporal component similar to that of 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset 

, but attached to situations rather than actions
\begin_inset Foot
collapsed true

\layout Standard

This eliminates some technical complexities such as the 
\begin_inset Formula $coherent$
\end_inset 

 predicate of 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset 

 and the action-time pairs of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset 

, at the expense of more verbose predicate signatures.
\end_inset 


\layout Itemize

Concurrent actions and natural actions, as developed in 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset 


\layout Itemize

Knowledge and sensing, as developed in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset 

 and expanded in 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset 


\layout Itemize

Multiple agents and communication, as used in CASL 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset 


\layout Standard

These components are largely independent, and any can be removed from the
 formulation in a straight-forward manner.
 Only an overview is provided here, for details see the individual works.
\layout Subsection

Preliminaries
\layout Standard

The situation calculus is a many-sorted first-order logic language for describin
g dynamic worlds.
 Its principle components are described in the following paragraphs.
\newline 

\layout Standard


\noun on 
Agent
\noun default 
 terms (variables 
\begin_inset Formula $agt$
\end_inset 

, 
\begin_inset Formula $agt_{i}$
\end_inset 

) represent the agents operating in the world.
 We assume a fixed, finite number of agents.
 
\layout Standard


\noun on 
Action
\noun default 
 terms (variables 
\begin_inset Formula $a$
\end_inset 

, 
\begin_inset Formula $a'$
\end_inset 

, 
\begin_inset Formula $a_{i}$
\end_inset 

) represent individual events that can cause the state of the world to change.
 They are typically functions that take an agent as their first argument,
 e.g.
 
\begin_inset Formula $pickup(Harriet,Block1)$
\end_inset 

 represents agent 
\begin_inset Formula $Harriet$
\end_inset 

 picking up the block 
\begin_inset Formula $Block1$
\end_inset 

.
 Actions may also occur outside the control of any agent, for example a
 block hitting the floor when dropped: 
\begin_inset Formula $hitFloor(Block2)$
\end_inset 

.
 Actions are assumed to be instantaneous.
\layout Standard


\noun on 
Concurrent
\noun default 
 terms (variables 
\begin_inset Formula $c$
\end_inset 

, 
\begin_inset Formula $c'$
\end_inset 

, 
\begin_inset Formula $c_{i}$
\end_inset 

) are sets of actions that occur at the same instant.
 It is assumed that an appropriate axiomatisation of the behavior of sets
 is provided.
\layout Standard


\noun on 
Time 
\noun default 
terms (variables 
\begin_inset Formula $t$
\end_inset 

, 
\begin_inset Formula $t'$
\end_inset 

, 
\begin_inset Formula $t_{i}$
\end_inset 

) represent instants of time.
 No commitment is made to a particular way of representing time, other than
 that it behave arithmetically and have an appropriate axiomatisation.
 Reals or integers are typically used.
\layout Standard


\noun on 
Situation 
\noun default 
terms (variables 
\begin_inset Formula $s$
\end_inset 

, 
\begin_inset Formula $s'$
\end_inset 

) can be thought of as representing the 
\begin_inset Quotes eld
\end_inset 

state of the world
\begin_inset Quotes erd
\end_inset 

.
 They are in fact histories of the actions that have occured in the world.
 The initial situation is represented by 
\begin_inset Formula $S_{0}$
\end_inset 

, and further situations are built up using the function 
\begin_inset Formula $do\,:\, Action\times Time\times Situation\rightarrow Situation$
\end_inset 

.
 For example, 
\begin_inset Formula $do(\{ pickup(Harriet,Block1)\},T,S)$
\end_inset 

 indicates the situation resulting from 
\begin_inset Formula $Harriet$
\end_inset 

 picking up 
\begin_inset Formula $Block1$
\end_inset 

 at time 
\begin_inset Formula $T$
\end_inset 

 in situation 
\begin_inset Formula $S$
\end_inset 

.
\layout Standard


\noun on 
Fluent 
\noun default 
terms (variables 
\begin_inset Formula $f$
\end_inset 

, 
\begin_inset Formula $f'$
\end_inset 

) are predicates or functions that represent properties of the world.
 The take as their last argument a situation term.
 For example, 
\begin_inset Formula $holding(Harriet,Block1,S)$
\end_inset 

 is true when 
\begin_inset Formula $Harriet$
\end_inset 

 is holding 
\begin_inset Formula $Block1$
\end_inset 

 in the situation 
\begin_inset Formula $S$
\end_inset 

.
\layout Standard


\noun on 
Object 
\noun default 
terms (variables 
\begin_inset Formula $obj$
\end_inset 

, 
\begin_inset Formula $obj_{i}$
\end_inset 

) represent any other objects in the domain.
\layout Subsection

Useful Functions
\layout Standard

The following functions are introduced to the situation calculus to make
 it easier to write complex expressions.
\layout Standard


\begin_inset Formula $start(s)$
\end_inset 

 gives the starting time of a situation:
\layout Standard


\begin_inset Formula \[
start(do(c,t,s))=t\]

\end_inset 


\layout Standard


\begin_inset Formula $agent(a)$
\end_inset 

 gives the agent that performs an action, and must be defined for each action
 in the domain.
 For example:
\layout Standard


\begin_inset Formula \[
agent(pickup(agt,obj))=agt\]

\end_inset 


\layout Subsection

Action Precondition Axioms
\layout Standard

There is a distinguished fluent predicate 
\begin_inset Formula $Poss(a,t,s)$
\end_inset 

 that indicates when it is possible to perform an action in a given situation.
 For example, it is only possible for an agent to drop an object if they
 are holding it
\begin_inset Foot
collapsed true

\layout Standard


\size small 
We follow the convention that lowercase terms are implicitly universally
 quantified.
 
\end_inset 

:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
Poss(drop(agt,obj),t,s)\\
\leftrightarrow holding(agt,obj,s)\end{array}\]

\end_inset 


\layout Standard

For concurrent actions, an arbitrary combination of actions 
\begin_inset Formula $\{ a_{1},a_{2}\}$
\end_inset 

 is not guaranteed to be possible.
 While the actions 
\begin_inset Formula $moveTo(Chair)$
\end_inset 

 and 
\begin_inset Formula $moveTo(Table)$
\end_inset 

 may individually be possible, performing them concurrently clearly is not.
 This is known as the precondition interaction problem 
\begin_inset LatexCommand \cite{pinto94temporal}

\end_inset 

 and is an area of ongoing research.
\layout Standard

This is addressed by introducing a predicate 
\begin_inset Formula $Conflicts(c,t,s)$
\end_inset 

 which is true when the actions in 
\begin_inset Formula $c$
\end_inset 

 are in conflict and cannot be performed together.
 The following possibility axiom is then introduced for concurrent actions:
\layout Standard


\begin_inset Formula \[
Poss(c,t,s)\leftrightarrow\forall a\left[a\in c\rightarrow Poss(a,t,s)\right]\wedge\neg Conflicts(c,t,s)\]

\end_inset 


\layout Subsection

Successor State Axioms
\layout Standard

The truth values of fluents are specified by defining what is true of the
 initial situation, and collecting the effects of various actions into
\emph on 
 successor state axioms
\emph default 
.
 These state that a fluent is true if something caused it to be true, or
 it was previously true and nothing caused it to be false.
 Successor state axioms provide a general solution to the frame problem,
 developed fully in 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset 

.
 They have the general form:
\layout Standard


\begin_inset Formula \[
F(\overrightarrow{x},do(a,t,s))\leftrightarrow\Gamma^{+}(\overrightarrow{x},a,t,s)\,\vee\, F(\overrightarrow{x},s)\wedge\neg\Gamma^{-}(\overrightarrow{x},a,t,s)\]

\end_inset 


\layout Standard

Here 
\begin_inset Formula $F$
\end_inset 

 is a fluent with non-situation arguments 
\begin_inset Formula $\overrightarrow{x}$
\end_inset 

, 
\begin_inset Formula $\Gamma^{+}$
\end_inset 

 is a formula giving the conditions under which 
\begin_inset Formula $F$
\end_inset 

 will become true, and 
\begin_inset Formula $\Gamma^{-}$
\end_inset 

 a formula giving the conditions under which 
\begin_inset Formula $f$
\end_inset 

 will become false.
\layout Standard

TODO: give an example?
\layout Subsection

Natural Actions
\layout Standard

Natural actions are a special class of exogenous actions, those actions
 which occur outside of any agent's control.
 They are classified according to the following requirement: natural actions
 must occur at their predicted times, provided no earlier actions prevent
 them from occurring.
 For example, a timer will ring at the time it was set for, unless it is
 cancelled.
 They are thus a tool allowing agents to predict the behavior of their environme
nt.
\layout Standard

Natural actions are indicated by truth of the predicate 
\begin_inset Formula $natural(a)$
\end_inset 

.
 As usual, the times at which natural actions may occur are specified by
 the 
\begin_inset Formula $Poss$
\end_inset 

 predicate.
 For example, suppose that the fluent 
\begin_inset Formula $timer\_ set(ID,m,s)$
\end_inset 

 represents the fact that a particular timer is set to ring in 
\begin_inset Formula $m$
\end_inset 

 minutes in situation 
\begin_inset Formula $S$
\end_inset 

.
 The possibility predicate for the 
\begin_inset Formula $ring\_ timer(ID)$
\end_inset 

 action would be:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
Poss(ring\_ timer(ID),t,s)\leftrightarrow\\
\exists m.\left[timer\_ set(ID,m,s)\wedge t=start(s)+m\right]\end{array}\]

\end_inset 


\layout Standard

An important concept when dealing with natural actions it the least natural
 time point (LNTP) of a situation.
 This is defined as the earliest time at which a natural action may occur
 in a situation:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
lntp(s,t)\leftrightarrow\exists a\left[natural(a)\wedge Poss(a,t,s)\right]\wedge\\
\forall a,t_{a}\left[natural(a)\wedge Poss(a,t_{a},s)\rightarrow t\leq t_{a}\right]\end{array}\]

\end_inset 


\layout Standard

Note that the LNTP need not exist for a given situation.
 This can happen both when no natural actions are possible in a situation,
 or when a natural action may occur at any time in a situation (and there
 is thus no earliest time).
 It is assumed that the domain axiomatisation is designed to avoid such
 pathological cases, and the absence of an LNTP implies that no natural
 actions are possible.
\layout Standard

To enforce the requirement that natural actions must occur when possible,
 a predicate 
\begin_inset Formula $legal(s)$
\end_inset 

 is introduced which is true only for situations which respect this requirement
 (assuming no precondition interaction among natural actions):
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
legal(S_{0})\leftrightarrow True\\
\\legal(do(c,t,s))\leftrightarrow\\
legal(s)\wedge Poss(c,t,s)\wedge start(s)\leq t\wedge\\
(\forall a,t_{a}).natural(a)\wedge Poss(a,t_{a},s)\rightarrow\\
\left[a\in c\vee t<t_{a}\right]\end{array}\]

\end_inset 


\layout Subsection

Communication
\layout Standard

Inter-agent communication is typically modelled by special communication
 actions.
 Representative of this approach are the 
\begin_inset Formula $informWhether(agt_{1},agt_{2},\phi)$
\end_inset 

 and 
\begin_inset Formula $informRef(agt_{1},agt_{2},\theta)$
\end_inset 

 of CASL, whereby 
\begin_inset Formula $agt_{1}$
\end_inset 

 informs 
\begin_inset Formula $agt_{2}$
\end_inset 

 about the truth of a formula or the referrent of a function respectively.
\layout Subsection

Knowledge and Sensing
\layout Standard

The semantics of knowledge in the situation calculus 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset 

 are based on the popular 
\begin_inset Quotes eld
\end_inset 

possible worlds
\begin_inset Quotes erd
\end_inset 

 model.
 A knowledge fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset 

 is used to indicate that 
\begin_inset Quotes eld
\end_inset 

in situation 
\begin_inset Formula $s$
\end_inset 

, the agent 
\begin_inset Formula $agt$
\end_inset 

 considers the alternate situation 
\begin_inset Formula $s'$
\end_inset 

 to be possible
\begin_inset Quotes erd
\end_inset 

.
 A knowledge operator 
\begin_inset Formula $\mathbf{Knows}$
\end_inset 

is then introduced as a macro:
\layout Standard


\begin_inset Formula \[
\mathbf{Knows}(\phi(now),s)=^{def}\forall s'\, K(s',s)\rightarrow\phi[now/s']\]

\end_inset 


\layout Standard

TODO: other macros such as KWhether, KRef, etc...
\layout Standard

To allow actions to return sensing information, the sensing result function
 
\begin_inset Formula $SR(a,s)$
\end_inset 

 is introduced, which gives the value returned by the action 
\begin_inset Formula $a$
\end_inset 

 when exectued in a situation 
\begin_inset Formula $s$
\end_inset 

.
 This is accompanied by sensing results axioms to determine the values that
 would be returned, of the form:
\layout Standard


\begin_inset Formula \[
SR(a(\overrightarrow{x}),t,s)=r\equiv\phi_{a}(\overrightarrow{x},r,t,s)\]

\end_inset 


\layout Standard

For example, consider the action 
\begin_inset Formula $sense_{F}$
\end_inset 

 which senses whether fluent 
\begin_inset Formula $F$
\end_inset 

 is true or false.
 Its sensing result axiom would be given by:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
SR(sense_{F},t,s)=r\equiv\\
(r="YES"\wedge Q(s))\vee(r="NO"\wedge\neg Q(s))\end{array}\]

\end_inset 


\layout Standard

For actions that dont sense information, the value of 
\begin_inset Formula $SR$
\end_inset 

 should be set to some arbitrary constant such as 
\begin_inset Formula $"OK"$
\end_inset 

.
\layout Standard

Combining the semantics of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset 

 and 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset 

, a successor state axiom for the knowledge fluent can be written:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,t,s))\equiv\\
\exists s',t'\,.\, s''=do(c,t',s')\,\wedge K(s',s)\wedge Poss(c,t',s')\\
\wedge\, start(s'')=start(s')+t-start(s)\\
\wedge\,\forall a\left[a\in c\wedge agent(a)=agt\rightarrow SR(a,t,s)=SR(a,t,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset 


\layout Standard

TODO: explain the 
\begin_inset Formula $\phi[s]$
\end_inset 

 notation.
\layout Standard

In words, this states that 
\begin_inset Formula $s''$
\end_inset 

 is considered a possible alternative to 
\begin_inset Formula $do(c,t,s)$
\end_inset 

 when 
\begin_inset Formula $s''$
\end_inset 

 is the result of doing the concurrent actions 
\begin_inset Formula $c$
\end_inset 

 at the same relative time 
\begin_inset Formula $t-start(s)$
\end_inset 

 in a situation 
\begin_inset Formula $s'$
\end_inset 

 that is a possible alternative to 
\begin_inset Formula $s$
\end_inset 

.
 The situation must furthermore be possible, the sensing results must agree
 for all actions in 
\begin_inset Formula $c$
\end_inset 

 carried out by that agent and the situation must be consistent with what
 it has been informed by others.
\layout Standard

Improving this successor state axiom for 
\begin_inset Formula $K$
\end_inset 

 is the main aim of this paper.
\layout Section

New Semantics for Knowledge
\layout Subsection

Observability of Actions
\layout Standard

Work in the situation calculus generally assumes, even in the multi-agent
 case, that agents are always aware of the actions being performed.
 For a single agent this is trivially the case, as it is the one performing
 the actions.
 However, this assumption is not appropriate for multi-agent systems.
\layout Standard

To deal with this extra complexity, a predicate 
\begin_inset Formula $CanObs(agt,a,t,s)$
\end_inset 

 is introduced that indicates whether agent 
\begin_inset Formula $agt$
\end_inset 

 would be able to observe action 
\begin_inset Formula $a$
\end_inset 

 being performed at time 
\begin_inset Formula $t$
\end_inset 

 in situation 
\begin_inset Formula $s$
\end_inset 

.
 The axiomatisation of this predicate, like that of 
\begin_inset Formula $Poss$
\end_inset 

, is the responsibility of the domain modeller.
\layout Subsection

Communication as Sensing
\layout Standard

As observed previously, communication actions are typically built into the
 successor state axiom of the knowledge fluent.
 In our opinion, this unnecessarily complicates the semantics of knowledge
 and makes it more difficult to introduce additional communication actions.
\layout Standard

The existing account of sensing also disallows the possibility that other
 agents might 
\begin_inset Quotes eld
\end_inset 

overhear
\begin_inset Quotes erd
\end_inset 

 the results of a sensing operation.
 For example, consider an agent waiting for a train who activates a speaker
 to acquire information about when it will arrive.
 This information will be available to other agents within earshot, even
 though they did not initiate the sensing action.
\layout Standard

We propose an additional predicate 
\begin_inset Formula $CanSense(agt,a,t,s)$
\end_inset 

 that indicates that the sensing results of action 
\begin_inset Formula $a$
\end_inset 

 at time 
\begin_inset Formula $t$
\end_inset 

 in situation 
\begin_inset Formula $s$
\end_inset 

 would be available to the agent 
\begin_inset Formula $agt$
\end_inset 

.
 Consider formulating the action 
\begin_inset Formula $informWhether$
\end_inset 

 in this framework:
\layout Standard


\begin_inset Formula \[
Poss(informWhether(agt_{1},agt_{2},\phi),t,s)\equiv\mathbf{KWhether}(agt_{1},\phi,s)\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\begin{array}{c}
SR(informWhether(agt_{2},agt_{3},\phi),t,s)=r\equiv\\
(r="YES"\wedge\phi[s])\,\vee\,(r="NO"\wedge\neg\phi[s])\end{array}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\begin{array}{c}
CanObs(agt_{1},informWhether(agt_{2},agt_{3},\phi),t,s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
\begin{array}{c}
CanSense(agt_{1},informWhether(agt_{2},agt_{3},\phi),t,s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset 


\layout Standard

As we shall see, this account allows the communication to be treated as
 a standard sensing action while modifying the knowledge of the agents appropria
tely.
\layout Subsection

Successor State Axiom for 
\begin_inset Formula $K$
\end_inset 


\layout Standard

What, then, are the considerations required for the successor state axiom
 of 
\begin_inset Formula $K$
\end_inset 

 for any particular agent? Generalising the considerations of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset 

, 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset 

 and 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset 

, situations considered possible must:
\layout Itemize

be successors to situations previously considered possible by the agent
\layout Itemize

be possible according to 
\begin_inset Formula $Poss$
\end_inset 


\layout Itemize

agree on relative elapsed time since the start of the previous situation
\layout Itemize

agree on all actions that the agent observed to occur
\layout Itemize

agree with all sensing results that the agent observed
\layout Standard

We introduce two more considerations:
\layout Itemize

be legal according to 
\begin_inset Formula $legal(s)$
\end_inset 

, which implies they must be possible
\layout Itemize

admit the possibility of a sequence of actions that were totally unobservable
 by the agent
\layout Standard

By formalising each of the above considerations, the following successor
 state axiom is obtained:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,t,s))\equiv\\
\exists s',c',t'\,.\, s''=do(c',t',s')\wedge legal(s'')\wedge\\
\\\left(\, K(agt,s',s)\right.\\
\wedge\, start(s'')=start(s')+t-start(s)\\
\wedge\,\forall a\left[a\in c\wedge CanObs(agt,a,t,s)\rightarrow a\in c'\right]\\
\wedge\,\forall a\left[a\in c'\wedge CanObs(agt,a,t,s)\rightarrow a\in c\right]\\
\wedge\,\forall a\left[a\in c\wedge CanObs(agt,a,t,s)\wedge CanSense(agt,a,t,s)\right.\\
\left.\rightarrow SR(a,t,s)=SR(a,t',s')\right]\\
\vee\\
K(agt,s',do(c,t,s))\\
\left.\wedge\,\forall a\left[a\in c'\rightarrow\neg Obs(agt,a,s')\right]\,\right)\end{array}\]

\end_inset 


\layout Section

Implications for Reasoning
\layout Standard

As noted above, the fact that an agent may be unable to observe some actions
 taking place means that they must consider possible any situation brought
 about by such actions.This has deep implications for the agent's state of
 knowledge.
 If there are many actions that it cannot observe, it must consider possible
 a large number of situations and so may have difficulting arriving at knowledge
 of any fluent.
\layout Standard

In particular, this successor state axiom is unusual in that the term 
\begin_inset Formula $do(c,t,s)$
\end_inset 

 appears on the right-hand side.
 TODO: understand regression better, then write about it here
\layout Subsection

Possible Remedies
\layout Standard

For domains with a large amount of unobservability, it may be necessary
 to take additional steps to allow the agents to accumulate knowledge.
 If time is discrete, this can be achieved by making all agents aware of
 the passage of time.
 Introduce a natural action 
\begin_inset Formula $tick$
\end_inset 

 that occurs to indicate the passage from one time instant to the next,
 and which all agents can observe:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
natural(tick)\equiv True\\
Poss(tick,t,s)\equiv t=start(s)+1\\
CanObs(agt,tick,t,s)\equiv True\\
CanSense(agt,tick,t,s)\equiv True\end{array}\]

\end_inset 


\layout Standard

Since agents know all situations to be legal, and 
\begin_inset Formula $tick$
\end_inset 

 actions can always be observed, all situations considered possible by an
 agent must agree on how many 
\begin_inset Formula $tick$
\end_inset 

s have occured.
 This prevents long sequences of totally unobservable actions from being
 considered possible.
\layout Section

Properties of Knowledge
\layout Standard

TODO: use the properties developed in other accounts, to show that this
 still works as required.
 Such as:
\layout Itemize

Memory
\layout Itemize

Persistance of Ignorance
\layout Itemize

Preservation of reflexivity, transitivity, symmetry etc
\layout Itemize

Knowledge incorporation (including for communication actions)
\layout Itemize

inability to know things that might change without it noticing
\layout Section

Related Work
\layout Section

Conclusions
\layout Section

TODO
\layout Itemize

formalise the idea of 
\begin_inset Quotes eld
\end_inset 

theory of action
\begin_inset Quotes erd
\end_inset 

 and entailment etc as done in KiA, generally be more rigourous
\layout Itemize

How does sensing interact with concurrency, if one action undoes a precondition
 for sensing of another, e.g.
 {senseQ,turnOffLight} ?
\layout Itemize

Similarly, what if we cant observe certain pairs of actions together? It's
 complicated...
\layout Itemize

Try to formulate some regression clauses, although I have my doubts because
 of the use of a situation on both sides of its SSA
\layout Itemize

Talk about the requirements for knowledge - e.g.
 symmetry, reflexivity - that we require for this to be reasonable.
\layout Itemize

Work in Init(s) as a substitute for S0
\layout Standard


\begin_inset LatexCommand \BibTeX[plain]{/storage/uni/pgrad/library/references}

\end_inset 


\the_end
