#LyX 1.5.5 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Standard
Among the advantages offered by the situation calculus are: straightforward
 representations of rich domain features such as concurrent actions and
 continuous time; effective reasoning procedures based on regression; flexible
 task specification using familiar programming constructs; a mature formalism
 for epistemic reasoning; and a straightforward implementation by translation
 into a logic program.
 But as we will highlight throughout this chapter, the situation calculus
 also currently suffers several limitations that make it unsuitable for
 reasoning about asynchronous multi-agent domains.
 It is these limitations that are overcome in this thesis.
\end_layout

\begin_layout Standard
The most prominent application of the situation calculus has been the programmin
g language Golog 
\begin_inset LatexCommand citep
key "levesque97golog"

\end_inset

 and its descendants, which will be discussed in detail in section 
\begin_inset LatexCommand ref
reference "sec:Background:Golog"

\end_inset

.
 That the Situation Calculus and Golog are viable tools for specifying and
 implementing agent behaviour is highlighted by the many successful applications
 of the techniques in different planning tasks, including: open-world planning
 
\begin_inset LatexCommand citep
key "Finzi00open_world_sitcalc"

\end_inset

; planning with natural actions 
\begin_inset LatexCommand citep
key "pirri00planning_nat_acts"

\end_inset

; planning under uncertainty 
\begin_inset LatexCommand citep
key "baier03golog_planning"

\end_inset

; control and coordination in robotic soccer 
\begin_inset LatexCommand citep
key "Ferrein2005readylog"

\end_inset

; and specifying the behaviour of computer-controlled characters in video
 games 
\begin_inset LatexCommand citep
key "jacobs05unrealgolog"

\end_inset

.
\end_layout

\begin_layout Standard
In more theoretical settings, the situation calculus has enabled reasoning
 about multi-agent games 
\begin_inset LatexCommand citep
key "delgrande01sitcalc_cleudo"

\end_inset

 and automated verification of multi-agent system specifications 
\begin_inset LatexCommand citep
key "shapiro02casl,lesperance05ecasl"

\end_inset

.
 It has formed the basis for a standard process specification language in
 manufacturing 
\begin_inset LatexCommand citep
key "gruninger04psl"

\end_inset

 and has been applied to the automated composition of semantic web services
 
\begin_inset LatexCommand citep
key "mcilraith02golog_web_services"

\end_inset

.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
