#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Reasoning in Agent Programming Languages
\newline 
Initial Research Proposal
\layout Author

Ryan Kelly
\layout Standard

The field of Agent Programming aims to represent and develop software systems
 in terms of 
\begin_inset Quotes eld
\end_inset 

agents
\begin_inset Quotes erd
\end_inset 

 - autonomous software entities with properties such as beliefs, desires
 and intentions.
 This model of programming shows promise in a wide variety of fields, not
 least because it allows the programmer to think about the task at hand
 in terms of how they, an autonomous agent, would approach it.
\layout Standard

Agent programming has been approached on the one hand from a practical standpoin
t based on the procedural programming paradigm.
 This has resulted in languages such as JACK and Jade, which are based around
 procedural plans which are executed when certain conditions are met.
 These languages have the advantage of making programmers feel more 
\begin_inset Quotes eld
\end_inset 

at home
\begin_inset Quotes erd
\end_inset 

 due to their largely procedural approach, and allowing access to existing
 bodies of code in the host language (typically Java).
\layout Standard

There is also a strong theoretical and philosophical background concerning
 the notion of an 
\begin_inset Quotes eld
\end_inset 

agent
\begin_inset Quotes erd
\end_inset 

, which has spawned several systems of logic for reasoning about agent-based
 systems.
 These logics typically allow key concepts such as beliefs, desires and
 intentions to be represented and manipulated explicitly.
 This has been the basis for several agent programming languages such as
 ConGolog and 3APL, which take a declarative approach.
 A key advantage of such approaches is the capacity for formal reasoning
 about the properties of the system - the ability to prove statements such
 as 
\begin_inset Quotes eld
\end_inset 

x will not occur
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

y will eventually be the case
\begin_inset Quotes erd
\end_inset 

.
\layout Standard

I propose to investigate ways of making the advantages of both approaches
 available to programmers of agent-based systems.
 This will involve a review of the state-of-the-art in both procedural and
 declarative agent programming, and an investigation of agent programming
 languages in practical use to determine the specific advantages that each
 provides.
 The intention is then to develop a proof-of-concept language to combine
 the most useful of these advantages.
 A key aim is to allow programmers to easily reason about the properties
 of the systems they create, using a formal logic
\newline 

\layout Standard

The University of Melbourne Department of Computer Science and Software
 Engineering provides several advantages for work in this area.
 The department is home to a large body of experience in declarative programming
 languages, and is developing a new logic programming language called Mercury.
 Declarative agent systems are often based around a logic programming language
 and the novel features of Mercury may provide new capabilities for such
 systems.
 The department's Agentlab group has also developed systems for explicitly
 representing the ways in which groups of agents can coordinate their behavior.
 These advances may help facilitate reasoning not only about individual
 agent programs, but about systems of interacting agents.
\the_end
