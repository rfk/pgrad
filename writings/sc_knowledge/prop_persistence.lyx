#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble

\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Property Persistence in the Situation Calculus
\layout Author

Ryan Kelly
\layout Abstract

Universally quantifying over states in the situation calculus typically
 requires the use of a second-order induction axiom, which can be problematic
 for automated reasoning.
 Fortunately, special cases exist where the need for induction can be eliminated.
 We show that given a uniform formula expressing some property of a situtation,
 the persistence of that property - that is, whether the property holds
 in a given situation and all future situations - can be determined without
 employing the induction axiom.
\layout Section

Introduction
\layout Standard

Many useful reasoning tasks in the situation calculus require universally
 quantifying over situations.
 For example, when reasoning about action, it is useful to determine whether
 a given condition can ever possibly be satisfied in the world:
\layout Standard


\begin_inset Formula \[
\mathcal{D}\models\forall s\,\neg G(s)\]

\end_inset 


\layout Standard

When the situation calculus is enriched with knowledge, such reasoning becomes
 more and more important.
 Consider the case where an agent must is unable to observe certain actions
 occuring in the world.
 In order to know that some formula 
\begin_inset Formula $\phi$
\end_inset 

 holds, it must determine not only that it holds in the current situation
 
\begin_inset Formula $s$
\end_inset 

 but that it cannot become false in any successor situations that might
 arise without it knowing:
\layout Standard


\begin_inset Formula \[
\forall s''\, s\leq s''\rightarrow\phi[s'']\vee\exists a,s'\, s<do(a,s')\leq s''\wedge CanObs(a,s')\]

\end_inset 


\layout Standard

A note on notation: 
\begin_inset Formula $\phi$
\end_inset 

 here is a situation-suppressed formula, i.e.
 a formula uniform in a situation variable 
\begin_inset Formula $s$
\end_inset 

, in which all references to 
\begin_inset Formula $s$
\end_inset 

 have been suppressed.
 
\begin_inset Formula $\phi[s]$
\end_inset 

 indicates restoring the situation term to the fluents, and can be thought
 of as 
\begin_inset Quotes eld
\end_inset 

evaluating
\begin_inset Quotes erd
\end_inset 

 the formula 
\begin_inset Formula $\phi$
\end_inset 

 at situation 
\begin_inset Formula $s$
\end_inset 

.
 An example could be 
\begin_inset Formula $\phi=broken(x)$
\end_inset 

 and 
\begin_inset Formula $\phi[s]=broken(x,s)$
\end_inset 

.
 
\layout Standard

The canonical reference for such reasoning in the situation calculus is
 
\begin_inset LatexCommand \cite{Reiter93proving}

\end_inset 

, where a second-order induction axiom is given to allow this:
\layout Standard


\begin_inset Formula \[
\forall P\,\left[\right(P(S_{0})\wedge\forall s,a\, P(s)\rightarrow P(do(a,s))\left)\rightarrow\forall s\, P(s)\right]\]

\end_inset 


\layout Standard

While such an axiom makes manual verification of universal state properties
 possible, its second-order nature makes it problematic for automated reasoning.
 
\layout Standard

In this paper we are specifically interested in 
\emph on 
persistence
\emph default 
 of properties in a situation.
 That is, given that some formula 
\begin_inset Formula $\phi$
\end_inset 

 holds in a situation 
\begin_inset Formula $s$
\end_inset 

, does it continue to hold in all situations in the future of 
\begin_inset Formula $s$
\end_inset 

?
\layout Standard


\begin_inset Formula \[
\forall s'\, s\leq s'\rightarrow\phi[s']\]

\end_inset 


\layout Standard

For some applications, it may be desirable to limit the future situations
 to those containing a certain class of actions.
 Suppose the formula 
\begin_inset Formula $\alpha$
\end_inset 

 is true for precisely those actions to be considered, then the question
 of persistence becomes:
\layout Standard


\begin_inset Formula \[
\forall s''\, s\leq s''\rightarrow\phi[s'']\vee\exists a,s'\, s<do(a,s')\leq s''\wedge\alpha(a,s)\]

\end_inset 


\layout Standard

For agent-programming tasks, we would like to replace quantification over
 situations with a more tractable form of reasoning - specifically, evaluation
 of a uniform formula at a specific situation.
 That is, we would like some syntactic transformation 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset 

 of a property 
\begin_inset Formula $\phi$
\end_inset 

 and action conditions 
\begin_inset Formula $\alpha$
\end_inset 

 such that:
\layout Standard


\begin_inset Formula \[
\forall s'\, s\leq s'\rightarrow\phi(s')\vee\exists a\, occurs(a,s,s')\wedge\alpha(a)\,\equiv\,\mathcal{P}(\phi,\alpha)\]

\end_inset 


\layout Standard

We say that 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset 

 is the 
\emph on 
persistence condition
\emph default 
 of formula 
\begin_inset Formula $\phi$
\end_inset 

 with respect to the class of actions 
\begin_inset Formula $\alpha$
\end_inset 

.
 Such an operation is clearly in the spirit of the regression operator 
\begin_inset Formula $\mathcal{R}$
\end_inset 

 introduced by Reiter 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset 

, which allows reasoning about what holds in an arbitrary situation to be
 reduces to reasoning about the initial situation.
\layout Section

Overview
\layout Standard

Recall the single-step regression operator 
\begin_inset Formula $\mathcal{R}$
\end_inset 

:
\layout Standard


\begin_inset Formula \[
\phi[do(a,s)]\equiv\mathcal{R}(\phi[do(a,s)])\]

\end_inset 


\layout Standard

The important point is that 
\begin_inset Formula $\mathcal{R}(\phi[do(a,s)])$
\end_inset 

 is uniform in 
\begin_inset Formula $s$
\end_inset 

.
 Let 
\begin_inset Formula $\mathcal{P}^{1}(\phi)[s]$
\end_inset 

 be a formula uniform in 
\begin_inset Formula $s$
\end_inset 

 that is true precisely when 
\begin_inset Formula $\phi$
\end_inset 

 holds in 
\begin_inset Formula $s$
\end_inset 

 and all its immediate successors.
 We can define such a formula as follows:
\layout Standard


\begin_inset Formula \[
\mathcal{P}^{1}(\phi)[s]\isdef\phi[s]\wedge\forall a\,\mathcal{R}(\phi[do(a,s)])\]

\end_inset 


\layout Standard

Intuitively, if 
\begin_inset Formula $\mathcal{P}^{1}(\phi)$
\end_inset 

 holds in 
\begin_inset Formula $s$
\end_inset 

 and all its immediate sucecssors, then 
\begin_inset Formula $\phi$
\end_inset 

 will hold in 
\begin_inset Formula $s$
\end_inset 

 and all successors up to depth two:
\layout Standard


\begin_inset Formula \[
\mathcal{P}^{2}(\phi)[s]\isdef\mathcal{P}^{1}(\mathcal{P}^{1}(\phi))[s]\]

\end_inset 


\layout Standard

This generalises in a straightforward way to arbitrarily deep successors:
\layout Standard


\begin_inset Formula \[
\mathcal{P}^{n}(\phi)[s]\equiv\mathcal{P}^{1}(\mathcal{P}^{n-1}(\phi))[s]\]

\end_inset 


\layout Standard

It is clear that for any 
\begin_inset Formula $n$
\end_inset 

 and 
\begin_inset Formula $s$
\end_inset 

:
\layout Standard


\begin_inset Formula \[
\mathcal{P}^{n}(\phi)[s]\rightarrow\mathcal{P}^{n-1}(\phi)[s]\]

\end_inset 


\layout Standard

If it is possible to show that there is an 
\begin_inset Formula $n$
\end_inset 

 such that:
\layout Standard


\begin_inset Formula \[
\mathcal{P}^{n}(\phi)[s]\rightarrow\mathcal{P}^{n+1}(\phi)[s]\]

\end_inset 


\layout Standard

Then we have shown logical equivalence of all further applications of 
\begin_inset Formula $\mathcal{P}^{1}$
\end_inset 

:
\begin_inset Formula \[
\forall m\, n<m\rightarrow\mathcal{P}^{n}(\phi)[s]\equiv\mathcal{P}^{m}(\phi)[s]\]

\end_inset 


\layout Standard

This 
\begin_inset Formula $\mathcal{P}^{n}$
\end_inset 

 can thus be considered a fixed-point of 
\begin_inset Formula $\mathcal{P}^{1}$
\end_inset 

.
 We shall denote this fixed point by 
\begin_inset Formula $\mathcal{P}(\phi)$
\end_inset 

.
 It is then a simple inductive argument to show that:
\layout Standard


\begin_inset Formula \[
\forall s'\, s\leq s'\rightarrow\phi[s']\equiv\mathcal{P}(\phi)\]

\end_inset 


\layout Standard

The following questions then remain:
\layout Itemize

How can we guarantee that such a fixed-point exists?
\layout Itemize

How can we efficiently compute the fixed point for a given 
\begin_inset Formula $\phi$
\end_inset 


\layout Section

Formulation
\layout Subsection

Preliminaries
\layout Standard

TODO: basic description of situation calculus here
\layout Standard

An important definition: uniform formulae.
 TODO: look it up
\layout Standard

talk about situation suppression
\layout Subsection

Effect Axioms
\layout Standard

We assume that the theory of action is specified in terms of
\emph on 
 effect axioms
\emph default 
.
 For each action function 
\begin_inset Formula $\alpha(\overrightarrow{x})$
\end_inset 

 that could cause a fluent 
\begin_inset Formula $F(\overrightarrow{y})$
\end_inset 

 to become true, there is a positive effect axiom of the form:
\layout Standard


\begin_inset Formula \[
\forall\overrightarrow{x},\overrightarrow{y},s\,\pi_{\alpha}(\overrightarrow{x},s)\wedge\epsilon_{F,\alpha}^{+}(\overrightarrow{x},\overrightarrow{y},s)\rightarrow F(\overrightarrow{y},do(\alpha(\overrightarrow{x}),s))\]

\end_inset 


\layout Standard

The meta-formula 
\begin_inset Formula $\pi_{\alpha}$
\end_inset 

 gives the prerequisites that must be satisfied in order to carry out the
 action 
\begin_inset Formula $\alpha$
\end_inset 

 in the world, and 
\begin_inset Formula $\epsilon_{F,\alpha}$
\end_inset 

 gives the conditions under which action 
\begin_inset Formula $\alpha$
\end_inset 

 will cause fluent 
\begin_inset Formula $F$
\end_inset 

 to become true.
 Similarly, for each action that could cause a fluent to become false there
 is a negative effect axiom of the form:
\layout Standard


\begin_inset Formula \[
\forall\overrightarrow{x},\overrightarrow{y},s\,\pi_{\alpha}(\overrightarrow{x},s)\wedge\epsilon_{F,\alpha}^{-}(\overrightarrow{x},\overrightarrow{y},s)\rightarrow\neg F(\overrightarrow{y},do(\alpha(\overrightarrow{x}),s))\]

\end_inset 


\layout Standard

In his landmark paper 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset 

, Reiter showed how a solution to the frame problem can be compiled from
 a collection of such effect axioms, under the assumption that they specify
 
\emph on 
all
\emph default 
 the ways in which fluents can change value.
 By utilising the same assumption, we will show how the effect conditions
 
\begin_inset Formula $\pi$
\end_inset 

, 
\begin_inset Formula $\epsilon^{+}$
\end_inset 

 and 
\begin_inset Formula $\epsilon^{-}$
\end_inset 

 can be used in proving state properties.
\layout Standard

TODO: explicitly list the actions affecting a fluent? Useful for rewriting
\layout Subsection

Compound Fluents
\layout Standard

Any situation-suppressed formula can be though of as describing a compound
 property of the world - that is, a property whose truth depends on the
 truth of other properties of the world.
 In other words, we may think of a situation-suppressed formula 
\begin_inset Formula $\phi$
\end_inset 

 as a 
\emph on 
compound fluent
\emph default 
 that is true or false relative to a single situation variable 
\begin_inset Formula $s$
\end_inset 

.
 From this perspective, it should be possible to construct compound effect
 axioms for a given compound fluent.
\layout Standard

We define operators 
\begin_inset Formula $\mathcal{E}^{+}[\phi,\alpha]$
\end_inset 

 and 
\begin_inset Formula $\mathcal{E}^{-}[\phi,\alpha]$
\end_inset 

 that operate on compound fluents 
\begin_inset Formula $\phi$
\end_inset 

 to give their positive and negative effect axioms with respect to an action
 
\begin_inset Formula $\alpha$
\end_inset 

.
 These operators can be defined inductively on the structure of compound
 fluents:
\layout Standard


\begin_inset Formula \[
\begin{array}{c}
\mathcal{E}^{+}[F,\alpha]\isdef\epsilon_{F,\alpha}^{+}\\
\mathcal{E}^{+}[\phi\wedge\psi,\alpha]\isdef(\mathcal{E}^{+}[\phi,\alpha]\wedge\mathcal{E}^{+}[\psi,\alpha])\vee(\mathcal{E}^{+}[\phi,\alpha]\wedge\psi\wedge\neg\mathcal{E}^{-}[\psi,\alpha])\vee(\mathcal{\phi\wedge\neg E}^{-}[\phi,\alpha]\wedge\mathcal{E}^{+}[\psi,\alpha])\\
\mathcal{E}^{+}[\phi\vee\psi,\alpha]\\
\\\\\end{array}\]

\end_inset 


\layout Section

TODO
\layout Standard

Dont use the word 
\begin_inset Quotes eld
\end_inset 

state
\begin_inset Quotes erd
\end_inset 

 anywhere, use 
\begin_inset Quotes eld
\end_inset 

situation
\begin_inset Quotes erd
\end_inset 

 instead
\layout Standard


\begin_inset LatexCommand \BibTeX[plain]{/storage/uni/pgrad/library/references}

\end_inset 


\the_end
