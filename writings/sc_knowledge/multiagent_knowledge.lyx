#LyX 1.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
Multi-Agent Knowledge in the Situation Calculus with Partial Awareness of
 Actions
\end_layout

\begin_layout Author
Ryan Kelly
\end_layout

\begin_layout Abstract
In this paper we extend the account of knowledge in the situation calculus
 to handle multi-agent domains with partial awareness of actions.
 Situation calculus models of multi-agent domains typically make one of
 two assumptions: that all agents are aware of all actions that have been
 performed, or that each agent is completely ignorant of the actions perform
 by others.
 Many real-world systems fall between these two extremes.
 By explicitly axiomatising the conditions under which agents will be aware
 of the occurance of actions, we develop an enhanced account of knowledge
 that can model a wider variety of multi-agent domains.
 We then use this to develop a general account of communication actions
 as sensing actions, so that adding new communication actions does not require
 modifying the axiomatisation of knowledge.
 Finally, we extend the regression operator to accomodate reasoning in the
 new formalism.
\end_layout

\begin_layout Abstract
TODO: this needs to be stronger, also talk about 
\begin_inset Quotes eld
\end_inset

change notification actions
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The situation calculus 
\begin_inset LatexCommand \cite{McCHay69sitcalc}

\end_inset

 is a popular formalism for representing dynamic worlds.
 Since its inception, many extensions have been proposed to enrich its ontology
 with concepts such as knowledge 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 and concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 Such extensions can be combined to provide a rich formalism for modelling
 multi-agent systems - for example, the Cognitive Agent Specification Language
 (CASL) 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

.
\end_layout

\begin_layout Standard
An almost universal assumption when working with the situation calculus
 is that agents are fully aware of the actions that have been performed
 in the world.
 Indeed, the very notion of 'situation' is formalised as a history of all
 actions that have occured.
 While agents may be unsure about precisely what 
\emph on
state
\emph default
 the world started out in, they are never unsure of precisely what 
\emph on
situation
\emph default
 they are in relative to the initial situation.
 In the rare cases that this assumption is not used (such as 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

), the opposing extreme is typically posited - that agents are completely
 unaware of any actions that they did not themselves perform.
\end_layout

\begin_layout Standard
To further the current promising work on multi-agent systems in the situation
 calculus, we develop an enhanced account of knowledge that spans these
 two extremes.
 We axiomatise the conditions under which an agent will be aware of the
 occurance of an action, and use this to develop an account of knowledge
 with partial awareness
\emph on
 
\emph default
of actions.
 The common cases discussed above, total awareness and total ignorance,
 are special cases of this general approach.
\end_layout

\begin_layout Standard
In some domains, it may be infeasible for agents to determine what actions
 have occured outside their immediate control.
 They may, however, be aware that the values of certain fluents have changed.
 By including a special class of actions that notify agents about fluent
 change, we show that such domains can be represented using our formalism.
 
\end_layout

\begin_layout Standard
Multi-agent systems almost invariably require communication between agents,
 which is typically represented using explicit communication actions.
 Such actions are intricately connected with the state of of the agents
 involved, and existing accounts of knowledge such as 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 include them explicitly in the dynamics of knowledge change.
 However, it should not be necessary to alter the fundamental axioms of
 the formalism to add or modify communication actions.
 Using our generalised account of knowledge, we propose an account of communicat
ion actions as sensing actions that allows them to be added to the language
 in the same way as standard actions.
 TODO explain why this is a good thing
\end_layout

\begin_layout Section
The Situation Calculus for Multi-Agent Domains
\end_layout

\begin_layout Standard
We work in a version of the the situation calculus enriched with a number
 of extensions that are useful for modelling multi-agent domains.
 It is a combination of: the base situation calculus as described in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

; an explicit temporal component similar to that of 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

 but using the action-time pairs of 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

; concurrent actions and natural actions as developed in 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

; knowledge and sensing as developed in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 and expanded in 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

; multiple agents and communication as used in CASL 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

.
 These extensions are largely independent, and can each be removed from
 the formalism in a straight-forward manner.
 We provide only a basic overview here.
\end_layout

\begin_layout Subsection
Preliminaries
\end_layout

\begin_layout Standard
The situation calculus is a many-sorted first-order logic language, augmented
 with a second-order induction axiom.
 Its terms are of the following types:
\noun on
 Agent
\noun default
 terms (variables 
\begin_inset Formula $agt_{y}^{x}$
\end_inset

) represent the agents operating in the world;
\noun on
 Action
\noun default
 terms (variables 
\begin_inset Formula $a_{y}^{x}$
\end_inset

) represent individual instantaneous events that can cause the state of
 the world to change;
\noun on
 Time 
\noun default
terms (variables 
\begin_inset Formula $t_{y}^{x}$
\end_inset

) represent instants in time using some suitable representation (e.g.
 reals, integers);
\noun on
 Action-Time Pairs
\noun default
 (variables 
\begin_inset Formula $p_{y}^{x}=<a_{y}^{x},t_{y}^{x}>$
\end_inset

) represent an action and the time at which it occured; 
\noun on
Concurrent
\noun default
 terms (variables 
\begin_inset Formula $c_{y}^{x}$
\end_inset

) are sets of actions that occur simultaneously; 
\noun on
Event
\noun default
 terms (variables 
\begin_inset Formula $e_{y}^{x}=<c_{y}^{x},t_{y}^{x}>$
\end_inset

) pair a set of concurrent actions with the time at which they occur
\begin_inset Foot
status collapsed

\begin_layout Standard
This simplifies some technical and notational matters, such as the 
\begin_inset Formula $Coherent$
\end_inset

 predicate of 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset


\end_layout

\end_inset

; 
\noun on
Situation 
\noun default
terms (variables 
\begin_inset Formula $s_{y}^{x}$
\end_inset

) are histories of the concurrent actions that have occured in the world,
 with the initial situation represented by 
\begin_inset Formula $S_{0}$
\end_inset

 and successive situations built up using the function 
\begin_inset Formula $do\,:\, Event\times Situation\rightarrow Situation$
\end_inset

;
\noun on
 Object 
\noun default
terms (variables 
\begin_inset Formula $obj_{y}^{x}$
\end_inset

) represent any other object in the domain.

\noun on
 
\noun default
We also distinguish 
\noun on
Fluents
\noun default
 as predicates or functions that represent properties of the world, and
 that take a situation term as their last argument.
\end_layout

\begin_layout Standard
TODO: sort for results? action-result pairs?
\end_layout

\begin_layout Subsection
Useful Functions
\end_layout

\begin_layout Standard
The following functions are introduced to the situation calculus to make
 it easier to write complex expressions.
\end_layout

\begin_layout Standard
\begin_inset Formula $time(p)$
\end_inset

 and 
\begin_inset Formula $action(p)$
\end_inset

 gives the time and action components of a pair:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
time(<a,t>)=t\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
action(<a,t>)=a\]

\end_inset


\end_layout

\begin_layout Standard
Similar functions are defined for event terms:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
time(<c,t>)=t\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
actions(<c,t>)=c\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $start(s)$
\end_inset

 gives the starting time of a situation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
start(do(e,s))=time(e)\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $agent(a)$
\end_inset

 gives the agent that performs an action, and must be defined for each action
 in the domain.
 For example:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
agent(pickup(agt,obj))=agt\]

\end_inset


\end_layout

\begin_layout Subsection
Action Precondition Axioms
\end_layout

\begin_layout Standard
There is a distinguished fluent predicate 
\begin_inset Formula $Poss(<a,t>,s)$
\end_inset

 that indicates when it is possible to perform an action in a given situation.
 For example, it is only possible for an agent to drop an object if they
 are holding it:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Poss(<drop(agt,obj),t>,s)\\
\leftrightarrow holding(agt,obj,s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For concurrent actions, an arbitrary combination of actions 
\begin_inset Formula $\{ a_{1},a_{2}\}$
\end_inset

 is not guaranteed to be possible.
 While the actions 
\begin_inset Formula $moveTo(Chair)$
\end_inset

 and 
\begin_inset Formula $moveTo(Table)$
\end_inset

 may individually be possible, performing them concurrently clearly is not.
 This is known as the precondition interaction problem 
\begin_inset LatexCommand \cite{pinto94temporal}

\end_inset

 and is an area of ongoing research.
\end_layout

\begin_layout Standard
This is addressed by introducing a predicate 
\begin_inset Formula $Conflicts(e,s)$
\end_inset

 which is true when the actions in 
\begin_inset Formula $e$
\end_inset

 are in conflict and cannot be performed together.
 The following possibility axiom is then introduced for concurrent actions:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Poss(e,s)\leftrightarrow\forall a\left[a\in actions(e)\rightarrow Poss(<a,time(e)>,s)\right]\wedge\neg Conflicts(e,s)\]

\end_inset


\end_layout

\begin_layout Subsection
Successor State Axioms
\end_layout

\begin_layout Standard
The truth values of fluents are specified by defining what is true of the
 initial situation, and collecting the effects of various actions into
\emph on
 successor state axioms
\emph default
.
 These state that a fluent is true if something caused it to be true, or
 it was previously true and nothing caused it to be false.
 Successor state axioms provide a general solution to the frame problem,
 developed fully in 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

.
 They have the general form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
F(\overrightarrow{x},do(<c,t>,s))\leftrightarrow\Gamma^{+}(\overrightarrow{x},c,t,s)\,\vee\, F(\overrightarrow{x},s)\wedge\neg\Gamma^{-}(\overrightarrow{x},c,t,s)\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $F$
\end_inset

 is a fluent with non-situation arguments 
\begin_inset Formula $\overrightarrow{x}$
\end_inset

, 
\begin_inset Formula $\Gamma^{+}$
\end_inset

 is a formula giving the conditions under which 
\begin_inset Formula $F$
\end_inset

 will become true, and 
\begin_inset Formula $\Gamma^{-}$
\end_inset

 a formula giving the conditions under which 
\begin_inset Formula $f$
\end_inset

 will become false.
\end_layout

\begin_layout Standard
TODO: give an example?
\end_layout

\begin_layout Subsection
Natural Actions
\end_layout

\begin_layout Standard
Natural actions are a special class of exogenous actions, those actions
 which occur outside of any agent's control.
 They are classified according to the following requirement: natural actions
 must occur at their predicted times, provided no earlier actions prevent
 them from occurring.
 For example, a timer will ring at the time it was set for, unless it is
 cancelled.
 They are thus a tool allowing agents to predict the behavior of their environme
nt.
 Natural actions are indicated by the truth of the predicate 
\begin_inset Formula $Natural(a)$
\end_inset

.
 As usual, the times at which natural actions may occur are specified by
 the 
\begin_inset Formula $Poss$
\end_inset

 predicate.
\end_layout

\begin_layout Standard
An important concept when dealing with natural actions it the least natural
 time point (LNTP) of a situation.
 This is defined as the earliest time at which a natural action may occur
 in a situation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Lntp(s,t)\equiv\exists a\left[Natural(a)\wedge Poss(<a,t>,s)\right]\wedge\\
\forall a,t_{a}\left[Natural(a)\wedge Poss(<a,t_{a}>,s)\rightarrow t\leq t_{a}\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Note that the LNTP need not exist for a given situation.
 This can happen both when no natural actions are possible in a situation,
 or when a natural action may occur at any time in a situation (and there
 is thus no earliest time).
 It is assumed that the domain axiomatisation is designed to avoid such
 pathological cases, and the absence of an LNTP implies that no natural
 actions are possible.
\end_layout

\begin_layout Standard
To enforce the requirement that natural actions must occur when possible,
 a predicate 
\begin_inset Formula $Legal(s)$
\end_inset

 is introduced which is true only for situations which respect this requirement
 (assuming no precondition interaction among natural actions):
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{multline}
Legal(S_{0})\equiv True\label{eqn:legal_def}\\
\shoveleft{Legal(do(e,s))\equiv}\\
Legal(s)\wedge Poss(e,s)\wedge start(s)\leq time(e)\,\wedge\\
\forall a,t_{a}.\, Natural(a)\wedge Poss(<a,t_{a}>,s)\rightarrow\left[a\in actions(e)\vee time(e)<t_{a}\right]\end{multline}

\end_inset


\end_layout

\begin_layout Subsection
Communication
\end_layout

\begin_layout Standard
Inter-agent communication is typically modelled by special communication
 actions.
 Representative of this approach are the 
\begin_inset Formula $informWhether(agt_{1},agt_{2},\phi)$
\end_inset

 and 
\begin_inset Formula $informRef(agt_{1},agt_{2},\theta)$
\end_inset

 actions of CASL, whereby 
\begin_inset Formula $agt_{1}$
\end_inset

 informs 
\begin_inset Formula $agt_{2}$
\end_inset

 about the truth of a formula or the referrent of a function respectively.
\end_layout

\begin_layout Subsection
Knowledge and Sensing
\end_layout

\begin_layout Standard
The semantics of knowledge in the situation calculus 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 are based on the popular 
\begin_inset Quotes eld
\end_inset

possible worlds
\begin_inset Quotes erd
\end_inset

 model.
 A knowledge fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 is used to indicate that 
\begin_inset Quotes eld
\end_inset

in situation 
\begin_inset Formula $s$
\end_inset

, the agent 
\begin_inset Formula $agt$
\end_inset

 considers the alternate situation 
\begin_inset Formula $s'$
\end_inset

 to be possible
\begin_inset Quotes erd
\end_inset

.
 A knowledge operator 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

is then introduced as a macro:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi(now),s)=^{def}\forall s'\, K(s',s)\rightarrow\phi[now/s']\]

\end_inset


\end_layout

\begin_layout Standard
TODO: other macros such as KWhether, KRef, etc...
\end_layout

\begin_layout Standard
To allow actions to return sensing information, the sensing result function
 
\begin_inset Formula $SR(<a,t>,s)$
\end_inset

 is introduced, which gives the value returned by the action 
\begin_inset Formula $a$
\end_inset

 when exectued in a situation 
\begin_inset Formula $s$
\end_inset

.
 This is defined by sensing results axioms to determine the values that
 would be returned, of the form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
SR(<a(\overrightarrow{x}),t>,s)=r\equiv\phi_{a}(\overrightarrow{x},r,t,s)\]

\end_inset


\end_layout

\begin_layout Standard
For example, consider the action 
\begin_inset Formula $sense_{F}$
\end_inset

 which senses whether fluent 
\begin_inset Formula $F$
\end_inset

 is true or false.
 Its sensing result axiom would be given by:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(<sense_{F},t>,s)=r\equiv\\
(r="YES"\wedge F(s))\vee(r="NO"\wedge\neg F(s))\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For actions that dont sense information, the value of 
\begin_inset Formula $SR$
\end_inset

 should be set to some arbitrary constant such as 
\begin_inset Formula $"OK"$
\end_inset

.
\end_layout

\begin_layout Standard
Combining the semantics of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 and 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, a successor state axiom for the knowledge fluent can be written:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(e,s))\equiv\\
\exists s',e'\,.\, s''=do(e',s')\,\wedge K(s',s)\wedge Poss(e',s')\\
\wedge\, start(s'')=start(s')+time(e)-start(s)\,\wedge actions(e)=actions(e')\\
\wedge\,\forall a\left[a\in actions(e)\wedge agent(a)=agt\rightarrow SR(<a,time(e)>,s)=SR(<a,time(e')>,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
TODO: explain the 
\begin_inset Formula $\phi[s]$
\end_inset

 notation.
\end_layout

\begin_layout Standard
In words, this states that 
\begin_inset Formula $s''$
\end_inset

 is considered a possible alternative to 
\begin_inset Formula $do(e,s)$
\end_inset

 when 
\begin_inset Formula $s''$
\end_inset

 is the result of doing the actions in 
\begin_inset Formula $e$
\end_inset

 at the same relative time 
\begin_inset Formula $time(e)-start(s)$
\end_inset

 in a situation 
\begin_inset Formula $s'$
\end_inset

 that is a possible alternative to 
\begin_inset Formula $s$
\end_inset

.
 The situation must furthermore be possible, the sensing results must agree
 for all actions in 
\begin_inset Formula $e$
\end_inset

 carried out by that agent, and the situation must be consistent with what
 it has been informed by others.
\end_layout

\begin_layout Standard
TODO: critique this here?
\end_layout

\begin_layout Standard
Improving this successor state axiom for 
\begin_inset Formula $K$
\end_inset

 is the main aim of this paper.
\end_layout

\begin_layout Section
New Semantics for Knowledge
\end_layout

\begin_layout Subsection
Observability of Actions
\end_layout

\begin_layout Standard
The existing accounts of knowledge presented above all employ an assumption
 about when an agent is aware of the occurance of an action - either 
\begin_inset Quotes eld
\end_inset

agents are always aware of actions
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

agents are only aware of actions that they themselves perform
\begin_inset Quotes erd
\end_inset

.
 We replace such assumptions with a question: 
\begin_inset Quotes eld
\end_inset

when will an agent be aware of the occurance of an action?
\begin_inset Quotes erd
\end_inset

.
 By providing a way to answer this question within the theory of action,
 a more general account of knowledge is obtained.
\end_layout

\begin_layout Standard
Another distinguished fluent is introduced, akin to 
\begin_inset Formula $Poss$
\end_inset

 but describing when actions will be observed by agents: 
\begin_inset Formula $CanObs(agt,<a,t>,s)$
\end_inset

 indicates that agent 
\begin_inset Formula $agt$
\end_inset

 would be able to observe action 
\begin_inset Formula $a$
\end_inset

 being performed at time 
\begin_inset Formula $t$
\end_inset

 in situation 
\begin_inset Formula $s$
\end_inset

.
 The axiomatisation of this predicate, like that of 
\begin_inset Formula $Poss$
\end_inset

, is the responsibility of the domain modeller.
\end_layout

\begin_layout Standard
There is a related assumption implicit in the handling of sensing actions:
 that only the agent performing a sensing action is aware of its result.
 Such a restriction is common in the real world, but certainly not universal.
 Consider an agent waiting for a train who activates a speaker to acquire
 information about when it will arive.
 The results of this sensing action would be available to any other agents
 within earshot.
 We add an analogous predicate 
\begin_inset Formula $CanSense(agt,<a,t>,s)$
\end_inset

 to indicate when the result of an action is available to an agent.
\end_layout

\begin_layout Standard
Since we will often want to compare what is observed by an agent in different
 situations, we define the predicate 
\begin_inset Formula $Observations(agt,o,e,s)$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Observations(agt,o,e,s)\equiv\forall a,r\,\left[<a,r>\in o\equiv\right.\\
\exists p\, p=<a,time(e)>\wedge a\in actions(e)\\
\wedge\, CanObs(agt,p,s)\\
\wedge\,\left(CanSense(agt,p,s)\wedge SR(p,s)=r\right.\\
\left.\vee\,\left.\neg CanSense(agt,p,s)\wedge r="?"\right)\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Like their counterpart 
\begin_inset Formula $Poss$
\end_inset

, 
\begin_inset Formula $CanObs$
\end_inset

 and 
\begin_inset Formula $CanSense$
\end_inset

 may suffer from interaction problems when concurrent actions are considered
 - for example, one agent moving in front of another may mean the second
 agent's actions are no longer observable\SpecialChar \@.
 While we are confident an approach
 similar to that used for the precondition interaction problem can be applied,
 this remains an open problem.
\end_layout

\begin_layout Subsection
Successor State Axiom for 
\begin_inset Formula $K$
\end_inset


\end_layout

\begin_layout Standard
What, then, are the considerations required for the successor state axiom
 of 
\begin_inset Formula $K$
\end_inset

 for any particular agent? Generalising the considerations of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

 and 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

, situations considered possible must:
\end_layout

\begin_layout Itemize
be successors to situations previously considered possible by the agent
\end_layout

\begin_layout Itemize
be possible according to 
\begin_inset Formula $Poss$
\end_inset


\end_layout

\begin_layout Itemize
agree on relative elapsed time since the start of the previous situation
\end_layout

\begin_layout Itemize
agree on all actions that the agent observed to occur
\end_layout

\begin_layout Itemize
agree with all sensing results that the agent observed
\end_layout

\begin_layout Standard
We introduce two more considerations:
\end_layout

\begin_layout Itemize
be legal according to 
\begin_inset Formula $Legal(s)$
\end_inset

, which implies they must be possible
\end_layout

\begin_layout Itemize
admit the possibility of a sequence of actions that was totally unobservable
 by the agent
\end_layout

\begin_layout Standard
As the resulting sucessor state axiom will be quite complex, we introduce
 it a piece at a time using abbreviations.
 First, let us define what it means for two situations to agree on observations:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\isdef\\
\exists t,o\, t=time(e)-start(s)\,\wedge\, Observations(agt,o,e,s)\\
\wedge\, t=time(e')-start(s')\,\wedge\, Observations(agt,o,e',s')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
In words this requires that the same relative time has elapsed before the
 situation was changed, and that the two situations agree on all observations
 made by the agent.
 The reason for the particular structure of this predicate will become clear
 when we discuss regression.
\end_layout

\begin_layout Standard
Next we define the abbreviation 
\begin_inset Formula $\mathbf{Unobs}(agt,s,s')$
\end_inset

, which will be true when 
\begin_inset Formula $agt$
\end_inset

 cannot observe any of the actions leading from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Unobs}(agt,s,s''))\isdef\\
\forall a,e,s'\, s<do(e,s')\leq s''\rightarrow\\
a\notin actions(e)\vee\neg CanObs(agt,<a,time(e)>,s')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
If the agent considers possible a situation 
\begin_inset Formula $s$
\end_inset

 then it must also consider possible any situation 
\begin_inset Formula $s'$
\end_inset

 such that 
\begin_inset Formula $\mathbf{Unobs}(s,s')$
\end_inset

, as it would be completely unaware of the world changing from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

.
 Also note that 
\begin_inset Formula $\mathbf{Unobs}(s,s)$
\end_inset

 is always true.
\end_layout

\begin_layout Standard
The following successor state axiom is then posited, capturing the consideration
s outlined above.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(e,s))\equiv\\
\exists s',e'\, K(s',s)\wedge Legal(s'')\\
\wedge\,\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\\
\wedge\,\mathbf{Unobs}(do(e',s'),s'')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
This axiom is very similar in form to the axioms of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge,scherl03conc_knowledge,shapiro01casl_feat_inter}

\end_inset

, but takes into consideration a much broader range of factors.
\end_layout

\begin_layout Standard
It remains to specify the 
\begin_inset Formula $K$
\end_inset

 fluent in the initial situation.
 Assuming that the alternate initial situations are identified by the truth
 of 
\begin_inset Formula $K_{0}(s)$
\end_inset

, then the following suffices:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
K(s',S_{0})\equiv\exists s\, K_{0}(s)\wedge Legal(s')\wedge\mathbf{Unobs}(s,s')\]

\end_inset


\end_layout

\begin_layout Subsection
Communication as Sensing
\end_layout

\begin_layout Standard
As observed previously, communication actions are typically built into the
 successor state axiom of the knowledge fluent.
 In our opinion, this unnecessarily complicates the semantics of knowledge
 and makes it more difficult to introduce additional communication actions.
 Our formulation provides a ready alternative - encode communication actions
 are sensing actions where both sender and recipient are aware of the outcome.
 Consider formulating the action 
\begin_inset Formula $informWhether$
\end_inset

 in this framework:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Poss(<informWhether(agt_{1},agt_{2},\phi),t>,s)\equiv\mathbf{KWhether}(agt_{1},\phi,s)\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(<informWhether(agt_{2},agt_{3},\phi),t>,s)=r\equiv\\
(r="YES"\wedge\phi[s])\,\vee\,(r="NO"\wedge\neg\phi[s])\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanObs(agt_{1},<informWhether(agt_{2},agt_{3},\phi),t>,s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanSense(agt_{1},<informWhether(agt_{2},agt_{3},\phi),t>,s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Section
Implications for Reasoning
\end_layout

\begin_layout Standard
As noted above, the fact that an agent may be unable to observe some actions
 taking place means that they must consider possible any situation brought
 about by such actions.This has deep implications for the agent's state of
 knowledge.
 If there are many actions that it cannot observe, it must consider possible
 a large number of situations and so may have difficulting arriving at knowledge
 of any fluent.
\end_layout

\begin_layout Standard
In particular, the appearance of 
\begin_inset Formula $\mathbf{Unobs}$
\end_inset

 on the right-hand-side of equation (TODO) means that it is doing unbounded
 quantification over situation terms.
 It is therefore not possible to use standard regression techniques, as
 the RHS of the successor state axiom is not regressible.
 We investigate two solutions to this problem below.
\end_layout

\begin_layout Subsection
Awareness of Time
\end_layout

\begin_layout Standard
For domains with a large amount of unobservability, it may be necessary
 to take additional steps to allow the agents to accumulate knowledge.
 If time is discrete, this can be achieved by making all agents aware of
 the passage of time.
 Introduce a natural action 
\begin_inset Formula $tick$
\end_inset

 that occurs to indicate the passage from one time instant to the next,
 and which all agents can observe:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Natural(tick)\equiv True\\
Poss(<tick,t>,s)\equiv t=start(s)+1\\
CanObs(agt,<tick,t>,s)\equiv True\\
CanSense(agt,<tick,t>,s)\equiv True\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Since agents know all situations to be legal, and 
\begin_inset Formula $tick$
\end_inset

 actions can always be observed, the only way to satisfy 
\begin_inset Formula $\mathbf{Unobs}(s_{o},s'')$
\end_inset

 is to have 
\begin_inset Formula $s_{o}=s''$
\end_inset

.
 Thus 
\begin_inset Formula $\mathbf{Unobs}$
\end_inset

 is no longer doing any work in the successor state axiom and can be removed.
 The remaining RHS is a regressible formula, so the standard regression
 techniques of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge,scherl03conc_knowledge}

\end_inset

 can be applied.
\end_layout

\begin_layout Subsection
Property Persistence
\end_layout

\begin_layout Standard
In a companion paper (TODO:cite ourselves) we show how to define the persistence
 condition 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 of a situation-suppressed formula 
\begin_inset Formula $\phi$
\end_inset

 with respect to actions satisfying conditions 
\begin_inset Formula $\alpha$
\end_inset

, such that:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathcal{P}(\phi,\alpha)[s]\equiv\forall s''\, s\leq s''\rightarrow\phi[s'']\vee\exists a,s'\, s<do(a,s')\leq s''\wedge\alpha(a,s)\]

\end_inset


\end_layout

\begin_layout Standard
The truth of 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 in a situation 
\begin_inset Formula $s$
\end_inset

 guarantees that, so long as no actions satisying 
\begin_inset Formula $\alpha$
\end_inset

 occur, the formula 
\begin_inset Formula $\phi$
\end_inset

 will remain true in all situations in the future of 
\begin_inset Formula $s$
\end_inset

.
 By having 
\begin_inset Formula $\alpha$
\end_inset

 single out observable actions, the persistence condition can be used to
 guarantee that 
\begin_inset Formula $\phi$
\end_inset

 will not be falsified without the agent being aware of it.
 Combined with the techniques for regressing knowledge of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, this can be used to regress the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 operator to knowledge persistence in the initial situation.
\end_layout

\begin_layout Standard
Assume that the 
\begin_inset Formula $K$
\end_inset

 fluent is only used in the context of a 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 operator.
 Then:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s''\, K(s'',do(e,s))\rightarrow\phi[s'']\]

\end_inset


\end_layout

\begin_layout Standard
Employing the SSA for 
\begin_inset Formula $K$
\end_inset

 gives:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s''\{\exists s',e'\, K(s',s)\wedge Legal(s'')\\
\wedge\,\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\\
\wedge\,\mathbf{Unobs}(do(e',s'),s'')\}\,\rightarrow\phi[s'']\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Rearranging to put 
\begin_inset Formula $s'$
\end_inset

 in the leading quantifier gives:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall e',s''\,\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\\
\wedge\, Legal(s'')\wedge\mathbf{Unobs}(do(e',s'),s'')\,\rightarrow\,\phi[s'']\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Pushing quantification over 
\begin_inset Formula $s''$
\end_inset

 further into the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall e'\,\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\rightarrow\\
\{\forall s''\, Legal(s'')\wedge\mathbf{Unobs}(do(e',s'),s'')\,\rightarrow\,\phi[s'']\}\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Suppose that 
\begin_inset Formula $\alpha$
\end_inset

 singles out precisely legal, unobservable actions (TODO: define it properly),
 then by the definition of the persistence condition operator:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall e'\,\mathbf{AgreeOnObs}(agt,do(e',s'),do(e,s))\wedge Legal(do(e',s'))\rightarrow\mathcal{P}(\phi,\alpha)[do(e',s')]\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Substituting in the definition for 
\begin_inset Formula $\mathbf{AgreeOnObs}$
\end_inset

 and moving the parts that dont involve 
\begin_inset Formula $e'$
\end_inset

 or 
\begin_inset Formula $s'$
\end_inset

 outside the quantification:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\exists t,o\, t=time(e)-start(s)\,\wedge\, Observations(agt,o,e,s)\\
\wedge\forall s'\,\, K(s',s)\rightarrow\\
\{\forall e'\, t=time(e')-start(s')\,\wedge\, Observations(agt,o,e',s')\wedge Legal(e',s')\rightarrow\mathcal{P}(\phi,\alpha)[do(e',s')]\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
By applying the regression operator, the sentence within the scope of quantifica
tion over 
\begin_inset Formula $e'$
\end_inset

 can be made uniform in 
\begin_inset Formula $s'$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\exists t,o\, t=time(e)-start(s)\,\wedge\, Observations(agt,o,e,s)\\
\wedge\forall s'\,\, K(s',s)\rightarrow\\
\{\forall e'\, t=time(e')-start(s')\,\wedge\, Observations(agt,o,e',s')\wedge Legal(e',s')\rightarrow\mathcal{R}(\mathcal{P}(\phi,\alpha)[do(e',s')])\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
The quantification over 
\begin_inset Formula $s'$
\end_inset

 now matches the form of the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

operator, so we can insert it back int the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\exists t,o\, t=time(e)-start(s)\,\wedge\, Observations(agt,o,e,s)\\
\wedge\mathbf{Knows}(\forall e'\, t=time(e')-start()\,\wedge\, Observations(agt,o,e')\wedge Legal(e')\rightarrow\mathcal{R}(\mathcal{P}(\phi,\alpha)[do(e',s')])^{-1},s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
We have thus reduced reasoning about knowledge in 
\begin_inset Formula $do(e,s)$
\end_inset

 to reasoning about knowledge in 
\begin_inset Formula $s$
\end_inset

.
 This is precisely the behavior required by the regression operator.
\end_layout

\begin_layout Standard
Additional care must be taken when dealing with knowledge in the initial
 situation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s'\,\{\exists s\, K_{0}(s)\wedge Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
By a straightforward transformation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\{\forall s'\, Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\mathcal{P}(\phi,\alpha)[s]\]

\end_inset


\end_layout

\begin_layout Standard
This is standard modal reasoning over the 
\begin_inset Formula $K_{0}$
\end_inset

 relation, as employed by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 for determining knowledge in the initial situation.
\end_layout

\begin_layout Section
Properties of Knowledge
\end_layout

\begin_layout Standard
TODO: use the properties developed in other accounts, to show that this
 still works as required.
 Such as:
\end_layout

\begin_layout Itemize
Memory
\end_layout

\begin_layout Itemize
Persistance of Ignorance
\end_layout

\begin_layout Itemize
Preservation of reflexivity, transitivity, symmetry etc (these will only
 be preserved among legal situations, but we make no requirement that 
\begin_inset Formula $do(e,s)$
\end_inset

 be legal...)
\end_layout

\begin_layout Itemize
Knowledge incorporation (including for communication actions)
\end_layout

\begin_layout Itemize
inability to know things that might change without it noticing
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Section
TODO
\end_layout

\begin_layout Itemize
formalise the idea of 
\begin_inset Quotes eld
\end_inset

theory of action
\begin_inset Quotes erd
\end_inset

 and entailment etc as done in KiA, generally be more rigourous
\end_layout

\begin_layout Itemize
Talk about the requirements for knowledge - e.g.
 symmetry, reflexivity - that we require for this to be reasonable.
\end_layout

\begin_layout Itemize
Work in Init(s) as a substitute for S0
\end_layout

\begin_layout Itemize
knowledge in initial situation, using 
\begin_inset Formula $Unobs$
\end_inset


\end_layout

\begin_layout Itemize
Maybe drop time and natural actions, to focus on main contributions
\end_layout

\begin_layout Itemize
Have special actions for monitoring values of fluents, e.g.
 
\begin_inset Formula $changed(\phi)$
\end_inset

 so that agents dont need to infer what actions have occured
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
