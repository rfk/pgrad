#LyX 1.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{ijcai07}
\usepackage{times}
\usepackage{helvet}
\usepackage{courier}
\usepackage{amsthm}
\usepackage{amsthm}

\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}

\newtheorem{theorem}{Theorem}

\makeatother
\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title
Multi-Agent Knowledge in the Situation Caluclus with Partial Awareness of
 Actions
\end_layout

\begin_layout Author
Ryan Kelly blah blah blah
\end_layout

\begin_layout Abstract
In this paper we extend the account of knowledge in the situation calculus
 to handle multi-agent domains with partial awareness of actions.s Situation
 calculus models of multi-agent domains typically make one of two assumptions:
 that all agents are aware of all actions that have been performed, or that
 each agent is completely ignorant of the actions perform by others.
 Many real-world systems fall between these two extremes.
 By explicitly axiomatising the conditions under which agents will be aware
 of the occurance of actions, we develop an enhanced account of knowledge
 that can model a wider variety of multi-agent domains.
 We then use this to develop a general account of communication actions
 as sensing actions, so that adding new communication actions does not require
 modifying the axiomatisation of knowledge.
 Finally, we extend the regression operator to accomodate reasoning in the
 new formalism.
\end_layout

\begin_layout Abstract
TODO: this needs to be stronger, also talk about 
\begin_inset Quotes eld
\end_inset

change notification actions
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The situation calculus 
\begin_inset LatexCommand \cite{McCHay69sitcalc}

\end_inset

 is a popular formalism for representing dynamic worlds.
 Since its inception, many extensions have been proposed to enrich its ontology
 with concepts such as knowledge 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 and concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 Such extensions can be combined to provide a rich formalism for modelling
 multi-agent systems - for example, the Cognitive Agent Specification Language
 (CASL) 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

.
\end_layout

\begin_layout Standard
An almost universal assumption when working with the situation calculus
 is that agents are fully aware of the actions that have been performed
 in the world.
 Indeed, the very notion of 'situation' is formalised as a history of all
 actions that have occured.
 While agents may be unsure about precisely what 
\emph on
state
\emph default
 the world started out in, they are never unsure of precisely what 
\emph on
situation
\emph default
 they are in relative to the initial situation.
 In the rare cases that this assumption is not used (such as 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

), the opposing extreme is typically posited - that agents are completely
 unaware of any actions that they did not themselves perform.
\end_layout

\begin_layout Standard
To further the current promising work on multi-agent systems in the situation
 calculus, we develop an enhanced account of knowledge that spans these
 two extremes.
 We axiomatise the conditions under which an agent will be aware of the
 occurance of an action, and use this to develop an account of knowledge
 with partial awareness of actions.
 The common cases discussed above, total awareness and total ignorance,
 are special cases of this general approach.
\end_layout

\begin_layout Standard
In some domains, it may be infeasible for agents to determine what actions
 have occured outside their immediate control.
 They may, however, be aware that the values of certain fluents have changed.
 By including a special class of actions that notify agents about fluent
 change, we show that such domains can be represented using our formalism.
\end_layout

\begin_layout Standard
Multi-agent systems almost invariably require communication between agents,
 which is typically represented using explicit communication actions.
 Such actions are intricately connected with the state of of the agents
 involved, and existing accounts of knowledge such as 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 include them explicitly in the dynamics of knowledge change.
 However, it should not be necessary to alter the fundamental axioms of
 the formalism to add or modify communication actions.
 Using our generalised account of knowledge, we propose an account of communicat
ion actions as sensing actions that allows them to be added to the language
 in the same way as standard actions.
 TODO explain why this is a good thing
\end_layout

\begin_layout Section
The Situation Calculus for Multi-Agent Domains
\end_layout

\begin_layout Standard
We work in a version of the the situation calculus as described in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

, enriched with the notion of concurrent actions from 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 We use the approach of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 to represent multiple agents, and follow the standard account of knowledge
 given by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge,scherl03conc_knowledge}

\end_inset

.
 A brief overview is given below.
\end_layout

\begin_layout Standard
There are a number of additional extensions to the situation calculus that
 are useful for modelling multi-agent domains, in particular explicit time
 and natural actions as described in 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 These extensions are compatible with our approach, and have been removed
 from this paper to keep the presentation simple.
\end_layout

\begin_layout Standard
The situation calculus is a many-sorted language of first-order logic, augmented
 with a second-order induction axiom.
 Its terms are of the following types: 
\noun on
Agent
\noun default
 terms (variables 
\begin_inset Formula $agt_{y}^{x}$
\end_inset

) represent the agents operating in the world; 
\noun on
Action
\noun default
 terms (variables 
\begin_inset Formula $a_{y}^{x}$
\end_inset

) represent individual instantaneous events that can cause the state of
 the world to change; 
\noun on
Concurrent
\noun default
 terms (variables 
\begin_inset Formula $c_{y}^{x}$
\end_inset

) are sets of actions that occur simultaneously; 
\noun on
Situation
\noun default
 terms (variables 
\begin_inset Formula $s_{y}^{x}$
\end_inset

) are histories of the concurrent actions that have occured in the world,
 with the initial situation represented by 
\begin_inset Formula $S_{0}$
\end_inset

 and successive situations built up using the function 
\begin_inset Formula $do\,:\, Concurrent\times Situation\rightarrow Situation$
\end_inset

; 
\noun on
Object
\noun default
 terms (variables 
\begin_inset Formula $obj_{y}^{x}$
\end_inset

) represent any other object in the domain.
 (TODO: result type) We also distinguish 
\noun on
Fluents
\noun default
 as predicates or functions representing properties of the world that may
 change from one situation to another.
 Fluents take a situation term as their final argument.
\end_layout

\begin_layout Standard
A collection of situation calculus statements that describe the behavour
 of a dynamic world is referred to as a 
\emph on
theory of action
\emph default
 and is typically represented by 
\begin_inset Formula $\Sigma$
\end_inset

.
 The theory of action contains several special classes of statements, as
 outlined in the following sections.
\end_layout

\begin_layout Subsection
Action Precondition Axioms
\end_layout

\begin_layout Standard
There is a distinguished fluent predicate 
\begin_inset Formula $Poss(a,s)$
\end_inset

 that indicates when it is possible to perform an action in a given situation.
 For example, it is only possible for an agent to drop an object if they
 are holding it:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Poss(drop(agt,obj),s)\leftrightarrow holding(agt,obj,s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For concurrent actions, an arbitrary combination of actions 
\begin_inset Formula $\{ a_{1},a_{2}\}$
\end_inset

 is not guaranteed to be possible.
 While the actions 
\begin_inset Formula $moveTo(Chair)$
\end_inset

 and 
\begin_inset Formula $moveTo(Table)$
\end_inset

 may individually be possible, performing them concurrently clearly is not.
 This is known as the precondition interaction problem 
\begin_inset LatexCommand \cite{pinto94temporal}

\end_inset

 and is an area of ongoing research.
\end_layout

\begin_layout Standard
For our work, this issue is addressed by introducing a predicate 
\begin_inset Formula $Conflicts(c,s)$
\end_inset

 which is true when the actions in 
\begin_inset Formula $c$
\end_inset

 are in conflict and cannot be performed together.
 The following possibility axiom is then introduced for concurrent actions:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Poss(c,s)\leftrightarrow\forall a\left[a\in c\rightarrow Poss(a,s)\right]\wedge\neg Conflicts(c,s)\]

\end_inset


\end_layout

\begin_layout Subsection
Successor State Axioms
\end_layout

\begin_layout Standard
The truth of the various fluents is specified by defining what is true of
 the initial situation, and collecting the effects of various actions into
 
\emph on
successor state axioms
\emph default
.
 These state that a fluent is true if something caused it to be true, or
 it was previously true and nothing caused it to be false.
 Successor state axioms provide a general solution to the frame problem,
 developed fully in 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

.
 They have the general form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
F(\overrightarrow{x},do(c,s))\leftrightarrow\Gamma^{+}(\overrightarrow{x},c,s)\,\vee\, F(\overrightarrow{x},s)\wedge\neg\Gamma^{-}(\overrightarrow{x},c,s)\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $F$
\end_inset

 is a fluent with non-situation arguments 
\begin_inset Formula $\overrightarrow{x}$
\end_inset

, 
\begin_inset Formula $\Gamma^{+}$
\end_inset

 is a formula giving the conditions under which 
\begin_inset Formula $F$
\end_inset

 will become true, and 
\begin_inset Formula $\Gamma^{-}$
\end_inset

 a formula giving the conditions under which 
\begin_inset Formula $f$
\end_inset

 will become false.
 In words, these axioms state that 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $F$
\end_inset

 is true after doing actions 
\begin_inset Formula $c$
\end_inset

 if 
\begin_inset Formula $c$
\end_inset

 causes 
\begin_inset Formula $F$
\end_inset

 to become true, or 
\begin_inset Formula $F$
\end_inset

 is currently true and 
\begin_inset Formula $c$
\end_inset

 doesnt cause 
\begin_inset Formula $F$
\end_inset

 to become false.
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
TODO: give an example?
\end_layout

\begin_layout Subsection
Communication
\end_layout

\begin_layout Standard
Inter-agent communication is typically modelled using special communication
 actions.
 Representative of this approach are the 
\begin_inset Formula $informWhether(agt_{1},agt_{2},\phi)$
\end_inset

 and 
\begin_inset Formula $informRef(agt_{1},agt_{2},\theta)$
\end_inset

 actions of CASL, whereby 
\begin_inset Formula $agt_{1}$
\end_inset

 informs 
\begin_inset Formula $agt_{2}$
\end_inset

 about the truth of a formula or the referrent of a function respectively.
\end_layout

\begin_layout Subsection
Knowledge and Sensing
\end_layout

\begin_layout Standard
The semantics of knowledge in the situation calculus 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 are based on the popular 
\begin_inset Quotes eld
\end_inset

possible worlds
\begin_inset Quotes erd
\end_inset

 model.
 A knowledge fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 is used to indicate that 
\begin_inset Quotes eld
\end_inset

in situation 
\begin_inset Formula $s$
\end_inset

, the agent 
\begin_inset Formula $agt$
\end_inset

 considers the alternate situation 
\begin_inset Formula $s'$
\end_inset

 to be possible
\begin_inset Quotes erd
\end_inset

.
 A knowledge operator 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

is then introduced as a macro: (TODO: explain the function notation?)
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi(now),s)\isdef\forall s'\, K(s',s)\rightarrow\phi[now/s']\]

\end_inset


\end_layout

\begin_layout Standard
TODO: other macros such as KWhether, KRef, etc...
\end_layout

\begin_layout Standard
To allow actions to return sensing information, the sensing result function
 
\begin_inset Formula $SR(a,s)$
\end_inset

 is introduced which gives the value returned by the action 
\begin_inset Formula $a$
\end_inset

 when exectued in a situation 
\begin_inset Formula $s$
\end_inset

.
 This is defined by sensing result axioms to determine the values that would
 be returned, of the form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
SR(a(\overrightarrow{x}),s)=r\equiv\phi_{a}(\overrightarrow{x},r,t,s)\]

\end_inset


\end_layout

\begin_layout Standard
For example, consider the action 
\begin_inset Formula $sense_{F}$
\end_inset

 which senses whether fluent 
\begin_inset Formula $F$
\end_inset

 is true or false.
 Its sensing result axiom would be given by:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(sense_{F},s)=r\equiv\\
(r="YES"\wedge F(s))\vee(r="NO"\wedge\neg F(s))\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For actions that don't return sensing information, the value of 
\begin_inset Formula $SR$
\end_inset

 is set to some arbitrary constant such as 
\begin_inset Formula $"OK"$
\end_inset

.
\end_layout

\begin_layout Standard
Combining the semantics multi-agent semantics of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 with the handling of concurrent actions in 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, a successor state axiom for the knowledge fluent can be written:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
\exists s'\,.\, s''=do(c,s')\,\wedge K(s',s)\wedge Poss(c,s')\\
\wedge\,\forall a\left[a\in c\wedge agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
TODO: explain the 
\begin_inset Formula $\phi[s]$
\end_inset

 notation.
\end_layout

\begin_layout Standard
In words, this states that 
\begin_inset Formula $s''$
\end_inset

 is considered a possible alternative to 
\begin_inset Formula $do(c,s)$
\end_inset

 when 
\begin_inset Formula $s''$
\end_inset

 is the result of doing the actions in 
\begin_inset Formula $c$
\end_inset

 in a situation 
\begin_inset Formula $s'$
\end_inset

 that is a possible alternative to 
\begin_inset Formula $s$
\end_inset

.
 The situation 
\begin_inset Formula $s''$
\end_inset

 must furthermore be possible, the sensing results must agree for all actions
 in 
\begin_inset Formula $c$
\end_inset

 that were carried out by the agent, and the situation must be consistent
 with what it has been informed by others.
\end_layout

\begin_layout Standard
Alternate possible worlds to the initial situation are identified by truth
 of the predicate 
\begin_inset Formula $K_{0}(s)$
\end_inset

.
 This allows the 
\begin_inset Formula $K$
\end_inset

 fluent to be fully specified, by asserting that:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
K(s,S_{0})\equiv K_{0}(s)\]

\end_inset


\end_layout

\begin_layout Standard
While a very powerful formalism, this successor state axiom still suffers
 from several limitations:
\end_layout

\begin_layout Itemize
Each agent must be aware of 
\emph on
all
\emph default
 actions that have occurred 
\end_layout

\begin_layout Itemize
The semantics of communication actions are tightly bound to the account
 of knowledge 
\end_layout

\begin_layout Standard
By adopting instead the form of successor state axiom proposed in 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

, we get the other extreme: agents are only aware of actions that they themselve
s perform:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
\exists s',s^{*}c'\,.\, s''=do(c',s^{*})\,\wedge K(s',s)\wedge Poss(c',s^{*})\\
\wedge\,\mathbf{ExoOnly}(agt,s',s^{*})\\
\wedge\,\forall a\left[agent(a)=agt\rightarrow a\in c'\equiv a\in c\right]\\
\wedge\,\forall a\left[a\in c\wedge agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Where the macro 
\begin_inset Formula $\mathbf{ExoOnly}$
\end_inset

 indicates that two situations are conected by actions performed by agents
 other than 
\begin_inset Formula $agt$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{ExoOnly}(agt,s,s'')\isdef s\leq s''\wedge\forall s',c\left[s<do(c,s^{*})\leq s''\rightarrow\forall a\in c\, agent(a)\neq agt\right]\]

\end_inset


\end_layout

\begin_layout Standard
With this modified approach, agents consider possible any situation which
 agrees on the actions that they have performed.
 Importantly, there may have been an arbitrary sequence of situations between
 
\begin_inset Formula $s'$
\end_inset

 and 
\begin_inset Formula $s''$
\end_inset

 which the agent knew nothing about, because they consisted entire of exogenous
 (from 
\begin_inset Formula $agt$
\end_inset

's point of view) actions.
 Again, this is a very powerful formalism but suffers from some limitatins:
\end_layout

\begin_layout Itemize
Agents can 
\emph on
never
\emph default
 be aware of the actions performed by others 
\end_layout

\begin_layout Itemize
The semantics of communication actions are still tightly bound to the account
 of knowledge 
\end_layout

\begin_layout Itemize
After performing an action, the agent does not allow for the possibility
 that other agents may perform subsequent actions 
\end_layout

\begin_layout Standard
This last point involves some subtly.
 Suppose that an agent 
\begin_inset Formula $agt$
\end_inset

 has just performed the action 
\begin_inset Formula $a_{1}$
\end_inset

, so it now believes the world to be in some situation 
\begin_inset Formula $do(a_{1},s)$
\end_inset

.
 Another agent then performs the action 
\begin_inset Formula $a_{2}$
\end_inset

, leaving the world in the situation 
\begin_inset Formula $do(a_{2},do(a_{1},s))$
\end_inset

.
 However, 
\begin_inset Formula $agt$
\end_inset

 does not know that another action has occured, so it must still believe
 the current situation to be 
\begin_inset Formula $do(a_{1},s)$
\end_inset

.
 Since 
\begin_inset Formula $\neg K(agt,do(a_{2},do(a_{1},s)),do(a_{1},s))$
\end_inset

, the agent does not consider the true state of the world to be possible!
 To faithfully represent the knowledge of agents in the real world, the
 successor state axiom for 
\begin_inset Formula $K$
\end_inset

 must permit any arbitrary future of 
\begin_inset Formula $do(a,s)$
\end_inset

 that can be brought about entirely through exogenous actions.
\end_layout

\begin_layout Standard
Improving and generalising this successor state axiom for 
\begin_inset Formula $K$
\end_inset

 is the main aim of this paper.
\end_layout

\begin_layout Section
New Semantics for Knowledge
\end_layout

\begin_layout Subsection
Awareness of Actions
\end_layout

\begin_layout Standard
The existing accounts of knowledge presented above all employ an assumption
 about when an agent is aware of the occurance of an action - either 
\begin_inset Quotes eld
\end_inset

agents are always aware of actions
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

agents are only aware of actions that they themselves perform
\begin_inset Quotes erd
\end_inset

.
 We replace such assumptions with a question: 
\begin_inset Quotes eld
\end_inset

when will an agent be aware of the occurance of an action?
\begin_inset Quotes erd
\end_inset

.
 By providing a way to answer this question within the theory of action,
 a more general account of knowledge is obtained.
\end_layout

\begin_layout Standard
Another distinguished fluent is introduced, akin to 
\begin_inset Formula $Poss$
\end_inset

 but describing when actions will be observed by agents: 
\begin_inset Formula $CanObs(agt,a,s)$
\end_inset

 indicates that agent 
\begin_inset Formula $agt$
\end_inset

 would be able to observe action 
\begin_inset Formula $a$
\end_inset

 being performed in situation 
\begin_inset Formula $s$
\end_inset

.
 We assume that this 
\begin_inset Quotes eld
\end_inset

awareness
\begin_inset Quotes erd
\end_inset

 is generated by some lower-level component of the agent's software.
 The important point is: if the agent is not aware that the action occurred,
 it must not have occurred.
 The axiomatisation of this predicate, like that of 
\begin_inset Formula $Poss$
\end_inset

, is the responsibility of the domain modeller.
\end_layout

\begin_layout Standard
There is a related assumption implicit in the handling of sensing actions:
 that only the agent performing a sensing action is aware of its result.
 Such a restriction is common in the real world, but certainly not universal.
 Consider an agent waiting for a train who activates a speaker to acquire
 information about when it will arive.
 The results of this sensing action would be available to any other agents
 within earshot.
 We add an analogous predicate 
\begin_inset Formula $CanSense(agt,a,s)$
\end_inset

 to indicate when the sensing information resulting from an action is available
 to an agent.
\end_layout

\begin_layout Standard
Since we will often want to compare what is observed by an agent in different
 situations, we define the predicate 
\begin_inset Formula $Observations(agt,o,c,s)$
\end_inset

 such that 
\begin_inset Formula $o$
\end_inset

 contains precisely the 
\begin_inset Formula $<action,result>$
\end_inset

 pairs that would be available to agent 
\begin_inset Formula $agt$
\end_inset

 if the concurrent actions 
\begin_inset Formula $c$
\end_inset

 were performed in situation 
\begin_inset Formula $s$
\end_inset

 .
 (TODO: sort for observations)
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Observations(agt,o,c,s)\equiv\forall a,r\,\left[<a,r>\in o\equiv\right.\\
\wedge a\in c\wedge CanObs(agt,a,s)\\
\wedge\,\left(CanSense(agt,a,s)\wedge SR(a,s)=r\right.\\
\left.\vee\,\left.\neg CanSense(agt,a,s)\wedge r="?"\right)\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Like their counterpart 
\begin_inset Formula $Poss$
\end_inset

, 
\begin_inset Formula $CanObs$
\end_inset

 and 
\begin_inset Formula $CanSense$
\end_inset

 may suffer from interaction problems when concurrent actions are considered
 - for example, one agent moving in front of another may mean the second
 agent's actions are no longer observable\SpecialChar \@.
 While we are confident an approach
 similar to that used for the precondition interaction problem can be applied,
 this remains an open problem.
\end_layout

\begin_layout Subsection
Successor State Axiom for 
\begin_inset Formula $K$
\end_inset


\end_layout

\begin_layout Standard
What, then, are the considerations required for the successor state axiom
 of 
\begin_inset Formula $K$
\end_inset

 for any particular agent? Generalising the considerations of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

 and 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

, situations considered possible must:
\end_layout

\begin_layout Itemize
be successors to situations previously considered possible by the agent
 
\end_layout

\begin_layout Itemize
be possible according to 
\begin_inset Formula $Poss$
\end_inset

 
\end_layout

\begin_layout Itemize
agree on all actions that the agent observed to occur 
\end_layout

\begin_layout Itemize
agree with all sensing results that the agent observed 
\end_layout

\begin_layout Itemize
admit the possibility of a sequence of actions that was totally unobservable
 by the agent 
\end_layout

\begin_layout Standard
As the resulting sucessor state axiom will be quite complex, we introduce
 it a piece at a time using abbreviations.
 First, let us define what it means for two situations to agree on observations:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\isdef\\
\exists o\, Observations(agt,o,c,s)\wedge Observations(agt,o,c',s')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Next we define the abbreviation 
\begin_inset Formula $\mathbf{Unobs}(agt,s,s')$
\end_inset

, which will be true when 
\begin_inset Formula $agt$
\end_inset

 would not be aware of any of the actions leading from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Unobs}(agt,s,s''))\isdef\\
\forall a,c,s'\, s<do(c,s')\leq s''\rightarrow\\
a\notin c\vee\neg CanObs(agt,c,s')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
If the agent considers possible a situation 
\begin_inset Formula $s$
\end_inset

 then it must also consider possible any situation 
\begin_inset Formula $s'$
\end_inset

 such that 
\begin_inset Formula $\mathbf{Unobs}(s,s')$
\end_inset

, as it would be completely unaware of the world changing from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

.
 Also note that 
\begin_inset Formula $\mathbf{Unobs}(s,s)$
\end_inset

 is always true.
\end_layout

\begin_layout Standard
Finally, let us introduce an additional predicate 
\begin_inset Formula $Legal(s)$
\end_inset

, which states that a situation can legally be brough about in the world.
 For the moment, it suffices that the actions it contains be possible:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Legal(S_{0})\equiv True\\
Legal(do(c,s))\equiv Poss(c,s)\wedge Legal(s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
We then posit the following successor state axiom, capturing the considerations
 outlined above.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
\exists s',c'\, K(s',s)\wedge Legal(s'')\\
\wedge\,\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\\
\wedge\,\mathbf{Unobs}(do(c',s'),s'')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
This axiom is very similar in form to the axioms of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge,scherl03conc_knowledge,shapiro01casl_feat_inter}

\end_inset

, but takes into consideration a much broader range of factors.
 It remains to specify the truth of the 
\begin_inset Formula $K$
\end_inset

 fluent in the initial situation.
 Assuming that alternate initial situations are identified by the truth
 of 
\begin_inset Formula $K_{0}(s)$
\end_inset

 as in previous works, then the following suffices:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
K(s,S_{0})\equiv Legal(s)\wedge\exists s'\,\left[K_{0}(s')\wedge\mathbf{Unobs}(s',s)\right]\]

\end_inset


\end_layout

\begin_layout Subsection
Communication as Sensing
\end_layout

\begin_layout Standard
As observed previously, communication actions are typically built into the
 successor state axiom of the knowledge fluent.
 In our opinion, this unnecessarily complicates the semantics of knowledge
 and makes it more difficult to introduce additional communication actions.
 Our formulation provides a ready alternative - encode communication actions
 are sensing actions where both sender and recipient are aware of the outcome.
 Consider formulating the action 
\begin_inset Formula $informWhether$
\end_inset

 in this framework:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Poss(informWhether(agt_{1},agt_{2},\phi),s)\equiv\mathbf{KWhether}(agt_{1},\phi,s)\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(informWhether(agt_{2},agt_{3},\phi),s)=r\equiv\\
(r="YES"\wedge\phi[s])\,\vee\,(r="NO"\wedge\neg\phi[s])\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanObs(agt_{1},informWhether(agt_{2},agt_{3},\phi),s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanSense(agt_{1},informWhether(agt_{2},agt_{3},\phi),s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
The intended semantics of this communication action are now enforced by
 the general successor state axiom for 
\begin_inset Formula $K$
\end_inset

.
 (TODO: prove this).
\end_layout

\begin_layout Subsection
Fluent Change as Actions
\end_layout

\begin_layout Standard
In some domains, it may not be feasible for an agent to infer that a particular
 action has taken place based on its awareness of its environment.
 For example, suppose that an agent notices a light changing from dark to
 illuminated.
 While it knows that 
\emph on
some
\emph default
 action must have occured, it need not be aware of precisely which action
 took place.
 Indeed, some may argue that this is the most common case for agents operating
 in the physical world - they are not directly aware of actions, but of
 changes to fluents.
\end_layout

\begin_layout Standard
To model this, we introduce a special class of actions called 
\emph on
notifier actions.

\emph default
 The purpose of these actions is to inform agents that some property of
 the world has changed.
 We also modify what constitutes a legal situation, to enfore the following
 requirement: every notifier action occurs precisely when its corresponding
 condition has changed:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Legal(do(c,s))\equiv Legal(s)\wedge Poss(c,s)\wedge\forall a\,\left[notifier(a)\rightarrow a\in c\equiv\left(SR(a,s)\not\equiv SR(a,do(c,s))\right)\right]\]

\end_inset


\end_layout

\begin_layout Standard
By making agents aware of notifier actions that monitor the properties of
 the world that they are aware of, our account of knowledge can support
 reasoning in these types of domains (TODO: toy with this some more).
\end_layout

\begin_layout Section
Reasoning
\end_layout

\begin_layout Standard
As noted above, the fact that an agent may be unable to observe some actions
 taking place means that they must consider possible any situation brought
 about by such actions.This has deep implications for the agent's state of
 knowledge.
 If there are many actions that it cannot observe, it must consider possible
 a large number of situations and so may have difficulting arriving at knowledge
 of any fluent.
\end_layout

\begin_layout Standard
The standard approach to reasoning in the situation calculus 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

 involves the regression meta-operator 
\begin_inset Formula $\mathcal{R}$
\end_inset

.
 This operator takes a situation calculus formula refering to an aribtrary
 (ground) situation term 
\begin_inset Formula $do(c,s)$
\end_inset

, and transforms it into an equivalent formula that refers only to situation
 
\begin_inset Formula $s$
\end_inset

.
 By repreatedly applying this operator, a formula that refers only to the
 initial situation can be obtained.
 As it refers only to 
\begin_inset Formula $S_{0}$
\end_inset

, many of the axioms from the theory of action 
\begin_inset Formula $\Sigma$
\end_inset

 are not needed when reasoning about this formula.
 The regression approach is extended for knowledge in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, where it reduces a formula to one requiring modal reasoning about the
 intial situation only.
\end_layout

\begin_layout Standard
Unfortunately, regression cannot be applied to formulae that quantify over
 situations.
 Rather, a second-order induction axioms is required 
\begin_inset LatexCommand \cite{Reiter93proving}

\end_inset

, making such formulae problematic for automated reasoning.
 The appearance of the macro 
\begin_inset Formula $\mathbf{Unobs}$
\end_inset

 in equation (TODO) means that our new successor state axiom is not regressible
 using standard techniques.
 Instead, we must appeal to the idea of 
\begin_inset Quotes eld
\end_inset

persistence conditions
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
In a companion paper (TODO:cite ourselves) we show how to calculate the
 
\emph on
persistence condition
\emph default
 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 of a situation-suppressed formula 
\begin_inset Formula $\phi$
\end_inset

 with respect to actions satisfying conditions 
\begin_inset Formula $\alpha$
\end_inset

, such that:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathcal{P}(\phi,\alpha)[s]\equiv\forall s''\, s\leq s''\rightarrow\phi[s'']\vee\exists a,s'\, s<do(a,s')\leq s''\wedge\alpha(a,s)\]

\end_inset


\end_layout

\begin_layout Standard
The truth of 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 in a situation 
\begin_inset Formula $s$
\end_inset

 guarantees that, so long as no actions satisying 
\begin_inset Formula $\alpha$
\end_inset

 occur, the formula 
\begin_inset Formula $\phi$
\end_inset

 will remain true in all situations in the future of 
\begin_inset Formula $s$
\end_inset

.
 Like the regression operator 
\begin_inset Formula $\mathcal{R}$
\end_inset

, 
\begin_inset Formula $\mathcal{P}$
\end_inset

 is a meta-operator that transforms situation calculus formulae rather than
 a predicate in the language.
 The procedure for determinig 
\begin_inset Formula $\mathcal{P}$
\end_inset

 replaces second-order induction with iterated first-order reasoning.
\end_layout

\begin_layout Standard
By having 
\begin_inset Formula $\alpha$
\end_inset

 single out observable actions, the persistence condition can be used to
 guarantee that 
\begin_inset Formula $\phi$
\end_inset

 will not be falsified without the agent being aware of it.
 Combined with the techniques for regressing knowledge of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, this can be used to regress the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 operator to knowledge persistence in the initial situation.
\end_layout

\begin_layout Standard
Assume that the 
\begin_inset Formula $K$
\end_inset

 fluent is only used in the context of a 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 operator.
 Then:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,do(c,s))\equiv\forall s''\, K(s'',do(c,s))\rightarrow\phi[s'']\]

\end_inset


\end_layout

\begin_layout Standard
Employing the SSA for 
\begin_inset Formula $K$
\end_inset

 gives:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\forall s''\{\exists s',c'\, K(s',s)\wedge Legal(s'')\\
\wedge\,\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\\
\wedge\,\mathbf{Unobs}(do(c',s'),s'')\}\,\rightarrow\phi[s'']\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Rearranging to put 
\begin_inset Formula $s'$
\end_inset

 in the leading quantifier gives:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall c',s''\,\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\\
\wedge\, Legal(s'')\wedge\mathbf{Unobs}(do(c',s'),s'')\,\rightarrow\,\phi[s'']\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Pushing quantification over 
\begin_inset Formula $s''$
\end_inset

 further into the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall c'\,\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\rightarrow\\
\{\forall s''\, Legal(s'')\wedge\mathbf{Unobs}(do(c',s'),s'')\,\rightarrow\,\phi[s'']\}\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Suppose that 
\begin_inset Formula $\alpha$
\end_inset

 singles out precisely legal, unobservable actions (TODO: define it properly),
 then by the definition of the persistence condition operator: (TODO: define
 two-place legality predicate)
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(e,s))\equiv\forall s'\,\, K(s',s)\rightarrow\\
\{\forall c'\,\mathbf{AgreeOnObs}(agt,do(c',s'),do(c,s))\wedge Legal(do(c',s'))\rightarrow\mathcal{P}(\phi,\alpha)[do(c',s')]\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Substituting in the definition for 
\begin_inset Formula $\mathbf{AgreeOnObs}$
\end_inset

 and moving the parts that dont involve 
\begin_inset Formula $e'$
\end_inset

 or 
\begin_inset Formula $s'$
\end_inset

 outside the quantification:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\exists o\, Observations(agt,o,c,s)\\
\wedge\forall s'\,\, K(s',s)\rightarrow\\
\{\forall c'\, Observations(agt,o,c',s')\wedge Legal(c',s')\rightarrow\mathcal{P}(\phi,\alpha)[do(c',s')]\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
By applying the regression operator, the sentence within the scope of quantifica
tion over 
\begin_inset Formula $c'$
\end_inset

 can be made uniform in 
\begin_inset Formula $s'$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\exists o\, Observations(agt,o,c,s)\\
\wedge\forall s'\,\, K(s',s)\rightarrow\\
\{\forall c'\, Observations(agt,o,c',s')\wedge Legal(c',s')\rightarrow\mathcal{R}(\mathcal{P}(\phi,\alpha)[do(c',s')])\}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
The quantification over 
\begin_inset Formula $s'$
\end_inset

 now matches the form of the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

operator, so we can insert it back into the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(\phi,do(c,s))\equiv\exists o\, Observations(agt,o,c,s)\\
\wedge\mathbf{Knows}(\forall c'\, Observations(agt,o,c')\wedge Legal(c')\rightarrow\mathcal{R}(\mathcal{P}(\phi,\alpha)[do(c',s')])^{-1},s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
(TODO: replace 
\begin_inset Formula $^{-1}$
\end_inset

 notation) We have thus reduced reasoning about knowledge in 
\begin_inset Formula $do(c,s)$
\end_inset

 to reasoning about knowledge in 
\begin_inset Formula $s$
\end_inset

.
 This is precisely the behavior required by the regression operator.
 TODO: formalise, refer back to other clauses
\end_layout

\begin_layout Standard
Additional care must be taken when dealing with knowledge in the initial
 situation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s'\,\{\exists s\, K_{0}(s)\wedge Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
By a straightforward transformation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\{\forall s'\, Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\mathcal{P}(\phi,\alpha)[s]\]

\end_inset


\end_layout

\begin_layout Standard
This is standard modal reasoning over the 
\begin_inset Formula $K_{0}$
\end_inset

 relation, as employed by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 for determining knowledge in the initial situation.
\end_layout

\begin_layout Section
Properties of Knowledge
\end_layout

\begin_layout Standard
TODO: use the properties developed in other accounts, to show that this
 still works as required.
 Such as:
\end_layout

\begin_layout Itemize
Memory 
\end_layout

\begin_layout Itemize
Persistance of Ignorance 
\end_layout

\begin_layout Itemize
Preservation of reflexivity, transitivity, symmetry etc (these will only
 be preserved among legal situations, but we make no requirement that 
\begin_inset Formula $do(e,s)$
\end_inset

 be legal...) 
\end_layout

\begin_layout Itemize
Knowledge incorporation (including for communication actions) 
\end_layout

\begin_layout Itemize
inability to know things that might change without it noticing 
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Section
TODO
\end_layout

\begin_layout Itemize
formalise the idea of 
\begin_inset Quotes eld
\end_inset

theory of action
\begin_inset Quotes erd
\end_inset

 and entailment etc as done in KiA, generally be more rigourous 
\end_layout

\begin_layout Itemize
Talk about the requirements for knowledge - e.g.
 symmetry, reflexivity - that we require for this to be reasonable.
 
\end_layout

\begin_layout Itemize
Work in Init(s) as a substitute for S0 
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[named]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
