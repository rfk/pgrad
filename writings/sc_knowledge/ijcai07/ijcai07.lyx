#LyX 1.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{ijcai07}
\usepackage{times}
\usepackage{helvet}
\usepackage{courier}
\usepackage{amsthm}
\usepackage{amsthm}

\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}

\newtheorem{theorem}{Theorem}

\makeatother
\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title
Multi-Agent Knowledge in the Situation Caluclus with Partial Awareness of
 Actions
\end_layout

\begin_layout Author
Ryan Kelly and Adrian Pearce
\newline
Department of Computer Science and Software
 Engineering
\newline
NICTA Victoria Laboratory
\newline
The University of Melbourne
\newline
Victoria,
 3010, Australia
\newline
{rfk,adrian}@csse.unimelb.edu.au
\end_layout

\begin_layout Abstract
We develop significant improvements to the existing accounts of knowledge
 in the situation calculus.
 Situation calculus models of multi-agent domains typically make one of
 two assumptions: that all agents are aware of all actions that have been
 performed, or that each agent is completely ignorant of the actions performed
 by others.
 By explicitly axiomatising the conditions under which agents will be aware
 of the occurance of actions, we develop an enhanced account of knowledge
 that can model a wider variety of domains.
 We show that our approach can naturally model agents who passively monitor
 aspects of their environment.
 We also develop a generalised account of communication as sensing actions.
 Finally, we show how to reason effectively in this formalism by extending
 the regression operator to accomodate limited forms of quantification over
 situations.
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The situation calculus 
\begin_inset LatexCommand \cite{McCHay69sitcalc,pirri99contributions_sitcalc}

\end_inset

 is one of the most popular formalisms for reasoning about dynamic worlds.
 Since its inception, many extensions have been proposed to enrich its ontology
 with concepts such as knowledge 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 and concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 These extensions can be combined to provide a rich formalism for modelling
 multi-agent domains.
\end_layout

\begin_layout Standard
An almost universal assumption when working with the situation calculus
 is that agents are fully aware of the actions that have been performed
 in the world.
 Indeed, the very notion of 'situation' is formalised as a history of all
 actions that have occured.
 While agents may be unsure about precisely what 
\emph on
state
\emph default
 the world started out in, they are never unsure of precisely what has happened
 since then.
 In the rare cases that this assumption is not used (e.g.
 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

), the opposing extreme is typically posited - that agents are completely
 unaware of any actions that they did not themselves perform.
 Both of these assumptions are unrealistic in many real-world domains.
\end_layout

\begin_layout Standard
To further the current promising work on multi-agent systems in the situation
 calculus (such as 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

), we develop an enhanced account of knowledge that spans these two extremes.
 We axiomatise the conditions under which an agent will be aware of the
 occurance of an action, and use this to develop an account of knowledge
 with partial awareness of actions.
 The common assumptions discussed above - total awareness and total ignorance
 - are special cases of this general approach.
\end_layout

\begin_layout Standard
In some domains, it may be infeasible for agents to determine what actions
 have occured outside their immediate control.
 Instead, they may be aware simply that the values of certain fluents have
 changed.
 By including a special class of actions that notify agents about fluent
 change, we show that such domains can be easily accomodated by our formalism.
\end_layout

\begin_layout Standard
Multi-agent systems almost invariably require communication between agents,
 typically represented by explicit communication actions.
 Such actions are intricately connected with the knowledge states of the
 agents involved, and existing accounts of knowledge such as 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 include them explicitly in the dynamics of knowledge change.
 However, it should not be necessary to alter such fundamental axioms to
 add or modify communication actions.
 Using our generalised account of knowledge we propose an account of communicati
on actions as sensing, allowing new communication actions to be introduced
 with ease.
\end_layout

\begin_layout Standard
Our new semantics of knowledge utilises quantification over situation terms,
 which is traditionally a problem for automated reasoning.
 We show that the standard tool for efficient reasoning in the situation
 calulus - the regression operator of 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

 - can be extended to handle our new semantics.
\end_layout

\begin_layout Section
The Situation Calculus for Multi-Agent Domains
\end_layout

\begin_layout Standard
We work in a version of the the situation calculus as described in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

, enriched with concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

 to more realistically represent the dynamics of a multi-agent system.
 We use the approach of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 for representing multiple agents, and begin from the standard account of
 knowledge given by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge,scherl03conc_knowledge}

\end_inset

.
 A brief overview is given below.
\end_layout

\begin_layout Standard
There are a number of additional extensions to the situation calculus that
 are useful for modelling multi-agent domains, in particular explicit time
 and natural actions as described in 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

.
 These extensions are compatible with our approach, and have been excluded
 from this paper largely for space reasons.
\end_layout

\begin_layout Standard
The situation calculus is a many-sorted language of first-order logic, augmented
 with a second-order induction axiom.
 Its has the following types: 
\noun on
Agent
\noun default
 terms (variables 
\begin_inset Formula $agt_{y}^{x}$
\end_inset

) represent the agents operating in the world; 
\noun on
Action
\noun default
 terms (variables 
\begin_inset Formula $a_{y}^{x}$
\end_inset

) represent individual instantaneous events that can cause the state of
 the world to change; 
\noun on
Concurrent
\noun default
 terms (variables 
\begin_inset Formula $c_{y}^{x}$
\end_inset

) are sets of actions that occur simultaneously; 
\noun on
Situation
\noun default
 terms (variables 
\begin_inset Formula $s_{y}^{x}$
\end_inset

) are histories of the concurrent actions that have occured in the world,
 with the initial situation represented by 
\begin_inset Formula $S_{0}$
\end_inset

 and successive situations built up using the function 
\begin_inset Formula $do\,:\, Concurrent\times Situation\rightarrow Situation$
\end_inset

; 
\noun on
Result
\noun default
 terms (variables 
\begin_inset Formula $r_{y}^{x}$
\end_inset

) represent sensing results returned by actions, and are written inside
 double-quotes; 
\noun on
Object
\noun default
 terms (variables 
\begin_inset Formula $obj_{y}^{x}$
\end_inset

) represent any other object in the domain.
 We also distinguish 
\noun on
Fluents
\noun default
 as predicates or functions representing properties of the world that may
 change from one situation to another.
 Fluents take a situation term as their final argument.
\end_layout

\begin_layout Standard
A collection of situation calculus statements that describe the behavour
 of a dynamic world is referred to as a 
\emph on
theory of action
\emph default
 and is typically represented by 
\begin_inset Formula $\Sigma$
\end_inset

.
 The theory of action contains several special classes of statements, as
 outlined in the following sections.
\end_layout

\begin_layout Subsection
Action Precondition Axioms
\end_layout

\begin_layout Standard
There is a distinguished fluent predicate 
\begin_inset Formula $Poss(a,s)$
\end_inset

 that indicates when it is possible to perform an action in a given situation.
 For example, it is only possible for an agent to drop an object if they
 are holding it:
\begin_inset Foot
status collapsed

\begin_layout Standard
We follow the convention that lower-case variables are implicitly universally
 quantified
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Poss(drop(agt,obj),s)\leftrightarrow holding(agt,obj,s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For concurrent actions, an arbitrary combination of actions 
\begin_inset Formula $\{ a_{1},a_{2}\}$
\end_inset

 is not guaranteed to be possible.
 While the actions 
\begin_inset Formula $moveTo(Chair)$
\end_inset

 and 
\begin_inset Formula $moveTo(Table)$
\end_inset

 may individually be possible, performing them concurrently clearly is not.
 This is known as the precondition interaction problem 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

 and is an area of ongoing research.
 A simple solution is to explicitly state which actions cannot be performed
 together using a predictae 
\begin_inset Formula $Conflicts$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Poss(c,s)\leftrightarrow\forall a\left[a\in c\rightarrow Poss(a,s)\right]\wedge\neg Conflicts(c,s)\]

\end_inset


\end_layout

\begin_layout Standard
For this work, we make no particular commitment about the form of solution
 to this problem.
\end_layout

\begin_layout Subsection
Successor State Axioms
\end_layout

\begin_layout Standard
The truth of the various fluents is specified by defining what is true of
 the initial situation, and collecting the effects of various actions into
 
\emph on
successor state axioms
\emph default
.
 Such axioms provide a general solution to the infamous frame problem 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

.
 They have the general form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
F(\overrightarrow{x},do(c,s))\leftrightarrow\Gamma^{+}(\overrightarrow{x},c,s)\,\vee\, F(\overrightarrow{x},s)\wedge\neg\Gamma^{-}(\overrightarrow{x},c,s)\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $F$
\end_inset

 is a fluent with non-situation arguments 
\begin_inset Formula $\overrightarrow{x}$
\end_inset

, 
\begin_inset Formula $\Gamma^{+}$
\end_inset

 is a formula giving the conditions under which 
\begin_inset Formula $F$
\end_inset

 will become true, and 
\begin_inset Formula $\Gamma^{-}$
\end_inset

 a formula giving the conditions under which 
\begin_inset Formula $f$
\end_inset

 will become false.
 In words, these axioms state that 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $F$
\end_inset

 is true after doing actions 
\begin_inset Formula $c$
\end_inset

 if 
\begin_inset Formula $c$
\end_inset

 causes 
\begin_inset Formula $F$
\end_inset

 to become true, or 
\begin_inset Formula $F$
\end_inset

 is currently true and 
\begin_inset Formula $c$
\end_inset

 doesn't cause 
\begin_inset Formula $F$
\end_inset

 to become false.
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Communication
\end_layout

\begin_layout Standard
Inter-agent communication is typically modelled using special communication
 actions.
 Representative of this approach are the 
\begin_inset Formula $informWhether(agt_{1},agt_{2},\phi)$
\end_inset

 and 
\begin_inset Formula $informRef(agt_{1},agt_{2},\theta)$
\end_inset

 actions of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

, whereby 
\begin_inset Formula $agt_{1}$
\end_inset

 informs 
\begin_inset Formula $agt_{2}$
\end_inset

 about the truth of a formula or the referrent of a function respectively.
\end_layout

\begin_layout Subsection
Knowledge and Sensing
\end_layout

\begin_layout Standard
The semantics of knowledge in the situation calculus 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 are based on the popular 
\begin_inset Quotes eld
\end_inset

possible worlds
\begin_inset Quotes erd
\end_inset

 model.
 A knowledge fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 is used to indicate that 
\begin_inset Quotes eld
\end_inset

in situation 
\begin_inset Formula $s$
\end_inset

, the agent 
\begin_inset Formula $agt$
\end_inset

 considers the alternate situation 
\begin_inset Formula $s'$
\end_inset

 to be possible
\begin_inset Quotes erd
\end_inset

.
 A knowledge operator 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 is then introduced as a macro:
\begin_inset Foot
status collapsed

\begin_layout Standard
Here and throughout the paper, 
\begin_inset Formula $\phi$
\end_inset

 represents a situation calculus formula containing a single situation term.
 
\begin_inset Formula $\phi[s]$
\end_inset

 is the result of replacing that situation term with 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(agt,\phi,s)\isdef\forall s'\, K(agt,s',s)\rightarrow\phi[s']\]

\end_inset


\end_layout

\begin_layout Standard
Thus, an agent knows something if it is true in all situations that the
 agent considers possible.
 This can be specialised with further macros, such as an agent knowing whether
 or not some formula holds:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{KWhether}(agt,\phi,s)\isdef\mathbf{Knows}(agt,\phi,s)\vee\mathbf{Knows}(agt,\neg\phi,s)\]

\end_inset


\end_layout

\begin_layout Standard
To allow actions to return sensing information, the sensing result function
 
\begin_inset Formula $SR(a,s)$
\end_inset

 is introduced which gives the result returned by the action 
\begin_inset Formula $a$
\end_inset

 when exectued in a situation 
\begin_inset Formula $s$
\end_inset

.
 This is defined by sensing result axioms of the form:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
SR(a(\overrightarrow{x}),s)=r\equiv\phi_{a}(\overrightarrow{x},r,t,s)\]

\end_inset


\end_layout

\begin_layout Standard
For example, consider the action 
\begin_inset Formula $sense_{F}$
\end_inset

 which senses whether fluent 
\begin_inset Formula $F$
\end_inset

 is true or false.
 Its sensing result axiom would be given by:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(sense_{F},s)=r\equiv\\
(r="YES"\wedge F(s))\vee(r="NO"\wedge\neg F(s))\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
For actions that don't return sensing information, the value of 
\begin_inset Formula $SR$
\end_inset

 is set to some arbitrary constant such as 
\begin_inset Formula $"OK"$
\end_inset

.
\end_layout

\begin_layout Standard
Combining the multi-agent semantics of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 with the handling of concurrent actions in 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, the successor state axiom for the knowledge fluent is:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
\exists s'\,.\, s''=do(c,s')\,\wedge K(s',s)\wedge Poss(c,s')\\
\wedge\,\forall a\left[a\in c\wedge agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
In words, this states that 
\begin_inset Formula $s''$
\end_inset

 is considered a possible alternative to 
\begin_inset Formula $do(c,s)$
\end_inset

 when 
\begin_inset Formula $s''$
\end_inset

 is the result of doing the actions in 
\begin_inset Formula $c$
\end_inset

 in a situation 
\begin_inset Formula $s'$
\end_inset

 that is a possible alternative to 
\begin_inset Formula $s$
\end_inset

.
 The situation 
\begin_inset Formula $s''$
\end_inset

 must furthermore be possible, the sensing results must agree for all actions
 in 
\begin_inset Formula $c$
\end_inset

 that were carried out by the agent, and the situation must be consistent
 with what it has been informed by others.
\end_layout

\begin_layout Standard
Alternate possible worlds to the initial situation are identified by truth
 of the predicate 
\begin_inset Formula $K_{0}(s)$
\end_inset

.
 This allows the 
\begin_inset Formula $K$
\end_inset

 fluent to be fully specified, by asserting that:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
K(s,S_{0})\equiv K_{0}(s)\]

\end_inset


\end_layout

\begin_layout Standard
While a very powerful formalism, this successor state axiom still suffers
 from several limitations:
\end_layout

\begin_layout Itemize
Each agent must be aware of 
\emph on
all
\emph default
 actions that have occurred 
\end_layout

\begin_layout Itemize
The semantics of communication actions are tightly bound to the account
 of knowledge 
\end_layout

\begin_layout Standard
By adopting instead the form of successor state axiom proposed in 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

, we get the other extreme: agents are only aware of actions that they themselve
s perform:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
\exists s',s^{*},c'\,.\, s''=do(c',s^{*})\,\wedge K(s',s)\wedge Poss(c',s^{*})\\
\wedge\,\mathbf{ExoOnly}(agt,s',s^{*})\\
\wedge\,\forall a\left[agent(a)=agt\rightarrow a\in c'\equiv a\in c\right]\\
\wedge\,\forall a\left[a\in c\wedge agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\\
\wedge\,\forall agt_{2},\phi\left[informWhether(agt_{2},agt,\phi)\in c\rightarrow\phi[s']\equiv\phi[s]\right]\\
\wedge\,\forall agt_{2},\theta\left[informRef(agt_{2},agt,\theta)\in c\rightarrow\theta[s']=\theta[s]\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Where the macro 
\begin_inset Formula $\mathbf{ExoOnly}$
\end_inset

 indicates that two situations are conected only by actions performed by
 other agents:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{ExoOnly}(agt,s,s'')\isdef s\leq s''\wedge\forall s',c\left[s<do(c,s^{*})\leq s''\rightarrow\forall a\in c\, agent(a)\neq agt\right]\]

\end_inset


\end_layout

\begin_layout Standard
With this modified approach, agents consider possible any situation which
 agrees on the actions that they have performed.
 Importantly, there may have been an arbitrary sequence of situations between
 
\begin_inset Formula $s'$
\end_inset

 and 
\begin_inset Formula $s''$
\end_inset

 which the agent knew nothing about, because they consisted entirely of
 exogenous (from 
\begin_inset Formula $agt$
\end_inset

's point of view) actions.
 Again, there are limitations to this approach:
\end_layout

\begin_layout Itemize
Agents can 
\emph on
never
\emph default
 be aware of the actions performed by others 
\end_layout

\begin_layout Itemize
The semantics of communication actions are still tightly bound to the account
 of knowledge 
\end_layout

\begin_layout Itemize
After performing an action, the agent does not allow for the possibility
 that other agents have performed subsequent actions 
\end_layout

\begin_layout Standard
This last point involves some subtlety.
 Suppose that an agent 
\begin_inset Formula $agt$
\end_inset

 has just performed the action 
\begin_inset Formula $a_{1}$
\end_inset

, so the world is in some situation 
\begin_inset Formula $do(a_{1},s)$
\end_inset

.
 Another agent then performs the action 
\begin_inset Formula $a_{2}$
\end_inset

, leaving the world in the situation 
\begin_inset Formula $do(a_{2},do(a_{1},s))$
\end_inset

.
 However, 
\begin_inset Formula $agt$
\end_inset

 would not be aware that the state of the world has changed, so its set
 of possible situations should remain the same.
 Unfortunately, 
\begin_inset Formula $K(s',do(a_{2},do(a_{1},s)))\not\equiv K(s',do(a_{1},s))$
\end_inset

.
 To faithfully respect this aspect of the knowledge of agents in the real
 world, the successor state axiom for 
\begin_inset Formula $K$
\end_inset

 must permit any arbitrary future of 
\begin_inset Formula $do(a_{1},s)$
\end_inset

 that can be brought about entirely through exogenous actions.
\end_layout

\begin_layout Standard
We overcome these limitations with the development of an improved successor
 state axiom for 
\begin_inset Formula $K$
\end_inset

.
\end_layout

\begin_layout Section
New Semantics for Knowledge
\end_layout

\begin_layout Subsection
Awareness of Actions
\end_layout

\begin_layout Standard
The existing accounts of knowledge presented above all employ an assumption
 about when an agent is aware of the occurance of an action - either 
\begin_inset Quotes eld
\end_inset

agents are always aware of actions
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

agents are only aware of actions that they themselves perform
\begin_inset Quotes erd
\end_inset

.
 We replace such assumptions with a question: 
\begin_inset Quotes eld
\end_inset

when will an agent be aware of the occurance of an action?
\begin_inset Quotes erd
\end_inset

.
 By providing a way to answer this question within the theory of action,
 a more general account of knowledge is obtained.
\end_layout

\begin_layout Standard
Another distinguished fluent is introduced, akin to 
\begin_inset Formula $Poss$
\end_inset

 but describing when actions will be observed by agents: 
\begin_inset Formula $CanObs(agt,a,s)$
\end_inset

 indicates that agent 
\begin_inset Formula $agt$
\end_inset

 would be able to observe action 
\begin_inset Formula $a$
\end_inset

 being performed in situation 
\begin_inset Formula $s$
\end_inset

.
 We assume that in an implemented system this 
\begin_inset Quotes eld
\end_inset

awareness
\begin_inset Quotes erd
\end_inset

 is generated by some other component of the agent's software.
 The important point is that if 
\begin_inset Formula $CanObs(agt,a,s)$
\end_inset

 is true and action 
\begin_inset Formula $a$
\end_inset

 occurs, then 
\begin_inset Formula $agt$
\end_inset

 will be made aware of it.
 Likewise, if 
\begin_inset Formula $agt$
\end_inset

 is not aware that action 
\begin_inset Formula $a$
\end_inset

 occured, then it did not occur.
 The axiomatisation of this predicate, like that of 
\begin_inset Formula $Poss$
\end_inset

, is the responsibility of the domain modeller.
\end_layout

\begin_layout Standard
There is a related assumption implicit in the handling of sensing actions:
 that only the agent performing a sensing action is aware of its result.
 Such a restriction is common in the real world, but certainly not universal.
 Consider an agent waiting for a train who activates a speaker to acquire
 information about when it will arive.
 The results of this sensing action would be available to any other agents
 within earshot.
 We add an analogous predicate 
\begin_inset Formula $CanSense(agt,a,s)$
\end_inset

 to indicate when the sensing information resulting from an action is available
 to an agent.
\end_layout

\begin_layout Standard
Since we will often want to compare what is observed by an agent in different
 situations, we introduce a new sort for 
\emph on
sets of action-time pairs
\emph default
.
 We then define the function 
\begin_inset Formula $Observations(agt,c,s)$
\end_inset

 which returns precisely the set of 
\begin_inset Formula $<action,result>$
\end_inset

 pairs that 
\begin_inset Formula $agt$
\end_inset

 would be aware of if the concurrent actions 
\begin_inset Formula $c$
\end_inset

 were performed in situation 
\begin_inset Formula $s$
\end_inset

 .
 The special result term 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

 indicates that the result of an action was not available.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Observations(agt,c,s)=o\equiv\forall a,r\,\left[<a,r>\in o\equiv\right.\\
\wedge a\in c\wedge CanObs(agt,a,s)\\
\wedge\,\left(CanSense(agt,a,s)\wedge SR(a,s)=r\right.\\
\left.\vee\,\left.\neg CanSense(agt,a,s)\wedge r="?"\right)\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Like their counterpart 
\begin_inset Formula $Poss$
\end_inset

, 
\begin_inset Formula $CanObs$
\end_inset

 and 
\begin_inset Formula $CanSense$
\end_inset

 may suffer from interaction problems when concurrent actions are considered
 - for example, one agent moving in front of another may mean the second
 agent's actions are no longer observable\SpecialChar \@.
 While we are confident an approach
 similar to that used for precondition interaction can be applied, this
 remains an open problem.
\end_layout

\begin_layout Subsection
Successor State Axiom for 
\begin_inset Formula $K$
\end_inset


\end_layout

\begin_layout Standard
What, then, are the considerations required for the successor state axiom
 of 
\begin_inset Formula $K$
\end_inset

 for any particular agent? Generalising the considerations of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

 and 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

, situations considered possible must:
\end_layout

\begin_layout Itemize
be successors to situations previously considered possible by the agent
 
\end_layout

\begin_layout Itemize
be possible according to 
\begin_inset Formula $Poss$
\end_inset

 
\end_layout

\begin_layout Itemize
agree on all actions that the agent observed to occur 
\end_layout

\begin_layout Itemize
agree with all sensing results that the agent observed 
\end_layout

\begin_layout Itemize
admit the possibility of a sequence of actions that was totally unobservable
 by the agent 
\end_layout

\begin_layout Standard
As the resulting sucessor state axiom will be quite complex, we first introduce
 the abbreviation 
\begin_inset Formula $\mathbf{Unobs}(agt,s,s')$
\end_inset

, which is true when 
\begin_inset Formula $agt$
\end_inset

 would not be aware of any of the actions leading from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Unobs}(agt,s,s''))\isdef\\
\forall a,c,s'\, s<do(c,s')\leq s''\rightarrow\\
a\notin c\vee\neg CanObs(agt,a,s')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
If the agent considers possible a situation 
\begin_inset Formula $s$
\end_inset

 then it must also consider possible any situation 
\begin_inset Formula $s'$
\end_inset

 such that 
\begin_inset Formula $\mathbf{Unobs}(s,s')$
\end_inset

, as it would be completely unaware of the world changing from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

.
 Also note that 
\begin_inset Formula $\mathbf{Unobs}(s,s)$
\end_inset

 is always true.
\end_layout

\begin_layout Standard
Let us also introduce an additional predicate 
\begin_inset Formula $Legal(s)$
\end_inset

, which states that a situation can legally be brough about in the world.
 This facilitates the incorporation of additional extensions to the situation
 calculus, such as natural actions.
 For the moment, it suffices that it constrains actions to be possible:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Legal(S_{0})\equiv True\\
Legal(do(c,s))\equiv Poss(c,s)\wedge Legal(s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
We then posit the following successor state axiom, capturing the considerations
 outlined above.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
K(agt,s'',do(c,s))\equiv\\
Observations(agt,c,s)=\{\}\wedge K(agt,s'',s)\\
\vee\,\,\exists o\, Observations(agt,c,s)=o\wedge\\
o\neq\{\}\wedge Legal(s'')\wedge\\
\exists c',s'\, Observations(agt,c',s')=o\\
\wedge K(s',s)\wedge\mathbf{Unobs}(agt,do(c',s'),s'')\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Thus the agents consider possible any legal situation that agrees with what
 they have observed.
 It remains to specify the truth of the 
\begin_inset Formula $K$
\end_inset

 fluent in the initial situation.
 Assuming that alternate initial situations are identified by the truth
 of 
\begin_inset Formula $K_{0}(s)$
\end_inset

 as in previous works, then the following captures the intended semantics:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
K(s,S_{0})\equiv Legal(s)\wedge\exists s'\,\left[K_{0}(s')\wedge\mathbf{Unobs}(s',s)\right]\]

\end_inset


\end_layout

\begin_layout Standard
TODO: yack about how much better it is.
\end_layout

\begin_layout Standard
It is straightforward to verify the following properties of the 
\begin_inset Formula $K$
\end_inset

 relation:
\end_layout

\begin_layout Standard
* knowledge producing effects
\end_layout

\begin_layout Standard
* memory
\end_layout

\begin_layout Standard
* default persistence of ignorance
\end_layout

\begin_layout Standard
* ignorance of actions affected by unobservable actions
\end_layout

\begin_layout Standard
* persistence of transitivity, symmetriy, reflexivity, euclidianness
\end_layout

\begin_layout Standard
TODO: is it? then sit down with pen and paper and do so!
\end_layout

\begin_layout Subsection
Communication as Sensing
\end_layout

\begin_layout Standard
The traditional incorporation of communication actions directly into the
 successor state axiom for 
\begin_inset Formula $K$
\end_inset

 unnecessarily complicates the semantics of knowledge and makes it more
 difficult to introduce new communication actions.
 Our formulation provides a ready alternative - encode communication actions
 are sensing actions where both sender and recipient are aware of the outcome.
 Consider formulating the action 
\begin_inset Formula $informWhether$
\end_inset

 in this framework:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Poss(informWhether(agt_{1},agt_{2},\phi),s)\equiv\\
\mathbf{KWhether}(agt_{1},\phi,s)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
SR(informWhether(agt_{2},agt_{3},\phi),s)=r\equiv\\
(r="YES"\wedge\phi[s])\,\vee\,(r="NO"\wedge\neg\phi[s])\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanObs(agt_{1},informWhether(agt_{2},agt_{3},\phi),s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
CanSense(agt_{1},informWhether(agt_{2},agt_{3},\phi),s)\equiv\\
agt_{1}=agt_{2}\,\vee\, agt_{1}=agt_{3}\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
It is straightforward to show that the intended semantics of this communication
 are now enforced by the general successor state axiom for 
\begin_inset Formula $K$
\end_inset

.
 Only sender and recipient will be aware that the communication has occurred,
 and their state of knowledge will be updated to take into account the communica
ted truth/falsity of 
\begin_inset Formula $\phi$
\end_inset

 in accordance with 
\begin_inset Formula $SR$
\end_inset

.
\end_layout

\begin_layout Subsection
Awareness of Fluent Change
\end_layout

\begin_layout Standard
In some domains, it may not be feasible for an agent to infer that a particular
 action has taken place.
 For example, suppose that an agent passively monitors the state of a light
 bulb in its environment, such that it notices it changing from dark to
 illuminated.
 While it knows that 
\emph on
some
\emph default
 action must have occured, it need not be aware of precisely which action
 took place.
 Indeed, some may argue that this is the most common case for agents operating
 in the physical world - they are not directly aware of actions, but of
 changes to fluents.
\end_layout

\begin_layout Standard
To model this, we introduce a special class of actions called 
\emph on
change actions
\emph default
, whose sole purpose is to inform agents that some property of the world
 has changed.
 They can never be executed and so never appear in situation terms directly.
 Instead, they are included in the list of observations made by an agent
 by modifying the 
\begin_inset Formula $Observations$
\end_inset

 predicate:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
Observations(agt,c,s)=o\equiv\forall a,r\,\left[<a,r>\in o\equiv\right.\\
\wedge\left[a\in c\,\vee\, changeAction(a)\wedge SR(a,s)\neq SR(a,do(c,s))\right]\\
\wedge CanObs(agt,a,s)\\
\wedge\,\left(CanSense(agt,a,s)\wedge SR(a,s)=r\right.\\
\left.\vee\,\left.\neg CanSense(agt,a,s)\wedge r="?"\right)\right]\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
According to this defnition, change actions appear in the list of observations
 only when the corresponding sensing result changes in the resulting situation.
 By making agents aware of these actions using 
\begin_inset Formula $CanObs$
\end_inset

 and 
\begin_inset Formula $CanSense$
\end_inset

, our formalism neatly handles this form of environmental awareness.
\end_layout

\begin_layout Section
Reasoning
\end_layout

\begin_layout Standard
The standard approach to reasoning in the situation calculus 
\begin_inset LatexCommand \cite{reiter91frameprob}

\end_inset

 involves the regression meta-operator 
\begin_inset Formula $\mathcal{R}$
\end_inset

.
 This operator takes a situation calculus formula refering to a situation
 term 
\begin_inset Formula $do(c,s)$
\end_inset

 and transforms it into an equivalent formula that refers only to situation
 
\begin_inset Formula $s$
\end_inset

.
 By repreatedly applying this operator, a formula that refers only to 
\begin_inset Formula $S_{0}$
\end_inset

 can be obtained.
 As a result, many of the axioms from the theory of action 
\begin_inset Formula $\Sigma$
\end_inset

 are not needed when reasoning about this formula.
 The regression approach is employed for reasoning about knowledge in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, with the resulting formula requiring modal reasoning about the intial
 situation.
\end_layout

\begin_layout Standard
Unfortunately, regression cannot be applied to formulae that quantify over
 situations.
 A second-order induction axiom is required 
\begin_inset LatexCommand \cite{Reiter93proving}

\end_inset

, making such formulae problematic for automated reasoning.
 The appearance of the macro 
\begin_inset Formula $\mathbf{Unobs}$
\end_inset

 in equation (TODO) means that our new successor state axiom is not regressible
 using standard techniques.
 To permit an effective reasoning procedure, we appeal to the idea of 
\begin_inset Quotes eld
\end_inset

persistence conditions
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
In a companion paper (TODO:cite ourselves) we show how to calculate the
 
\emph on
persistence condition
\emph default
 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 of formula 
\begin_inset Formula $\phi$
\end_inset

 with respect to actions satisfying conditions 
\begin_inset Formula $\alpha$
\end_inset

, such that:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathcal{P}(\phi,\alpha)[s]\equiv\forall s''\, s\leq s''\rightarrow\phi[s'']\vee\exists a,s'\, s<do(a,s')\leq s''\wedge\alpha(a,s)\]

\end_inset


\end_layout

\begin_layout Standard
The truth of 
\begin_inset Formula $\mathcal{P}(\phi,\alpha)$
\end_inset

 in a situation 
\begin_inset Formula $s$
\end_inset

 guarantees that, as long as no actions satisying 
\begin_inset Formula $\alpha$
\end_inset

 occur, the formula 
\begin_inset Formula $\phi$
\end_inset

 will remain true in all situations in the future of 
\begin_inset Formula $s$
\end_inset

.
 Like the regression operator 
\begin_inset Formula $\mathcal{R}$
\end_inset

, 
\begin_inset Formula $\mathcal{P}$
\end_inset

 is a meta-operator that transforms situation calculus formulae rather than
 a predicate in the language.
 The procedure for determinig 
\begin_inset Formula $\mathcal{P}$
\end_inset

 replaces second-order induction with iterated first-order reasoning.
\end_layout

\begin_layout Standard
By having 
\begin_inset Formula $\alpha$
\end_inset

 single out observable actions, the persistence condition can be combined
 with the techniques for regressing knowledge of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

.
 Assume that the 
\begin_inset Formula $K$
\end_inset

 fluent appears only in the context of a 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro.
 Then:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\forall s''\, K(agt,s'',do(c,s))\rightarrow\phi[s'']\]

\end_inset


\end_layout

\begin_layout Standard
Employing equation (TODO: SSA for 
\begin_inset Formula $K$
\end_inset

 ) gives:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\forall s''\left(Observations(agt,c,s)=\{\}\wedge K(agt,s'',s)\right.\\
\vee\,\,\exists o\, Observations(agt,c,s)=o\wedge\\
o\neq\{\}\wedge Legal(s'')\wedge\\
\exists c',s'\, Observations(agt,c',s')=o\\
\left.\wedge K(s',s)\wedge\mathbf{Unobs}(agt,do(c',s'),s'')\right)\,\rightarrow\,\phi[s'']\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Folding the implication of 
\begin_inset Formula $\phi$
\end_inset

 inside the disjunction, this can be re-written as: 
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\forall s''\,\left(Observations(agt,c,s)=\{\}\wedge K(agt,s'',s)\rightarrow\phi[s'']\right)\\
\wedge\left(\exists o\, Observations(agt,c,s)=o\wedge\right.\\
o\neq\{\}\wedge Legal(s'')\wedge\\
\exists c',s'\, Observations(agt,c',s')=o\\
\left.\wedge K(s',s)\wedge\mathbf{Unobs}(agt,do(c',s'),s'')\,\rightarrow\,\phi[s'']\right)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
The quantification over 
\begin_inset Formula $s''$
\end_inset

 can then be pushed inside each of the conjuncts.
 Since 
\series bold

\begin_inset Formula $Observations(agt,c,s)$
\end_inset

 
\series default
is indepdentent of 
\begin_inset Formula $s''$
\end_inset

, it can be moved outside the quantification.
 Applying these (among other) observations, the equation can be further
 re-written:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\left(Observations(agt,c,s)=\{\}\rightarrow\forall s''\, K(agt,s'',s)\rightarrow\phi[s'']\right)\\
\wedge\left(\exists o\, Observations(agt,c,s)=o\wedge\right.\\
o\neq\{\}\rightarrow\forall s'\, K(s',s)\rightarrow\\
\forall c'\, Observations(agt,c',s')=o\rightarrow\\
\left.\forall s''\, Legal(s'')\wedge\mathbf{Unobs}(agt,do(c',s'),s'')\,\rightarrow\,\phi[s'']\right)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Note that both of these conjuncts now contain sub-formulae matching the
 form of the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro.
 It can thus be subtituted back in to give:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\left(Observations(agt,c,s)=\{\}\rightarrow\mathbf{Knows}(agt,\phi,s)\right)\\
\wedge\left(\exists o\, Observations(agt,c,s)=o\wedge\right.\\
\left.o\neq\{\}\rightarrow\mathbf{Knows}(agt,\mathbf{PK}(\phi,o),s)\right)\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
Where we have defined the abbreviation 
\begin_inset Formula $\mathbf{PK}(\phi,o)$
\end_inset

 as:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\begin{array}{c}
\mathbf{PK}(\phi,o)\isdef\forall c'\, Observations(agt,c',s')=o\rightarrow\\
\forall s''\, Legal(s'')\wedge\mathbf{Unobs}(agt,do(c',s'),s'')\,\rightarrow\,\phi[s'']\end{array}\]

\end_inset


\end_layout

\begin_layout Standard
However, for 
\begin_inset Formula $\mathbf{PK}(\phi,o)$
\end_inset

 to appear in the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro it must be uniform in the situation variable 
\begin_inset Formula $s'$
\end_inset

.
 This can be achieved using the regression and persistence operators.
 TODO: relation between Unobs and P.
\end_layout

\begin_layout Standard
TODO: this isnt finished yet...
\end_layout

\begin_layout Standard
We have thus reduced reasoning about knowledge in 
\begin_inset Formula $do(c,s)$
\end_inset

 to reasoning about knowledge in 
\begin_inset Formula $s$
\end_inset

.
 This is precisely the behavior required by the regression operator.
 TODO: formalise, refer back to other clauses
\end_layout

\begin_layout Standard
Additional care must be taken when dealing with knowledge in the initial
 situation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s'\,\{\exists s\, K_{0}(s)\wedge Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
By a straightforward transformation:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\{\forall s'\, Legal(s')\wedge\mathbf{Unobs}(s,s')\rightarrow\phi[s']\}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathbf{Knows}(\phi,S_{0})\equiv\forall s\, K_{0}(s)\rightarrow\mathcal{P}(\phi,\alpha)[s]\]

\end_inset


\end_layout

\begin_layout Standard
This is standard modal reasoning over the 
\begin_inset Formula $K_{0}$
\end_inset

 relation, as employed by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 for determining knowledge in the initial situation.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
In this paper we have significantly increased the scope of the situation
 calculus for modelling knowledge in multi-agent domains.
 TODO: talk ourselves up.
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[named]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
