#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass sig-alternate
\begin_preamble


\newcommand{\isdef}{\hbox{$\stackrel{\mbox{\tiny def}}{=}$}}
\end_preamble
\options letterpaper
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title
Knowledge and Observations in the Situation Calculus
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
numberofauthors{1
\end_layout

\end_inset


\end_layout

\begin_layout Author
\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
alignauthor Ryan F.
 Kelly
\backslash
titlenote{Currently a PhD student at the University of Melbourne.} and Adrian
 R.
 Pearce
\backslash

\backslash

\end_layout

\begin_layout Standard

%
\backslash
affaddr{NICTA Victoria Research Laboratory}
\backslash

\backslash

\end_layout

\begin_layout Standard

%
\backslash
affaddr{Department of Computer Science and Software Engineering}
\backslash

\backslash

\end_layout

\begin_layout Standard

%
\backslash
affaddr{The University of Melbourne}
\backslash

\backslash

\end_layout

\begin_layout Standard

%
\backslash
affaddr{Victoria, 3010, Australia}
\backslash

\backslash

\end_layout

\begin_layout Standard

%
\backslash
email{
\backslash
{rfk,adrian
\backslash
}@csse.unimelb.edu.au}
\end_layout

\begin_layout Standard

Paper 
\backslash
#125
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
We present a powerful new account of multi-agent knowledge in the situation
 calculus and an effective reasoning procedure for handling knowledge queries.
 Our approach is based on reifying the observations made by each agent as
 the world evolves, making it strictly more general than previous formalisms
 and flexible enough to handle the case where an agent can observe the effects
 of an action but not the occurrence of the action itself.
 By using the persistence condition meta-operator to augment traditional
 regression techniques, we allow agents to effectively reason about knowledge
 using only their internal history of observations, rather than requiring
 a full history of the world.
 The result is a more robust and flexible account of knowledge suitable
 for use in partially-observable multi-agent domains.
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The situation calculus 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

 is one of the most popular formalisms for reasoning about dynamic worlds.
 Many extensions have been proposed to incorporate concepts such as knowledge
 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 and concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

, which can be combined to provide a rich formalism for modeling complex
 domains such as multi-agent systems.
\end_layout

\begin_layout Standard
A common assumption when working with knowledge in the situation calculus
 is that agents are fully aware of all actions that have been performed.
 Indeed, the notion of `situation' is formalized as a history of all actions
 that have occurred.
 In the rare cases that this is not assumed, the opposing extreme is posited
 - that agents are completely ignorant of actions performed by others 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

.
 Neither approach accounts for the general case of 
\emph on
partial
\emph default
 awareness of actions.
 
\end_layout

\begin_layout Standard
For example, consider a package-processing domain where agents must move
 boxes throughout a building with several rooms.
 A perceptive agent is aware of actions performed in the room that it occupies,
 but not actions performed in other rooms.
 This has important implications for the agent's knowledge - it may know
 nothing about the status of a box located in another room, which could
 be modified by actions that the agent is not aware of.
 
\end_layout

\begin_layout Standard
To successfully model such domains, we reify (that is, treat as concrete
 objects in the logic) the notion of 
\emph on
observations.

\emph default
 The function 
\begin_inset Formula $Observations(agt,c,s)$
\end_inset

 is used to define what each agent will observe when the actions 
\begin_inset Formula $c$
\end_inset

 are performed in situation 
\begin_inset Formula $s$
\end_inset

, and we ensure that agents consider possible any situation compatible with
 what they have observed.
 Both the 
\begin_inset Quotes eld
\end_inset

total awareness
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

total ignorance
\begin_inset Quotes erd
\end_inset

 approaches can be modeled by appropriately axiomatizing the 
\begin_inset Formula $Observations$
\end_inset

 function, as can cases such as the example above that lie between these
 two extremes.
 The formalism can also be extended to model agents who can only observe
 the effects of actions, rather than observing the occurrence of actions
 directly.
 It is thus a true generalization of previous situation calculus approaches
 to knowledge.
\end_layout

\begin_layout Standard
For effective automated reasoning in the situation calculus, queries must
 be restricted to syntactic forms that allow the regression meta-operator
 to be applied 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

.
 Since our new semantics employs universal quantification over situations
 and so cannot be regressed using standard techniques, we develop a new
 regression rule for knowledge queries using the persistence condition meta-oper
ator 
\begin_inset LatexCommand \cite{kelly07sc_persistence}

\end_inset

.
 The result is a powerful new account of multi-agent knowledge that still
 permits an effective reasoning procedure.
\end_layout

\begin_layout Standard
Reasoning in the situation calculus traditionally requires an omniscient
 viewpoint, with queries posed relative to the current situation.
 While this works well for modeling and simulation where a full world history
 is available, it makes it difficult for agents to reason about their own
 world based on their limited observations of what has occurred.
 Our regression technique can be applied to the sequence of observations
 made by a single agent, rather than to a full situation term, facilitating
 reasoning from an internal viewpoint more appropriate for implementation
 in a multi-agent system.
 Our work thus has strong parallels with the classic view-based account
 of knowledge 
\begin_inset LatexCommand \cite{halpern90knowledge_distrib}

\end_inset

, but grounded in the situation calculus and with an emphasis on automated
 reasoning.
\end_layout

\begin_layout Standard
The paper is organized as follows: Section 
\begin_inset LatexCommand \ref{sec:ma-sitcalc}

\end_inset

 gives a brief introduction to the situation calculus with knowledge and
 concurrent actions, highlighting some limitations of current approaches;
 Section 
\begin_inset LatexCommand \ref{sec:New-Semantics}

\end_inset

 introduces the notion of observations, develops our new semantics for knowledge
, and offers a brief example; Section 
\begin_inset LatexCommand \ref{sec:Reasoning}

\end_inset

 extends the regression operator to handle knowledge queries, and shows
 how to reason using only local information; Section 
\begin_inset LatexCommand \ref{sec:Related-Work}

\end_inset

 explores related work and Section 
\begin_inset LatexCommand \ref{sec:Conclusions}

\end_inset

 concludes with a summary of our results.
\end_layout

\begin_layout Section
Multi-Agent Situation Calculus
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:ma-sitcalc}

\end_inset

Our work utilizes the situation calculus as described in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

, enriched with concurrent actions 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc}

\end_inset

 to better represent the dynamics of a multi-agent system.
 We use the standard approach found in 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 for representing multiple agents, and begin from the standard account of
 knowledge due to 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

.
 A brief overview is presented below.
\end_layout

\begin_layout Standard
The situation calculus is a many-sorted language of first-order logic augmented
 with a second-order induction axiom.
 Its has the following sorts: 
\noun on
Agent
\noun default
 terms represent the agents operating in the world; 
\emph on
\noun on
Action
\emph default
\noun default
 terms are functions denoting individual instantaneous events that can cause
 the state of the world to change, with the initiating agent indicated by
 their first argument; 
\noun on
Concurrent
\noun default
 terms are sets of actions that occur simultaneously; 
\noun on
Situation
\noun default
 terms are histories of the concurrent actions that have occurred in the
 world, with the initial situation represented by 
\begin_inset Formula $S_{0}$
\end_inset

 and successive situations built using the function 
\begin_inset Formula $do\,:\, Concurrent\times Situation\rightarrow Situation$
\end_inset

; 
\noun on
Result
\noun default
 terms represent sensing results returned by actions; 
\noun on
Object
\noun default
 terms represent any other object in the domain.
 It also distinguishes 
\emph on
fluents
\emph default
 as predicates or functions representing properties of the world that may
 change between situations, and so take a situation term as their final
 argument.
\end_layout

\begin_layout Standard
A 
\emph on
basic action theory
\emph default
 is a set 
\begin_inset Formula $\mathcal{D}$
\end_inset

 of situation calculus sentences (with a specific syntactic form as specified
 in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

) that describes a particular dynamic world.
 Queries about the behavior of the world are posed as logical entailment
 queries relative to this theory.
 It consists of the following disjoint sets: the foundational axioms of
 the situation calculus (
\begin_inset Formula $\Sigma$
\end_inset

); successor state axioms describing how fluents change between situations
 (
\begin_inset Formula $\mathcal{D}_{ss}$
\end_inset

); precondition axioms indicating when actions can be performed (
\begin_inset Formula $\mathcal{D}_{ap}$
\end_inset

); unique names axioms ensuring that action terms are distinct (
\begin_inset Formula $\mathcal{D}_{una}$
\end_inset

); and axioms describing the value of fluents in the initial situation (
\begin_inset Formula $\mathcal{D}_{S_{0}}$
\end_inset

):
\begin_inset Formula \[
\mathcal{D}=\Sigma\cup\mathcal{D}_{ss}\cup\mathcal{D}_{ap}\cup\mathcal{D}_{una}\cup\mathcal{D}_{S_{0}}\]

\end_inset


\end_layout

\begin_layout Standard
There is a distinguished fluent predicate 
\begin_inset Formula $Poss(a,s)$
\end_inset

 that indicates when it is possible to perform an action in a given situation.
 For example, it is only possible for an agent to drop an object if they
 are actually holding it:
\begin_inset Foot
status collapsed

\begin_layout Standard
We follow the convention that lower-case roman names indicate variables,
 with free variables being implicitly universally quantified.
\end_layout

\end_inset

 
\begin_inset Formula \[
Poss(drop(agt,obj),s)\equiv Holding(agt,obj,s)\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathcal{D}_{ap}$
\end_inset

 contains one 
\begin_inset Formula $Poss$
\end_inset

 axiom of the above form for each type of action.
 We also appeal to the more general notion of 
\emph on
action description predicates
\emph default
 as used in 
\begin_inset LatexCommand \cite{kelly07sc_persistence}

\end_inset

.
 These are predicates defined in the same manner as 
\begin_inset Formula $Poss$
\end_inset

 that describe some other aspect of the performance of an action.
 For example, we will define below an action description predicate 
\begin_inset Formula $CanObs$
\end_inset

 that specifies when an agent will observe the occurrence of an action.
\end_layout

\begin_layout Standard
\begin_inset Formula $Poss$
\end_inset

 is can be extended to concurrent actions as follows:
\begin_inset Formula \[
Poss(c,s)\equiv c\neq\{\}\,\wedge\,\forall a\,.\, a\in c\rightarrow Poss(a,s)\]

\end_inset


\end_layout

\begin_layout Standard
Unfortunately this is insufficient for domains where certain actions cannot
 be performed together, even if each action is possible individually.
 This is know as 
\emph on
precondition interaction 
\emph default
and can be addressed by several techniques that are well outside the scope
 of this paper 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc,pinto94temporal}

\end_inset

.
\end_layout

\begin_layout Standard
Situations form a tree structure with 
\begin_inset Formula $S_{0}$
\end_inset

 at the root and 
\begin_inset Formula $do$
\end_inset

 constructing child situations from parents.
 There is a basic ordering relation 
\begin_inset Formula $s\sqsubset s'$
\end_inset

 which should be read as 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $s'$
\end_inset

 is in the future of 
\begin_inset Formula $s$
\end_inset


\begin_inset Quotes erd
\end_inset

 and is defined as follows:
\begin_inset Formula \[
\neg\left(s\sqsubset S_{0}\right)\]

\end_inset


\begin_inset Formula \[
s\sqsubset do(c,s')\equiv s\sqsubseteq s'\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $s\sqsubseteq s'$
\end_inset

 is the standard abbreviation for 
\begin_inset Formula $s\sqsubset s'\vee s=s'$
\end_inset

.
 More generally, one may consider only those futures in which all actions
 satisfy a particular action description predicate 
\begin_inset Formula $\alpha$
\end_inset

 by using the 
\begin_inset Formula $<_{\alpha}$
\end_inset

 relation of 
\begin_inset LatexCommand \cite{kelly07sc_persistence}

\end_inset

:
\begin_inset Formula \[
\neg\left(s<_{\alpha}S_{0}\right)\]

\end_inset


\begin_inset Formula \[
s<_{\alpha}do(c,s')\equiv s\leq_{\alpha}s'\wedge\alpha(c,s')\]

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
legal situations
\emph default
 are those in which all actions were actually possible to perform in the
 preceding situation - that is, those situations 
\begin_inset Formula $s$
\end_inset

 that satisfy 
\begin_inset Formula $S_{0}\leq_{Poss}s$
\end_inset

.
 Legal situations are of such fundamental importance that 
\begin_inset Formula $\leq$
\end_inset

 is introduced as a shorthand for 
\begin_inset Formula $\leq_{Poss}$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\emph on
uniform formulae
\emph default
 as defined in 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

 can be thought of as 
\emph on
properties 
\emph default
of the state of the world.
 They are basically logical combinations of fluents referring to a common
 situation term, and cannot mention action description predicates nor compare
 situation terms.
 The meta-variable 
\begin_inset Formula $\phi$
\end_inset

 is used throughout to refer to an arbitrary uniform formula.
 It is often useful to determine the truth of a uniform formula at an alternate
 situation term, and 
\begin_inset Formula $\phi[s]$
\end_inset

 represents the uniform formula 
\begin_inset Formula $\phi$
\end_inset

 with all occurrences of its unique situation term replaced by the situation
 
\begin_inset Formula $s$
\end_inset

.
 Where no confusion can arise, we suppress the situation terms in uniform
 formulae to simplify the presentation.
\end_layout

\begin_layout Standard
The truth of a fluent is completely specified by defining its truth in the
 initial situation, and collecting the effects of the various actions into
 
\emph on
successor state axioms
\emph default
.
 Such axioms provide a monotonic solution to the infamous frame problem.
 They have the following general form, asserting the truth of a fluent 
\begin_inset Formula $F$
\end_inset

 in the successor situation 
\begin_inset Formula $do(c,s)$
\end_inset

 based on the current situation 
\begin_inset Formula $s$
\end_inset

 and the actions 
\begin_inset Formula $c$
\end_inset

 that were performed: 
\begin_inset Formula \[
F(\overrightarrow{x},do(c,s))\equiv\Phi(\overrightarrow{x},c,s)\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $\Phi$
\end_inset

 is a formula uniform in 
\begin_inset Formula $s$
\end_inset

.
 
\begin_inset Formula $\mathcal{D}_{ss}$
\end_inset

 contains one such axiom for each fluent.
\end_layout

\begin_layout Subsection
Knowledge and Sensing
\end_layout

\begin_layout Standard
The standard semantics of knowledge 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 are based on the popular 
\begin_inset Quotes eld
\end_inset

possible worlds
\begin_inset Quotes erd
\end_inset

 model.
 A knowledge fluent 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 is used to indicate that 
\begin_inset Quotes eld
\end_inset

in situation 
\begin_inset Formula $s$
\end_inset

, the agent 
\begin_inset Formula $agt$
\end_inset

 considers the alternate situation 
\begin_inset Formula $s'$
\end_inset

 to be possible
\begin_inset Quotes erd
\end_inset

.
 The macro 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 is then introduced as a shorthand for the standard possible-worlds definition
 of knowledge, stating that an agent knows something when it is true in
 all situations considered possible: 
\begin_inset Formula \begin{equation}
\mathbf{Knows}(agt,\phi,s)\,\isdef\,\forall s'\,.\, K(agt,s',s)\rightarrow\phi[s']\label{eqn:knows_def}\end{equation}

\end_inset

 To allow actions to return sensing information the sensing result function
 
\begin_inset Formula $SR(a,s)$
\end_inset

 is introduced, giving the result returned by the action 
\begin_inset Formula $a$
\end_inset

 when executed in situation 
\begin_inset Formula $s$
\end_inset

.
 For actions that don't return sensing information, the value of 
\begin_inset Formula $SR$
\end_inset

 is set to some arbitrary constant such as 
\begin_inset Formula $"OK"$
\end_inset

.
\end_layout

\begin_layout Standard
Combining the multi-agent semantics of 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

 with the handling of concurrent actions in 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

, the common form of successor state axiom for the knowledge fluent is:
\begin_inset Foot
status collapsed

\begin_layout Standard
Using the abbreviation 
\begin_inset Formula $\forall a\in c\,.\,\psi\,\,\isdef\,\,\forall a\,.a\in c\rightarrow\psi$
\end_inset


\end_layout

\end_inset

 
\begin_inset Formula \begin{multline}
K(agt,s'',do(c,s))\equiv\\
\exists s'\,.\, s''=do(c,s')\,\wedge K(agt,s',s)\wedge Poss(c,s')\\
\wedge\,\forall a\in c.\left[agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\label{eqn:k_ssa_standard}\end{multline}

\end_inset

 
\end_layout

\begin_layout Standard
The function 
\begin_inset Formula $agent(a)$
\end_inset

 is a convenient shorthand for extracting the agent performing an action.
 This successor state axiom ensures that 
\begin_inset Formula $s''$
\end_inset

 is considered a possible alternative to 
\begin_inset Formula $do(c,s)$
\end_inset

 when 
\begin_inset Formula $s''$
\end_inset

 is the result of doing those same actions 
\begin_inset Formula $c$
\end_inset

 in a situation 
\begin_inset Formula $s'$
\end_inset

 that is considered a possible alternative to 
\begin_inset Formula $s$
\end_inset

.
 It must furthermore have been possible to perform those actions in 
\begin_inset Formula $s'$
\end_inset

, and the sensing results must match for all actions in 
\begin_inset Formula $c$
\end_inset

 that were carried out by the agent.
\end_layout

\begin_layout Standard
It is also necessary to permit alternate possible worlds to the initial
 situation 
\begin_inset Formula $S_{0}$
\end_inset

, to represent incomplete initial knowledge.
 The predicate 
\begin_inset Formula $Init$
\end_inset

 identifies initial situations, and only other initial situations may be
 
\begin_inset Formula $K$
\end_inset

-related to an initial situation.
 We also talk of situations being 
\emph on
rooted at
\emph default
 some initial situation: 
\begin_inset Formula \begin{equation}
\begin{split} & Init(s)\rightarrow Root(s)=s\\
 & Root(do(c,s))=Root(s)\\
 & Init(s)\rightarrow\left(K(s',s)\rightarrow Init(s')\right)\end{split}
\label{eq:k_s0_standard}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
We introduce a notational shorthand to refer to this standard account of
 knowledge throughout the rest of the paper:
\end_layout

\begin_layout Definition
We will denote by 
\begin_inset Formula $\mathcal{D}_{Std}$
\end_inset

 a basic action theory 
\begin_inset Formula $\mathcal{D}$
\end_inset

 augmented with the standard 
\begin_inset Quotes eld
\end_inset

total awareness
\begin_inset Quotes erd
\end_inset

 account of knowledge from 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, as detailed in equations (
\begin_inset LatexCommand \ref{eqn:k_ssa_standard}

\end_inset

,
\begin_inset LatexCommand \ref{eq:k_s0_standard}

\end_inset

).
\end_layout

\begin_layout Standard
While powerful, this formulation has an important limitation: each agent
 is assumed to be aware of 
\emph on
all
\emph default
 actions that have occurred.
 Note that this awareness is passive - the agents perform no explicit sensing
 actions to determine what has occurred.
 Responsibility for generating such 
\begin_inset Quotes eld
\end_inset

awareness
\begin_inset Quotes erd
\end_inset

 in real systems is the responsibility of a lower-level software component,
 such as a continuous sensing system that identifies change in the environment
 and notifies the agent when an action occurs.
 While suitable for some domains, there are clearly many multi-agent domains
 where achieving total awareness of actions would be infeasible.
\end_layout

\begin_layout Standard
An alternate formulation from 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

 assumes the opposite extreme, that agents are only aware of the actions
 that they themselves perform:
\begin_inset Formula \begin{multline}
K(agt,s'',do(c,s))\equiv\\
\exists s',s^{*},c'\,.\, s''=do(c',s^{*})\,\wedge K(s',s)\wedge Poss(c',s^{*})\\
\wedge\,\mathbf{ExoOnly}(agt,s',s^{*})\\
\wedge\,\forall a\left[agent(a)=agt\rightarrow a\in c'\equiv a\in c\right]\\
\wedge\,\forall a\in c\left[agent(a)=agt\rightarrow SR(a,s)=SR(a,s')\right]\label{eqn:k_ssa_exo}\end{multline}

\end_inset

 Where the macro 
\begin_inset Formula $\mathbf{ExoOnly}$
\end_inset

 indicates that two situations are connected only by actions performed by
 other agents:
\begin_inset Formula \begin{multline*}
\mathbf{ExoOnly}(agt,s,s'')\,\,\isdef\,\, s\leq s''\wedge\\
\forall s',c,a\left[s<do(c,s')\leq s''\wedge a\in c\rightarrow agent(a)\neq agt\right]\end{multline*}

\end_inset

 Here agents consider possible any situation compatible with the actions
 that they themselves have performed.
 There may have been an arbitrary sequence of situations between 
\begin_inset Formula $s'$
\end_inset

 and 
\begin_inset Formula $s''$
\end_inset

 of which the agent was unaware, because they consisted entirely of exogenous
 actions.
\end_layout

\begin_layout Definition
We will denote by 
\begin_inset Formula $\mathcal{D}_{Exo}$
\end_inset

 a basic action theory 
\begin_inset Formula $\mathcal{D}$
\end_inset

 augmented with the 
\begin_inset Quotes eld
\end_inset

total ignorance
\begin_inset Quotes erd
\end_inset

 account of knowledge from 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

, as detailed in equations (
\begin_inset LatexCommand \ref{eqn:k_ssa_exo}

\end_inset

,
\begin_inset LatexCommand \ref{eq:k_s0_standard}

\end_inset

).
\end_layout

\begin_layout Standard
This approach is also limiting, in that agents can 
\emph on
never
\emph default
 be aware of the actions performed by others.
 Consider our example of agents occupying a building who are aware of all
 actions performed in the same room, or even the simple case of an agent
 being aware that another agent has collided with it - full generality requires
 that agents can be aware of 
\emph on
some
\emph default
 of the actions performed by others.
\end_layout

\begin_layout Standard
Furthermore, suppose that 
\begin_inset Formula $agt$
\end_inset

 has just performed action 
\begin_inset Formula $a_{1}$
\end_inset

, so the world is in some situation 
\begin_inset Formula $do(\{ a_{1}\},s)$
\end_inset

.
 Another agent then performs the action 
\begin_inset Formula $a_{2}$
\end_inset

, leaving the world in situation 
\begin_inset Formula $do(\{ a_{2}\},do(\{ a_{1}\},s))$
\end_inset

.
 Since it is not aware of the occurrence of 
\begin_inset Formula $a_{2}$
\end_inset

, 
\begin_inset Formula $agt$
\end_inset

 cannot be aware that the state of the world has changed.
 Its state of knowledge should therefore remain unchanged.
 Unfortunately this is not the case under this formulation:
\begin_inset Formula \begin{multline*}
\mathcal{D}_{Exo}\not\models agent(a_{2})\neq agt\rightarrow\\
K(agt,s',do(\{ a_{2}\},do(\{ a_{1}\},s)))\equiv K(agt,s',do(\{ a_{1}\},s))\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
To faithfully represent this aspect of knowledge, the successor state axiom
 for 
\begin_inset Formula $K$
\end_inset

 must consider any 
\emph on
future
\emph default
 that can be brought about by exogenous actions, rather than any 
\emph on
past
\emph default
 as done above.
\end_layout

\begin_layout Subsection
Regression
\end_layout

\begin_layout Standard
One of the attractions of the situation calculus is the existence of effective
 reasoning procedures for certain types of query.
 The principle tool is the regression meta-operator 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}$
\end_inset

 
\begin_inset LatexCommand \cite{pirri99contributions_sitcalc}

\end_inset

, a syntactic manipulation whose behavior can be summarized
\begin_inset Foot
status collapsed

\begin_layout Standard
The full behavior of 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}$
\end_inset

 is beyond the scope of this paper.
 See 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 for a detailed development of regression for handling knowledge queries.
 We follow their convention of using the single-step version of regression,
 rather than regressing to 
\begin_inset Formula $S_{0}$
\end_inset

 in a single pass.
\end_layout

\end_inset

 for our purposes as follows: it transforms a formula 
\begin_inset Formula $\phi$
\end_inset

 uniform in 
\begin_inset Formula $do(c,s)$
\end_inset

 into a formula 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}(\phi)$
\end_inset

 that is uniform in 
\begin_inset Formula $s$
\end_inset

 and is equivalent to 
\begin_inset Formula $\phi$
\end_inset

 under the theory of action 
\begin_inset Formula $\mathcal{D}$
\end_inset

:
\begin_inset Formula \[
\mathcal{D}\,\models\,\phi\equiv\mathcal{R}_{\mathcal{D}}(\phi)\]

\end_inset


\end_layout

\begin_layout Standard
It also replaces action description predicates such as 
\begin_inset Formula $Poss$
\end_inset

 with their appropriate definitions.
 If 
\begin_inset Formula $\phi$
\end_inset

 refers to a situation that is rooted at 
\begin_inset Formula $S_{0}$
\end_inset

, repeated applications of the regression operator (denoted by 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}^{*}$
\end_inset

) can transform it into an equivalent formula uniform in the initial situation.
 The successor state and action precondition axioms are 
\begin_inset Quotes eld
\end_inset

compiled in
\begin_inset Quotes erd
\end_inset

 and so are not required for answering the regressed query, making reasoning
 simpler:
\begin_inset Formula \begin{gather*}
\mathcal{D}\models\phi[do(c_{n},do(c_{n-1},\dots,do(c_{1},S_{0}))]\\
\mathrm{iff}\\
\mathcal{D}_{una}\cup\mathcal{D}_{S_{0}}\models\mathcal{R}_{\mathcal{D}}^{*}(\phi)[S_{0}]\end{gather*}

\end_inset


\end_layout

\begin_layout Standard
The trade-off is that the length of 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}^{*}(\phi)$
\end_inset

 may be exponential in the length of 
\begin_inset Formula $\phi$
\end_inset

.
 While an efficiency gain is not guaranteed, regression has proven a very
 effective technique in practice.
\end_layout

\begin_layout Standard
In 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, the regression operator is extended to handle the standard account of
 knowledge by reducing reasoning about formulae containing the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro to modal reasoning over the 
\begin_inset Formula $K$
\end_inset

 relation in the initial situation.
 This technique relies heavily on the fact that agents are aware of all
 actions, since formulae such as equation (
\begin_inset LatexCommand \ref{eqn:k_ssa_exo}

\end_inset

) that quantify over situations cannot be regressed.
 Indeed, 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach}

\end_inset

 offer no procedure for reasoning in their formalism other than second-order
 reasoning using the entire action theory.
 We believe the ability to regress knowledge queries to be the main reason
 for the near-ubiquity of the assumption of total awareness of actions.
\end_layout

\begin_layout Section
New Semantics of Knowledge
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:New-Semantics}

\end_inset


\end_layout

\begin_layout Subsection
Observations
\end_layout

\begin_layout Standard
Existing situation calculus accounts of knowledge all employ an assumption
 about when an agent is aware of an action occurring - either 
\begin_inset Quotes eld
\end_inset

agents are always aware of actions
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

agents are only aware of actions that they perform
\begin_inset Quotes erd
\end_inset

.
 A more general formalism requires a robust account of this notion of 
\begin_inset Quotes eld
\end_inset

awareness
\begin_inset Quotes erd
\end_inset

.
 To achieve this we introduce a distinction between 
\emph on
actions
\emph default
, which cause changes to the state of the world, and 
\emph on
observations
\emph default
, which cause an agent to become 
\emph on
aware
\emph default
 of some change in the state of the world.
\end_layout

\begin_layout Definition
An 
\emph on
observation
\emph default
 is a notification received by an agent that makes it aware of some change
 in the state of the world.
 When an agent receives such a notification, we say that it 
\begin_inset Quotes eld
\end_inset

observed
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

perceived
\begin_inset Quotes erd
\end_inset

 that observation.
\end_layout

\begin_layout Standard
For simplicity we assume that agents perceive observations instantaneously,
 i.e.
 in the same instant as the actions that led to them.
 We make no commitment as to how these notifications are generated, preferring
 a clean delineation between the task of observing change and the dynamics
 of knowledge update based on those observations.
 As with the work of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, generating awareness is the responsibility of a lower-level component
 of the agent's control software.
\end_layout

\begin_layout Standard
To demonstrate this idea let us introduce an additional sort 
\noun on
Observations
\noun default
 to the language of the situation calculus, for the moment without any particula
r commitment towards what this sort will contain.
 We then introduce the function 
\begin_inset Formula $Observations(agt,c,s)=o$
\end_inset

, returning a set of observations, to mean 
\begin_inset Quotes eld
\end_inset

when the actions 
\begin_inset Formula $c$
\end_inset

 are performed in situation 
\begin_inset Formula $s$
\end_inset

, agent 
\begin_inset Formula $agt$
\end_inset

 will make the observations 
\begin_inset Formula $o$
\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The concept of an 
\emph on
observation history
\emph default
 follows naturally - it is a sequence of all the observations made by an
 agent as the world has evolved.
 We introduce another sort 
\noun on
ObsHistories
\noun default
 consisting of sequences of sets of observations, with 
\begin_inset Formula $\epsilon$
\end_inset

 being the empty sequence, and the function 
\begin_inset Formula $ObsHist$
\end_inset

 giving the observation history associated with a particular situation:
\begin_inset Formula \begin{multline}
Init(s)\rightarrow ObsHist(agt,s)=\epsilon\\
\shoveleft{ObsHist(agt,do(c,s))=h\equiv}\\
\exists o\,.\, Observations(agt,c,s)=o\\
\shoveright{\wedge\,\left(o=\{\}\rightarrow h=ObsHist(agt,s)\right)}\\
\wedge\,\left(o\neq\{\}\rightarrow h=o\cdot ObsHist(agt,s)\right)\label{eqn:obshist_defn}\end{multline}

\end_inset


\end_layout

\begin_layout Standard
There is a strong analogue between situations and observation histories.
 A situation represents a complete, global history of all the actions that
 have occurred in the world, while an observation history is an agent's
 local history of all the observations it has made.
 The situation is an omniscient view of the world, the observation history
 a local view.
 As we shall see, this distinction is fundamental to developing a truly
 general multi-agent semantics for knowledge.
\end_layout

\begin_layout Subsection
Knowledge and Observation
\end_layout

\begin_layout Standard
In general, an agent's knowledge at any particular time must depend solely
 on its local history: the knowledge that it started out with combined with
 the observations it has made since then 
\begin_inset LatexCommand \cite{halpern90knowledge_distrib}

\end_inset

.
 Given an explicit account of the observations made by each agent, the required
 semantics of the 
\begin_inset Formula $K$
\end_inset

 relation are clear - 
\begin_inset Formula $K(agt,s',s)$
\end_inset

 must hold whenever 
\begin_inset Formula $s'$
\end_inset

 is legal and both 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $s'$
\end_inset

 would result in the same observation history for the agent:
\begin_inset Formula \begin{multline*}
\mathcal{D}\models K(agt,s',s)\equiv K(Root(s'),Root(s))\,\wedge\\
Root(s')\leq s'\,\wedge\, ObsHist(agt,s')=ObsHist(agt,s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
While a wonderfully succinct definition of how knowledge should behave,
 this formulation cannot be used directly in a basic action theory.
 Basic action theories require that the dynamics of fluent change be specified
 as a successor state axiom, so we must formulate a successor state axiom
 for the 
\begin_inset Formula $K$
\end_inset

 fluent which enforces the above relationship.
\end_layout

\begin_layout Standard
For notational convenience, let us first introduce an action description
 predicate 
\begin_inset Formula $PbU(agt,c,s)$
\end_inset

 (for 
\begin_inset Quotes eld
\end_inset

possible but unobservable
\begin_inset Quotes erd
\end_inset

) indicating that the actions 
\begin_inset Formula $c$
\end_inset

 are possible in 
\begin_inset Formula $s$
\end_inset

, but no observations will be made by the agent 
\begin_inset Formula $agt$
\end_inset

 if they are performed:
\begin_inset Formula \begin{multline}
PbU(agt,c,s)\equiv\\
Poss(c,s)\wedge Observations(agt,c,s)=\{\}\label{eq:PbU_defn}\end{multline}

\end_inset


\end_layout

\begin_layout Standard
By stating that 
\begin_inset Formula $s\leq_{PbU(agt)}s'$
\end_inset

 we assert that an agent would make no observations were the world to move
 from situation 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $s'$
\end_inset

.
 The two situations would be indistinguishable to the agent, so if it considers
 
\begin_inset Formula $s$
\end_inset

 possible then it must also consider 
\begin_inset Formula $s'$
\end_inset

 possible.
 Following this intuition, the successor state axiom below captures the
 desired dynamics of the knowledge fluent:
\begin_inset Formula \begin{multline}
K(agt,s'',do(c,s))\equiv\\
\shoveleft{\,\,\,\,\,\,\,\,\,\,\left[\, Observations(agt,c,s)=\{\}\rightarrow K(agt,s'',s)\,\right]}\\
\shoveleft{\,\,\wedge\,\,\,\left[\, Observations(agt,c,s)\neq\{\}\rightarrow\right.}\\
\exists c',s'\,.\, Observations(agt,c',s')=Observations(agt,c,s)\\
\left.\wedge\, Poss(c',s')\wedge K(agt,s',s)\wedge do(c',s')\leq_{PbU(agt)}s''\,\right]\label{eqn:new_k_ssa}\end{multline}

\end_inset

 
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $c$
\end_inset

 was totally unobservable, the agent's state of knowledge does not change.
 Otherwise, it considers possible any legal successor to a possible alternate
 situation 
\begin_inset Formula $s'$
\end_inset

 that can be brought about by actions 
\begin_inset Formula $c'$
\end_inset

 that result in identical observations.
 It also considers possible any future of such a situation in which is would
 make no more observations.
\end_layout

\begin_layout Standard
It remains to specify 
\begin_inset Formula $K$
\end_inset

 in the initial situation.
 Since situations where 
\begin_inset Formula $S_{0}\leq_{PbU(agt)}s$
\end_inset

 holds must be 
\begin_inset Formula $K$
\end_inset

-related to 
\begin_inset Formula $S_{0}$
\end_inset

, we introduce another relation 
\begin_inset Formula $K_{0}$
\end_inset

 to specify each agent's initial knowledge: 
\begin_inset Formula \begin{multline}
K_{0}(agt,s',s)\rightarrow Init(s')\wedge Init(s)\\
\shoveleft{Init(s)\rightarrow K(agt,s'',s)\equiv}\\
\exists s'\,.\, K_{0}(agt,s',s)\wedge s'\leq_{PbU(agt)}s'')\label{eqn:new_k_s0}\end{multline}

\end_inset

 These definitions suffice to ensure that knowledge behaves as we require.
\end_layout

\begin_layout Definition
We will denote by 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

 a basic action theory 
\begin_inset Formula $\mathcal{D}$
\end_inset

 augmented with our new observation-based semantics for knowledge, as detailed
 in equations (
\begin_inset LatexCommand \ref{eqn:obshist_defn}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:new_k_s0}

\end_inset

).
\end_layout

\begin_layout Theorem
\begin_inset LatexCommand \label{thm:k_obs_equiv}

\end_inset

 For any basic action theory 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

, any agent 
\begin_inset Formula $agt$
\end_inset

 and situations 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $s'$
\end_inset

:
\begin_inset Formula \begin{multline*}
\mathcal{D}\models K(agt,s',s)\equiv K(Root(s'),Root(s))\,\wedge\\
Root(s')\leq s'\,\wedge\, ObsHist(agt,s')=ObsHist(agt,s)\end{multline*}

\end_inset


\end_layout

\begin_layout Proof
Straightforward, using equations (
\begin_inset LatexCommand \ref{eqn:obshist_defn}

\end_inset

,
\begin_inset LatexCommand \ref{eq:PbU_defn}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:new_k_s0}

\end_inset

).
 
\end_layout

\begin_layout Standard
Using this new formulation, an agent's knowledge is completely decoupled
 from the global notion of actions, instead depending only on the local
 information that it has observed.
 It remains to specify precisely what the 
\noun on
Observations
\emph on
\noun default
 
\emph default
sort contains, and how the 
\begin_inset Formula $Observations()$
\end_inset

 function behaves.
\end_layout

\begin_layout Subsection
Axiomatizing Observations
\end_layout

\begin_layout Standard
Let us begin by considering the standard account of knowledge from 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

.
 Its basic assumption that 
\begin_inset Quotes eld
\end_inset

all agents are aware of all actions
\begin_inset Quotes erd
\end_inset

 may be rephrased as 
\begin_inset Quotes eld
\end_inset

when an action occurs, all agents will observe that action
\begin_inset Quotes erd
\end_inset

.
 Allowing the 
\noun on
Observations
\noun default
 sort to contain 
\noun on
Action
\noun default
 terms, this assumption is akin to the following assertion about the 
\begin_inset Formula $Observations()$
\end_inset

 function:
\begin_inset Formula \begin{equation}
a\in Observations(agt,c,s)\equiv a\in c\label{eq:ax_obs_std1}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
What about sensing information? We can extend the 
\noun on
Observations
\noun default
 sort to contain terms of the form 
\emph on

\begin_inset Formula $(Action=Result)$
\end_inset

 
\emph default
and axiomatize like so:
\begin_inset Formula \begin{multline}
(a=r)\in Observations(agt,c,s)\equiv\\
a\in c\wedge SR(a,s)=r\wedge agent(a)=agt\label{eq:ax_obs_std2}\end{multline}

\end_inset


\end_layout

\begin_layout Standard
Using these definitions, our new account of knowledge will behave identically
 to the standard account:
\end_layout

\begin_layout Theorem
For basic action theories 
\begin_inset Formula $\mathcal{D}_{Std}$
\end_inset

 and 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

 describing the same world, and where 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

 uses equations (
\begin_inset LatexCommand \ref{eq:ax_obs_std1}

\end_inset

,
\begin_inset LatexCommand \ref{eq:ax_obs_std2}

\end_inset

) to define the 
\begin_inset Formula $Observations()$
\end_inset

 function, then for any situations 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $s'$
\end_inset

:
\begin_inset Formula \[
\mathcal{D}_{Std}\models K(agt,s',s)\,\,\,\,\mathrm{iff}\,\,\,\,\mathcal{D}_{Obs}\models K(agt,s',s)\]

\end_inset


\end_layout

\begin_layout Proof
Equations (
\begin_inset LatexCommand \ref{eq:ax_obs_std1}

\end_inset

,
\begin_inset LatexCommand \ref{eq:ax_obs_std2}

\end_inset

) mean 
\begin_inset Formula $Observations(agt,c,s)$
\end_inset

 cannot be empty for non-empty 
\begin_inset Formula $c$
\end_inset

, so 
\begin_inset Formula $s\leq_{PbU(agt)}s'$
\end_inset

 iff 
\begin_inset Formula $s=s'$
\end_inset

.
 Equations (
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:new_k_s0}

\end_inset

) then amount to simple transformations of equations (
\begin_inset LatexCommand \ref{eqn:k_ssa_standard}

\end_inset

,
\begin_inset LatexCommand \ref{eq:k_s0_standard}

\end_inset

) respectively, meaning that 
\begin_inset Formula $K$
\end_inset

 behaves the same under both theories.
\end_layout

\begin_layout Standard
If we remove equation (
\begin_inset LatexCommand \ref{eq:ax_obs_std1}

\end_inset

), a similar result holds between 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

 and 
\begin_inset Formula $\mathcal{D}_{Exo}$
\end_inset

.
\end_layout

\begin_layout Standard
To generalize this for partial observability of actions we introduce a new
 action description predicate, akin to 
\begin_inset Formula $Poss$
\end_inset

 but describing when actions will be observed by agents: 
\begin_inset Formula $CanObs(agt,a,s)$
\end_inset

 indicates that agent 
\begin_inset Formula $agt$
\end_inset

 would observe action 
\begin_inset Formula $a$
\end_inset

 being performed in situation 
\begin_inset Formula $s$
\end_inset

.
 We can then formulate the 
\begin_inset Formula $Observations()$
\end_inset

 function according to:
\begin_inset Formula \[
a\in Observations(agt,c,s)\equiv a\in c\wedge CanObs(agt,a,s)\]

\end_inset


\end_layout

\begin_layout Standard
There is an additional assumption in the standard handling of sensing actions:
 only the agent performing a sensing action is aware of its result.
 Such a restriction is common but certainly not universal.
 For example, if an agent waiting for a train activates a speaker to determine
 when it will arrive, the result of this sensing action would be available
 to any other agent within earshot.
 We add an analogous predicate 
\begin_inset Formula $CanSense(agt,a,s)$
\end_inset

 to indicate when sensing information is available to an agent.
 We then include bare action terms in an agent's observations when it observes
 the action but not its result, and 
\emph on
(Action=Result)
\emph default
 terms when it also senses the result:
\begin_inset Formula \begin{multline*}
a\in Observations(agt,c,s)\equiv a\in c\\
\wedge CanObs(agt,a,s)\wedge\neg CanSense(agt,a,s)\end{multline*}

\end_inset


\begin_inset Formula \begin{multline*}
(a=r)\in Observations(agt,c,s)\equiv a\in c\wedge SR(a,s)=r\\
\wedge CanObs(agt,a,s)\wedge CanSense(agt,a,s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Like their counterpart 
\begin_inset Formula $Poss$
\end_inset

, 
\begin_inset Formula $CanObs$
\end_inset

 and 
\begin_inset Formula $CanSense$
\end_inset

 may suffer from interaction problems when concurrent actions are considered
 - for example, one action may alter the observability of another if performed
 concurrently.
 This is another instance of the precondition interaction problem 
\begin_inset LatexCommand \cite{reiter96sc_nat_conc,pinto94temporal}

\end_inset

 and is outside the scope of this paper.
\end_layout

\begin_layout Subsection
Observing the Effects of Actions
\end_layout

\begin_layout Standard
In many domains it would be infeasible for an agent to observe a particular
 action occurring, but it may be able to observe some of the effects of
 that action.
 For example, suppose that an agent monitors the state of a light in its
 environment, such that it notices it changing from dark to light.
 While it knows that 
\emph on
some
\emph default
 action must have occurred to produce that effect, it may not be sure precisely
 what action took place (e.g.
 precisely 
\emph on
who
\emph default
 turned on the light).
\end_layout

\begin_layout Standard
This can be modeled by further extending the 
\noun on
Observations
\noun default
 sort.
 Suppose that the observation term 
\begin_inset Formula $f_{\phi}$
\end_inset

 indicates that a particular property of the world 
\begin_inset Formula $\phi$
\end_inset

 has changed from false to true and (for simplicity) that this information
 would be available to all agents.
 The following could be used to include this information in an agent's observati
ons: 
\begin_inset Formula \begin{multline*}
f_{\phi}\in Observations(agt,c,s)\equiv\neg\phi[s]\wedge\mathcal{R}_{\mathcal{D}}(\phi[do(c,s)])\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Note that since we use 
\begin_inset Formula $Observations()$
\end_inset

 as an action description predicate in equation (
\begin_inset LatexCommand \ref{eq:PbU_defn}

\end_inset

), we must use regression to ensure that the right-hand side of this equivalence
 refers only to 
\begin_inset Formula $s$
\end_inset

.
 Expanding on the example of the light, we might have an axiom like this:
\begin_inset Formula \begin{multline*}
lightCameOn\in Observations(agt,c,s)\equiv\\
\neg lightIsOn(s)\wedge\exists agt2\,.\, turnLightOn(agt2)\in c\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
When the light is switched on, each agent's observations will contain the
 term 
\begin_inset Formula $lightCameOn$
\end_inset

, and they will know that this change has occurred without necessarily knowing
 the action responsible for the change.
 That this powerful new ability is a straightforward extension of our approach
 highlights the flexibility and robustness of the observation-based semantics.
\end_layout

\begin_layout Subsection
Illustrative Example
\end_layout

\begin_layout Standard
Consider again a package-processing facility where agents are required to
 move boxes between various rooms.
 There are three actions (pickUp, putDown, and goRoom) and two fluents (Holding
 and InRoom) whose meanings should be clear.
 There are no sensing actions.
 
\end_layout

\begin_layout Standard
Agents may pickup a box if they are in the same room and no-one is holding
 it.
 They can putdown a box they are holding at any time, and can move freely
 between rooms:
\begin_inset Formula \begin{multline*}
Poss(pickUp(agt,box),s)\equiv\neg\exists x\,.\, Holding(x,box,s)\\
\wedge\exists rm\,.\, InRoom(agt,rm)\wedge InRoom(box,rm)\end{multline*}

\end_inset


\begin_inset Formula \[
Poss(putDown(agt,box),s)\equiv Holding(agt,box,s)\]

\end_inset


\begin_inset Formula \[
Poss(goRoom(agt,room),s)\equiv true\]

\end_inset


\end_layout

\begin_layout Standard
An agent is holding a box if they picked it up, or were already holding
 it and didn't put it down:
\begin_inset Formula \begin{multline*}
Holding(agt,box,do(c,s))\equiv pickUp(agt,box)\in c\,\vee\\
Holding(agt,box,s)\wedge putdDown(agt,box)\not\in c\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
An object is in a room if it was taken there, or it was already in that
 room and it was not taken elsewhere:
\begin_inset Formula \begin{multline*}
InRoom(obj,rm,do(c,s))\equiv\exists agt\,.\, goRoom(agt,rm)\in c\wedge\\
\left[obj=agt\vee Holding(agt,obj,s)\right]\,\,\vee\\
InRoom(obj,rm,s)\wedge\neg\left(\exists agt,rm2\,.\, goRoom(agt,rm2)\in c\wedge\right.\\
\left.rm2\neq rm\wedge\left[obj=agt\vee Holding(agt,obj,s)\right]\right)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Agents can observe actions performed by an agent in the same room as themselves,
 and can observe agents entering their room:
\begin_inset Formula \begin{multline*}
CanObs(agt,a,s)\equiv\exists rm\,.\, InRoom(agt,rm)\wedge\\
\left(InRoom(agent(a),rm)\,\vee\,\exists agt2\,.\, a=goRoom(agt2,rm)\right)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Initially, Sam is in Room1 with Box1, Max is in Room2 with Box2, and no-one
 is holding any boxes.
 Everyone has complete knowledge of the initial situation:
\begin_inset Formula \begin{gather*}
InRoom(Sam,Room1,S_{0})\\
InRoom(Box1,Room1,S_{0})\\
InRoom(Max,Room2,S_{0})\\
InRoom(Box2,Room2,S_{0})\\
\neg Holding(agt,box,S_{0})\\
K_{0}(agt,s,S_{0})\rightarrow s=S_{0}\end{gather*}

\end_inset


\end_layout

\begin_layout Standard
The following are examples of knowledge queries that can be posed in our
 formalism, and a brief explanation of their outcome:
\begin_inset Formula \[
\mathcal{D}_{Obs}\models\mathbf{Knows}(Sam,\neg Holding(Max,Box1),S_{0})\]

\end_inset


\end_layout

\begin_layout Standard
Initially, Sam knows that Max is not holding Box1.
 For 
\begin_inset Formula $Holding(Max,Box1)$
\end_inset

 to be true, he must have picked Box1 up.
 Since Box1 is in the same room as Sam, she would be able to observe him
 doing so.
 Since she has not observed that, she can conclude that 
\begin_inset Formula $Holding(Max,Box1)$
\end_inset

 is false.
\begin_inset Formula \[
\mathcal{D}_{Obs}\models\mathbf{\neg Knows}(Sam,\neg Holding(Max,Box2),S_{0})\]

\end_inset


\end_layout

\begin_layout Standard
By contrast, Sam does 
\emph on
not 
\emph default
know that Max is not holding Box2.
 Since Box2 is in a different room, Max could have picked it up without
 her observing the action.
\begin_inset Formula \begin{multline*}
\mathcal{D}_{Obs}\models\mathbf{Knows}(Sam,Holding(Max,Box1),\\
do(\{ pickUp(Max,Box1)\},\\
do(\{ goRoom(Max,Room1)\},S_{0}))\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
For Max to put down Box1 without Sam observing anything, he would have to
 first move to a different room.
 Since the action of moving to a different room would be observed by Sam,
 she knows that he must be holding the box.
\begin_inset Formula \begin{multline*}
\mathcal{D}_{Obs}\models\mathbf{\neg Knows}(Sam,Holding(Max,Box1),\\
do(\{ goRoom(Max,Room2)\},\\
do(\{ pickUp(Max,Box1)\},\\
do(\{ goRoom(Max,Room1)\},S_{0})))\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Once Max takes Box1 into a different room, Sam can no longer be sure that
 he is holding it, since he may put it down without her observing anything.
\end_layout

\begin_layout Subsection
Knowledge or Belief?
\end_layout

\begin_layout Standard
We note at this point that this paper is restricted to a logic of 
\emph on
knowledge
\emph default
 - everything known by an agent must actually be true in the world.
 Of course, there has also been significant and important work on 
\emph on
belief
\emph default
 in the situation calculus 
\begin_inset LatexCommand \cite{shapiro00sc_belief}

\end_inset

, where agents may be mistaken about the state of the world.
\end_layout

\begin_layout Standard
As evidenced in equation (
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

), knowledge requires agents to take into account all possible sequences
 of unobservable actions.
 This can lead to very limited knowledge when many actions are unobservable,
 as seen in the example above when the agent 
\begin_inset Formula $Sam$
\end_inset

 cannot know the state of a box located in a different room.
 In a belief-based system, she could have continued to believe that 
\begin_inset Formula $Max$
\end_inset

 was still holding 
\begin_inset Formula $Box1$
\end_inset

 until she had reason to believe otherwise.
 Whether it is more appropriate to accept the possibility of an incorrect
 belief, or to know that something cannot be known and avoid being mistaken,
 will depend on the individual application.
\end_layout

\begin_layout Standard
We also note that many such belief-based systems are based on the possible-situa
tions semantics developed by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 in the context of knowledge.
 We therefore believe that the concrete notion of observations developed
 in this paper also promises an improved foundation for belief-based systems.
\end_layout

\begin_layout Section
Reasoning
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:Reasoning}

\end_inset


\end_layout

\begin_layout Subsection
Regression
\end_layout

\begin_layout Standard
The appearance of the 
\begin_inset Formula $\leq_{PbU(agt)}$
\end_inset

 ordering over situations in equation (
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

) means that our new successor state axiom universally quantifies over situation
s, so standard regression techniques cannot be applied.
 To permit an effective reasoning procedure, we appeal to the 
\emph on
persistence condition
\emph default
 meta-operator 
\begin_inset LatexCommand \cite{kelly07sc_persistence}

\end_inset

.
 This operator transforms a uniform formula 
\begin_inset Formula $\phi$
\end_inset

 and action description predicate 
\begin_inset Formula $\alpha$
\end_inset

 into a uniform formula 
\begin_inset Formula $\mathcal{P}_{\mathcal{D}}(\phi,\alpha)$
\end_inset

 that is true in all situations where 
\begin_inset Formula $\phi$
\end_inset

 will persist if all future actions satisfy 
\begin_inset Formula $\alpha$
\end_inset

:
\begin_inset Formula \[
\mathcal{D}\models\mathcal{P}_{\mathcal{D}}(\phi,\alpha)[s]\equiv\forall s'\,.\, s\leq_{\alpha}s'\,\rightarrow\,\phi[s']\]

\end_inset


\end_layout

\begin_layout Standard
The procedure for determining 
\begin_inset Formula $\mathcal{P}_{\mathcal{D}}$
\end_inset

 replaces second-order induction with iterated first-order reasoning.
 It also requires that there be only finitely many types of action, an assumptio
n met by most realistic domains.
\end_layout

\begin_layout Standard
The persistence condition can be used to augment the technique for regressing
 knowledge queries developed in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

.
 Assuming that the knowledge fluent 
\begin_inset Formula $K$
\end_inset

 appears only in the context of a 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro, we propose the following to replace the existing regression clause
 for 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

:
\begin_inset Formula \begin{multline}
\mathcal{R}_{\mathcal{D}}(\mathbf{Knows}(agt,\phi,do(c,s)))=\\
\exists o\,.\, Observations(agt,c,s)=o\\
\wedge\left[o=\{\}\rightarrow\mathbf{Knows}(agt,\phi,s)\right]\\
\wedge\,\left[o\neq\{\}\rightarrow\mathbf{Knows}(agt,\forall c'.\, Observations(agt,c',s)=o\right.\\
\left.\wedge Poss(c',s)\rightarrow\mathcal{R}_{\mathcal{D}}(\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[do(c',s)]),s)\right]\label{eqn:R_do_c_s}\end{multline}

\end_inset

 As required, this reduces a knowledge query at 
\begin_inset Formula $do(c,s)$
\end_inset

 to a knowledge query at 
\begin_inset Formula $s$
\end_inset

.
 It is also intuitively appealing: to know that 
\begin_inset Formula $\phi$
\end_inset

 holds, the agent must know that in all situations that agree with its observati
ons, 
\begin_inset Formula $\phi$
\end_inset

 cannot become false without it making an observation.
\end_layout

\begin_layout Standard
We must also specify the regression of 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 in the initial situation, as equation (
\begin_inset LatexCommand \ref{eqn:new_k_s0}

\end_inset

) also quantifies over situations.
 This clause results in standard first-order modal reasoning over the 
\begin_inset Formula $K_{0}$
\end_inset

 relation, as required by the procedure in 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

:
\begin_inset Formula \begin{multline}
\mathcal{R}_{\mathcal{D}}(\mathbf{Knows}(agt,\phi,S_{0}))=\\
\forall s\, K_{0}(agt,s,S_{0})\rightarrow\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[s]\label{eqn:R_s0}\end{multline}

\end_inset

 Regression of the additional predicates we have introduced (
\begin_inset Formula $CanObs$
\end_inset

, 
\begin_inset Formula $Observations$
\end_inset

, etc) is identical to that of 
\begin_inset Formula $Poss$
\end_inset

 and requires no special treatment here, except to mention that the restriction
 to a finite number of actions allows regression of such predicates even
 when their arguments are variables.
\end_layout

\begin_layout Standard
We briefly sketch the highlights of a proof that our modified regression
 operator in equations (
\begin_inset LatexCommand \ref{eqn:R_do_c_s}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:R_s0}

\end_inset

) preserves equivalence.
 It proceeds by expanding the definition for 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 using our new successor state axiom for 
\begin_inset Formula $K$
\end_inset

, collecting sub-formulae that match the form of the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro, and using regression and persistence to render the resulting knowledge
 expression uniform in 
\begin_inset Formula $s$
\end_inset

.
 Applying persistence to an expansion of 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 at the initial situation completes the proof.
\end_layout

\begin_layout Theorem
Given a basic action theory 
\begin_inset Formula $\mathcal{D}_{Obs}$
\end_inset

 and a formula 
\begin_inset Formula $\phi$
\end_inset

 uniform in 
\begin_inset Formula $do(c,s)$
\end_inset

, it is always the case that:
\begin_inset Formula \[
\mathcal{D}_{Obs}\models\phi[do(c,s)]\equiv\mathcal{R}_{\mathcal{D}}(\phi[do(c,s)])\]

\end_inset

 
\end_layout

\begin_layout Proof
We need only consider applications of 
\begin_inset Formula $\mathcal{R}_{\mathcal{D}}$
\end_inset

 when 
\begin_inset Formula $\phi$
\end_inset

 has the form 
\begin_inset Formula $\mathbf{Knows}(agt,\phi,s)$
\end_inset

, as other regression clauses are not modified from 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

.
 For clarity we define the abbreviation 
\begin_inset Formula $\mathbf{PEO}(agt,\phi,o,s)$
\end_inset

 (for 
\begin_inset Quotes eld
\end_inset

persists under equivalent observations
\begin_inset Quotes erd
\end_inset

) which states that 
\begin_inset Formula $\phi$
\end_inset

 holds in all legal futures of 
\begin_inset Formula $s$
\end_inset

 compatible with observations 
\begin_inset Formula $o$
\end_inset

:
\begin_inset Formula \begin{multline*}
\mathbf{PEO}(agt,\phi,o,s)\,\isdef\,\\
\forall c'\,.\, Observations(agt,c',s)=o\wedge Poss(c',s)\rightarrow\\
\left[\forall s'\,.\, do(c',s)\leq_{PbU(agt)}s'\rightarrow\,\phi[s']\right]\end{multline*}

\end_inset

 Combining and rearranging equations (
\begin_inset LatexCommand \ref{eqn:knows_def}

\end_inset

) and (
\begin_inset LatexCommand \ref{eqn:new_k_ssa}

\end_inset

), the definition of 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 at 
\begin_inset Formula $do(c,s)$
\end_inset

 can be written in the form: 
\begin_inset Formula \begin{multline*}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\exists o\,.\, Observations(agt,c,s)=o\\
\wedge\,\left[o=\{\}\rightarrow\forall s'\,.\, K(agt,s',s)\rightarrow\phi[s']\right]\\
\wedge\,\left[o\neq\{\}\rightarrow\forall s'\,.\, K(agt,s',s)\rightarrow\mathbf{PEO}(agt,\phi,o,s')\right]\end{multline*}

\end_inset


\end_layout

\begin_layout Proof
Noting that both conjuncts contain sub-formulae matching the form of the
 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro, it can be substituted back in to give:
\begin_inset Formula \begin{multline*}
\mathbf{Knows}(agt,\phi,do(c,s))\equiv\\
\exists o\,.\, Observations(agt,c,s)=o\\
\wedge\,\left[o=\{\}\rightarrow\mathbf{Knows}(agt,\phi,s)\right]\\
\wedge\,\left[o\neq\{\}\rightarrow\mathbf{Knows}(agt,\mathbf{PEO}(agt,\phi,o,s'),s)\right]\end{multline*}

\end_inset

 For 
\begin_inset Formula $\mathbf{PEO}(agt,\phi,o,s')$
\end_inset

 to legitimately appear inside the 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro it must be uniform in the situation variable 
\begin_inset Formula $s'$
\end_inset

.
 Applying the persistence condition and regressing to make the expression
 uniform, we develop the following equivalence:
\begin_inset Formula \begin{multline*}
\mathbf{PEO}(agt,\phi,o,s)\equiv\\
\forall c'\,.\, Observations(agt,c',s)=o\wedge Poss(c',s)\rightarrow\\
\mathcal{R}_{\mathcal{D}}(\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[do(c',s)])\end{multline*}

\end_inset

 Finally, since the situation variable inside the formula in a 
\begin_inset Formula $\mathbf{Knows}$
\end_inset

 macro is renamed when the macro is expanded, we can rename 
\begin_inset Formula $s'$
\end_inset

 to 
\begin_inset Formula $s$
\end_inset

 to avoid having an additional variable.
 This gives equation (
\begin_inset LatexCommand \ref{eqn:R_do_c_s}

\end_inset

) as required.
\end_layout

\begin_layout Proof
For 
\begin_inset Formula $S_{0}$
\end_inset

, a straightforward transformation of equations (
\begin_inset LatexCommand \ref{eqn:knows_def}

\end_inset

) and (
\begin_inset LatexCommand \ref{eqn:new_k_s0}

\end_inset

) gives:
\begin_inset Formula \begin{multline*}
\mathbf{Knows}(agt,\phi,S_{0})\equiv\\
\forall s\,.\, K_{0}(agt,s,S_{0})\rightarrow\left[\forall s'\,.\, s\leq_{PbU(agt)}s'\rightarrow\phi[s']\right]\end{multline*}

\end_inset

 Applying the persistence condition operator, this can easily be re-written
 as:
\begin_inset Formula \begin{multline*}
\mathbf{Knows}(agt,\phi,S_{0})\equiv\\
\forall s\,.\, K_{0}(agt,s,S_{0})\rightarrow\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[s]\end{multline*}

\end_inset


\end_layout

\begin_layout Proof
This is equation (
\begin_inset LatexCommand \ref{eqn:R_s0}

\end_inset

), as required.
\end_layout

\begin_layout Standard
We can thus handle knowledge queries using regression, the standard technique
 for effective reasoning in the situation calculus.
\end_layout

\begin_layout Subsection
Reasoning from Observations
\end_layout

\begin_layout Standard
While this reasoning method is suitable for modeling and simulation purposes,
 it would be unreasonable for a situated agent to ask 
\begin_inset Quotes eld
\end_inset

do I know 
\begin_inset Formula $\phi$
\end_inset

 in the current situation?
\begin_inset Quotes erd
\end_inset

 using the situation calculus query 
\begin_inset Formula $\mathcal{D}\models\mathbf{Knows}(agt,\phi,s)$
\end_inset

, as it cannot be expected to have the full current situation 
\begin_inset Formula $s$
\end_inset

.
 However, it will have its current observation history 
\begin_inset Formula $h$
\end_inset

.
 We define knowledge with respect to an observation history as follows:
\begin_inset Formula \begin{multline*}
\mathbf{Knows}(agt,\phi,h)\,\isdef\\
\forall s.ObsHist(agt,s)=h\wedge Root(s)=S_{0}\rightarrow\mathbf{Knows}(agt,\phi,s)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
It is a straightforward consequence of Theorem 
\begin_inset LatexCommand \ref{thm:k_obs_equiv}

\end_inset

 that this form of knowledge is equivalent to knowledge based on a situation
 term having that observation history and rooted at 
\begin_inset Formula $S_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
Extending the regression rules in equations (
\begin_inset LatexCommand \ref{eqn:R_do_c_s}

\end_inset

,
\begin_inset LatexCommand \ref{eqn:R_s0}

\end_inset

) to handle formulae of this form is actually simpler than for regression
 over situations, as there are no empty observations in a history.
 The result is: 
\begin_inset Formula \begin{multline*}
\mathcal{R}_{\mathcal{D}}(\mathbf{Knows}(agt,\phi,o\cdot h))=\\
\mathbf{Knows}(agt,\forall c\,.\, Observations(agt,c,s)=o\\
\wedge Poss(c,s)\rightarrow\mathcal{R}_{\mathcal{D}}(\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[do(c,s)]),h)\end{multline*}

\end_inset


\begin_inset Formula \begin{multline*}
\mathcal{R}_{\mathcal{D}}(\mathbf{Knows}(agt,\phi,\epsilon))=\\
\forall s\,.\, K_{0}(agt,s,S_{0})\rightarrow\mathcal{P}_{\mathcal{D}}(\phi,PbU(agt))[s]\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Using regression in this way, agents can reason about their own knowledge
 using only their local information.
 Our work thus makes it possible to include a situation calculus model in
 the implementation of a real-world multi-agent system, even when agents
 have only partial awareness of the actions being performed.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:Related-Work}

\end_inset

Our work continues a long tradition of extensions to the possible-situations
 semantics developed by 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

, particularly those that incorporate additional features such as concurrent
 actions 
\begin_inset LatexCommand \cite{scherl03conc_knowledge}

\end_inset

 and multiple agents 
\begin_inset LatexCommand \cite{shapiro01casl_feat_inter}

\end_inset

.
 While other authors have noted that the assumption of total awareness of
 actions is unrealistic for many domains 
\begin_inset LatexCommand \cite{Lesperance99sitcalc_approach,shapiro04sc_belief_exog}

\end_inset

, to our knowledge this is the first paper to propose a flexible alternative
 accompanied by an effective reasoning procedure.
\end_layout

\begin_layout Standard
The knowledge-based semantics of 
\begin_inset LatexCommand \cite{scherl03sc_knowledge}

\end_inset

 have also been extended to handle belief 
\begin_inset LatexCommand \cite{shapiro00sc_belief}

\end_inset

, and we believe an observation-based approach would be a promising extension
 for such systems as well.
 The work of 
\begin_inset LatexCommand \cite{shapiro04sc_belief_exog}

\end_inset

 has shown how agents in such a belief-based system may hypothesize the
 occurrence of exogenous actions when they find that their beliefs are wrong,
 avoiding the issue of being aware of actions performed by others.
 This approach cannot be applied in knowledge-based systems since agents
 are not permitted to be mistaken.
 The authors of 
\begin_inset LatexCommand \cite{shapiro04sc_belief_exog}

\end_inset

 also assert that the actions performed by others can only be realistically
 determined through explicit sensing actions.
 However, these explicit sensing actions can be managed seperately from
 the reasoning process of the agent and the results made available asynchronousl
y as observations.
 Our formalism is flexible enough to operate at either level of abstraction,
 facilitating a clean deliniation between observation management and deliberatio
n.
 
\end_layout

\begin_layout Standard
While popular, the possible-situations semantics is not the only way to
 model knowledge or belief in the situation calculus.
 An alternate approach is to directly axiomatize the effects that each action
 has on the mental state of each agent 
\begin_inset LatexCommand \cite{demolombe00tractable_sc_belief}

\end_inset

.
 This can improve the tractability of reasoning, however the possible-situations
 semantics has the advantage of requiring only domain-independent axioms,
 significantly reducing work involved in specifying complex domains.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:Conclusions}

\end_inset

In this paper we have significantly increased the scope of the situation
 calculus for modeling knowledge in complex domains, where there may be
 multiple agents and partial observability of actions.
 By explicitly reifying the observations made by each agent as the world
 evolves, we have generalized the dynamics of knowledge update.
 We have shown that this can accommodate the important case where agents
 are aware that a property of their environment has changed, but do not
 know the precise actions responsible.
 Despite requiring universal quantification over future situations, we have
 shown that the regression operator can be adapted to allow effective reasoning
 within our new formalism.
 It can also be used to reason from the internal perspective of a single
 agent, allowing agents to reason about their own world.
\end_layout

\begin_layout Standard
With our new semantics of knowledge, the situation calculus is well positioned
 for representing, reasoning about, and implementing more complex, realistic
 multi-agent systems.
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[abbrv]{/storage/uni/pgrad/library/references}

\end_inset


\end_layout

\end_body
\end_document
