#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

A top-down approach to Agent Programming
\layout Author

Ryan Kelly
\layout Section

Introduction
\layout Standard

The field of Agent Programming aims to represent and develop software systems
 in terms of 
\begin_inset Quotes eld
\end_inset 

agents
\begin_inset Quotes erd
\end_inset 

 - autonomous software entities with properties such as beliefs, desires
 and intentions.
 This model of programming shows promise in a wide variety of fields, not
 least because it allows the programmer to think about the task at hand
 in terms of how they, an autonomous agent, would approach it.
\layout Standard

An important goal in the agent programming field is the efficient, reliable
 production of multi-agent systems (MASs) in which several independent software
 agents work together to implement the required functionality.
\layout Standard

Many popular agent programming languages take a 
\begin_inset Quotes eld
\end_inset 

bottom-up
\begin_inset Quotes erd
\end_inset 

 approach to programming - behavior is specified at the level of individual
 agents, while the multi-agent aspects of the system boil down to little
 more than primitive speech acts.
 For example, the language might provide a single primitive 
\begin_inset Quotes eld
\end_inset 

inform(a,b,c)
\begin_inset Quotes erd
\end_inset 

 with which agent a can inform about b about some information c.
 While such languages can be used to develop multi-agent systems, this approach
 can make it difficult to reason about the properties of multi-agent interaction.
\layout Standard

Systems have also been developed for the specification and verification
 of MASs using a higher-level language.
 This allows the properties both of individual agents and the interactions
 between agents to be reasoned about.
 However, specifications made in these systems generally need to be transformed
 into a lower-level language before they can be deployed as a functioning
 system.
\layout Standard

This paper has three goals:
\layout Itemize

To survey the existing technology available for building multi-agent systems
\layout Itemize

To propose a collection of 
\begin_inset Quotes eld
\end_inset 

motivational problems
\begin_inset Quotes erd
\end_inset 

, examples of simple multi-agent systems which should be buildable in a
 simple manner within a MAS framework
\layout Itemize

To examine the strenghts and shortcomings of the existing technology with
 repsect to these motivational problems.
\layout Section

Literature Review
\layout Subsection

Bottom-up Languages
\layout Subsubsection

3APL
\layout Standard

3APL 
\begin_inset LatexCommand \cite{hindricks99}

\end_inset 

 is an agent-oriented programming language in which an agent is built around
 the following components: a belief base modelling the agent's view of the
 world, a set of imperative goals the agent is attempting to achieve, and
 a set of so-called 
\begin_inset Quotes eld
\end_inset 

practical reasoning rules
\begin_inset Quotes erd
\end_inset 

 with which the agent can modify its goals and behavior.
 It is a mix of imperative programming (for the goals) and logic programming
 (for the belief base).
\layout Standard

The language is extended in 
\begin_inset LatexCommand \cite{hindriks00semantics}

\end_inset 

 to include primitives for communication between agents.
 These take the form of two pairs of communication actions: 
\begin_inset Quotes eld
\end_inset 

ask
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

tell
\begin_inset Quotes erd
\end_inset 

 for communicating knowledge/beliefs and 
\begin_inset Quotes eld
\end_inset 

req
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

offer
\begin_inset Quotes erd
\end_inset 

 to make requests for action.
 These communication actions are synchronous in that the sending and receiving
 agents need to cooperate and coordinate their activities in order to sucessfull
y carry out the communication.
\layout Standard

An implementation of the 3APL specification in Java in available 
\begin_inset LatexCommand \cite{Hoeve03}

\end_inset 

, with the ability to execute seperate agents on seperate computers as long
 as both are running the appropriate platform software.
 This implementation does not follow the communication semantics defined
 in 
\begin_inset LatexCommand \cite{hindriks00semantics}

\end_inset 

, but rather implements the communication standards set out by FIPA (TODO:
 reference).
\layout Subsubsection

Golog and derivatives
\layout Standard

Golog 
\begin_inset LatexCommand \cite{levesque97golog}

\end_inset 

 is a language designed for modelling dynamic action domains, based on the
 situation calculus.
 The basic idea has spawned a number of derivative languages such as ConGolog
 
\begin_inset LatexCommand \cite{lesperance99modeling,giacomo00congolog}

\end_inset 

 for modelling concurrency and IndiGolog (TODO: reference).
\layout Subsubsection

FLUX
\layout Standard

Open questions: concurrency
\layout Subsubsection

AgentSpeak?
\layout Subsubsection

DyLOG?
\layout Subsection

MAS-oriented Languages
\layout Subsubsection

Concurrent METATEM
\layout Standard


\begin_inset Quotes eld
\end_inset 

not suitable for building real systems
\begin_inset Quotes erd
\end_inset 

: why?
\layout Subsubsection

CASL: Congnitive Agent Specification Language
\layout Standard

Uses ConGolog for dynamics, what else does it have?
\layout Standard

Sounds like it might not be suitable for actual implementation, only modelling/t
esting.
 If so, why? If not, how can we make it better? (e.g.
 FLUX instead of ConGolog?)
\layout Subsection

ARPEGGIO
\layout Section

Motivational Problems
\layout Subsection

Distributed Sort
\layout Standard

One agent needs to produce a sorted list of elements, but the ability to
 compare elements is distributed over the agents of the system - that is,
 
\begin_inset Formula $\forall x,y[D(\delta(x,y))\vee D(\neg\delta(x,y))]$
\end_inset 

 where 
\begin_inset Formula $\delta(x,y)$
\end_inset 

 is true when 
\begin_inset Formula $x<y$
\end_inset 

.
 A simpler instance might be 
\begin_inset Formula $\forall x,y\exists iK_{i}(\delta(x,y)\vee\neg\delta(x,y))$
\end_inset 

.
\layout Standard

Can we map this onto an agent domain from a high-level description of what
 
\begin_inset Quotes eld
\end_inset 

sorting
\begin_inset Quotes erd
\end_inset 

 is, e.g.
 a logic program for sorting.
 Guarantee that the final list is sorted? Gurantee some upper bound on the
 number of comparisons/communications?
\layout Standard

concept: generating agent behavior based on generic algorithm
\layout Subsection

Distributed Travelling Salesmen
\layout Standard

Haldane and Holdaway, 2003 (431 project paper)
\layout Standard

A group of N agents needs to collectively visit all nodes in a graph in
 the smallest number of steps possible.
 Assumed to be able to communicate globally but not share state.
 Need to guarantee that all nodes are eventually reached (liveness).
\layout Standard

concept: multi-agent cooperative behavior from a single specification
\layout Standard


\begin_inset LatexCommand \BibTeX[plain]{/storage/uni/pgrad/library/references}

\end_inset 


\the_end
