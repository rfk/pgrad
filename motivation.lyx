#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

A top-down approach to Agent Programming
\layout Author

Ryan Kelly
\layout Section

Introduction
\layout Standard

Most agent programming languages take bottom-up approach - specify behaviors
 of individual agents.
 Multi-agent support limited to simple speech-acts.
 Proposal: this makes it difficult to reason about multi-agent behaviors,
 and unnecessarily complicated to specify them in a declarative fashion.
 This paper aims to provide some motivating examples for the development
 of a top-down agent programming language which would facilitate this kind
 of programming and reasoning.
\layout Section

Literature Review
\layout Standard

Logic-Based Specification Languages for Intelligent Software Agents (Leon
 Sterling et al): ARPEGGIO?
\layout Subsection

3APL
\layout Standard

Suitable for logical reasoning/property-proving?
\layout Subsection

Golog and derivatives
\layout Subsection

FLUX
\layout Standard

Open questions: concurrency
\layout Subsection

AgentSpeak?
\layout Subsection

DyLOG?
\layout Subsection

Concurrent METATEM
\layout Standard


\begin_inset Quotes eld
\end_inset 

not suitable for building real systems
\begin_inset Quotes erd
\end_inset 

: why?
\layout Subsection

CASL: Congnitive Agent Specification Language
\layout Standard

Uses ConGolog for dynamics, what else does it have?
\layout Standard

Sounds like it might not be suitable for actual implementation, only modelling/t
esting.
 If so, why? If not, how can we make it better? (e.g.
 FLUX instead of ConGolog?)
\layout Section

Motivational Problems
\layout Subsection

Distributed Sort
\layout Standard

One agent needs to produce a sorted list of elements, but the ability to
 compare elements is distributed over the agents of the system - that is,
 
\begin_inset Formula $\forall x,y[D(\delta(x,y))\vee D(\neg\delta(x,y))]$
\end_inset 

 where 
\begin_inset Formula $\delta(x,y)$
\end_inset 

 is true when 
\begin_inset Formula $x<y$
\end_inset 

.
 A simpler instance might be 
\begin_inset Formula $\forall x,y\exists iK_{i}(\delta(x,y)\vee\neg\delta(x,y))$
\end_inset 

.
\layout Standard

Can we map this onto an agent domain from a high-level description of what
 
\begin_inset Quotes eld
\end_inset 

sorting
\begin_inset Quotes erd
\end_inset 

 is, e.g.
 a logic program for sorting.
 Guarantee that the final list is sorted? Gurantee some upper bound on the
 number of comparisons/communications?
\layout Standard

concept: generating agent behavior based on generic algorithm
\layout Subsection

Distributed Travelling Salesmen
\layout Standard

Haldane and Holdaway, 2003 (431 project paper)
\layout Standard

A group of N agents needs to collectively visit all nodes in a graph in
 the smallest number of steps possible.
 Assumed to be able to communicate globally but not share state.
 Need to guarantee that all nodes are eventually reached (liveness).
\layout Standard

concept: multi-agent cooperative behavior from a single specification
\the_end
