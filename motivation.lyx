#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

A top-down approach to Agent Programming
\layout Author

Ryan Kelly
\layout Section

Introduction
\layout Standard

Most agent programming languages take bottom-up approach - specify behaviors
 of individual agents.
 Multi-agent support limited to simple speech-acts.
 Propose: this makes it difficult to reason about multi-agent behaviors,
 and unnecessarily complicated to specify them in a declarative fashion.
 This paper aims to provide some motivating problems for the development
 of a top-down agent programming language which would facilitate this kind
 of programming and reasoning.
\layout Section

Literature Review
\layout Standard

3APL, congolog/indigolog, flux.
 AgentSpeak?
\layout Section

Example Problems
\layout Subsection

Distributed Sort
\layout Standard

One agent needs to produce a sorted list of elements, but the ability to
 compare elements is distributed over the agents of the system - that is,
 
\begin_inset Formula $\forall x,yD(\delta(x,y))$
\end_inset 

 where 
\begin_inset Formula $\delta(x,y)$
\end_inset 

 is true when 
\begin_inset Formula $x<y$
\end_inset 

.
 A simpler instance might be 
\begin_inset Formula $\forall x,y\exists iK_{i}(\delta(x,y))$
\end_inset 

.
\the_end
