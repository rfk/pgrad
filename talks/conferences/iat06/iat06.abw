<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" styles="unlocked" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="50" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.0" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.99.2" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="dc.format">application/x-abiword</m>
<m key="abiword.generator">AbiWord</m>
</metadata>
<history version="14" edit-time="2979" last-saved="1165202369" uid="5155fdfc-833f-11db-81e7-c02b1af68b69">
<version id="14" started="1165199409" uid="407cfcc2-8346-11db-81e7-c02b1af68b69" auto="0" top-xid="2"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; text-position:normal; widows:2; font-style:normal; text-indent:0in; font-variant:normal; margin-right:0pt; lang:en-US; line-height:1.0; font-size:12pt; text-decoration:none; margin-bottom:0pt; font-weight:normal; bgcolor:transparent; text-align:left; font-stretch:normal"/>
</styles>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section xid="1" props="page-margin-footer:0.5in; page-margin-header:0.5in">
<p style="Normal" xid="2">Good morning, I am Ryan Kelly, joint work with Adrian Pearce, "Towards High-Level Programming for Distributed Problem Solving"</p>
<p style="Normal" xid="3"></p>
<p style="Normal" xid="4">Bit of a mouthful, so let's do the 30-second talk overview by examining the keywords in the title.</p>
<p style="Normal" xid="5">  - "Towards" - not just about our technical results, also want to highlight wider research program, where we are going and why</p>
<p style="Normal" xid="6">  - "High-Level Programming" - maybe unfamiliar, for practical purposes means "Golog". Discuss semantics suitable for M.A. teams. Will see examples shortly</p>
<p style="Normal" xid="7">  - "Distributed" - preliminary results on distributed execution</p>
<p style="Normal" xid="9"></p>
<p style="Normal" xid="10">DPS, for us, means two things:</p>
<p style="Normal" xid="11">  - Task Specification: capturing the desired behavior of the team in some language with appropriate semantics and a good level of abstraction</p>
<p style="Normal" xid="12">  - Cooperative Execution Strategy: how do they go about coordinating the execution of this program?</p>
<p style="Normal" xid="13">As I'm sure the entire room can tell me, there's much more than this, simply outside our scope.  Our work would be part of a larger system.</p>
<p style="Normal" xid="14"></p>
<p style="Normal" xid="15">High-Level programming is a promising approach from single-agent programming</p>
<p style="Normal" xid="16"> - primitive actions from the world</p>
<p style="Normal" xid="17"> - connected by standard programming operators (if, while, procedures)</p>
<p style="Normal" xid="18"> - including controlled amounts of non-determinsm (choice, iteration)</p>
<p style="Normal" xid="20">Can think of it as a "program template".  Those familiar with Golog will be right at home, or perhaps you're familiar with Dynamic Logc.</p>
<p style="Normal" xid="21">Our vision: the cooperative execution of a shared High-Level Program by a team of autonomous agents.</p>
<p style="Normal" xid="22"></p>
<p style="Normal" xid="23">Best way to demonstrate is by example, so here we have one.</p>
<p style="Normal" xid="24">Motivating our work using "cooking agents" domain, where team of robotic chefs must cooperate to prepare a meal.  Might seem like "toy" domain, but has many interesting multi-agent aspects (shared resources, conflicting actions, high potential for parallellism).</p>
<p style="Normal" xid="25">[ explain the program, esp non-deterministic operators ]</p>
<p style="Normal" xid="26"></p>
<p style="Normal" xid="27">In the single-action domain, an agent would be given this program and it would have to plan a "legal execution" of the program - fill in the nondeterministic bits in such a way that the program runs to completion.  Involves reasoning about effects and preconditions of actions.  Has quite a straightforward encoding as a logic program == interpreter in prolog.</p>
<p style="Normal" xid="28"></p>
<p style="Normal" xid="30">Why would we want to do this? [read advantages off slide]</p>
<p style="Normal" xid="31">We're not the only ones that think this is a powerful approach - success of ReadyLog.</p>
<p style="Normal" xid="32"></p>
<p style="Normal" xid="33">Several golog variants including original GOLOG, ConGolog, IndiGolog.</p>
<p style="Normal" xid="34">Why another variant?  [list off the very good reasons why]</p>
<p style="Normal" xid="50">    - TODO: why is each important?</p>
<p style="Normal" xid="35"></p>
<p style="Normal" xid="36">Very quick review: situation calculus</p>
<p style="Normal" xid="37"></p>
<p style="Normal" xid="38">Quick review: golog transition semantics</p>
<p style="Normal" xid="39"></p>
<p style="Normal" xid="40">Consider the concurrency operator as we want to use it in our example program.</p>
<p style="Normal" xid="42">Using single-agent semantics, only one chopping procedure can progress at each step.</p>
<p style="Normal" xid="43">With lots of agents this is a lot of wasted potential for parallellism.</p>
<p style="Normal" xid="44">Basic idea: allow union of actions that transition both programs.</p>
<p style="Normal" xid="45">This can be dangerous if not careful</p>
<p style="Normal" xid="46"></p>
<p style="Normal" xid="47">[explain safety issues, show new axiom]</p>
<p style="Normal" xid="48"></p>
<p style="Normal" xid="49">[natural actions]</p>
</section>
</abiword>
